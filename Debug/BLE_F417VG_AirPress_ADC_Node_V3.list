
BLE_F417VG_AirPress_ADC_Node_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000783c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080079d0  080079d0  000179d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dec  08007dec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007df4  08007df4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200001e0  08007fd8  000201e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08007fd8  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a01  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002688  00000000  00000000  00030c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00033298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00034100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240a3  00000000  00000000  00034e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001074d  00000000  00000000  00058f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db2f1  00000000  00000000  00069660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144951  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dac  00000000  00000000  001449a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079b4 	.word	0x080079b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080079b4 	.word	0x080079b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <ADC1_Conv>:

/* Private typedef -----------------------------------------------------------*/
ADC1_t ADC_1;

void ADC1_Conv(ADC_HandleTypeDef *hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	//ADC start, Green LED off
	//HAL_GPIO_WritePin(GLED_Port, GLED , GPIO_PIN_RESET);

	unsigned char Count_in, Count_Sum;
	unsigned char Count_Sum_value = 200;//adc value Sum count
 8000ec8:	23c8      	movs	r3, #200	; 0xc8
 8000eca:	737b      	strb	r3, [r7, #13]
    for(Count_Sum=0; Count_Sum < Count_Sum_value; Count_Sum++)//take the adc value sum by count 
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73bb      	strb	r3, [r7, #14]
 8000ed0:	e03f      	b.n	8000f52 <ADC1_Conv+0x92>
    {
    	for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Convert ADC IN by scan channel
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e033      	b.n	8000f40 <ADC1_Conv+0x80>
    	{
    		/*##-1- Start the conversion process #######################################*/
    		HAL_ADC_Start(hadc);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 fff1 	bl	8001ec0 <HAL_ADC_Start>
    			the peripheral; if it?�s busy you need to wait for the end of current
    			conversion before starting a new one.
    			For simplicity reasons, this example is just waiting till the end of the
    	 	 	conversion, but application may perform other tasks while conversion
    			operation is ongoing. */
    		HAL_ADC_PollForConversion(hadc, 50);
 8000ede:	2132      	movs	r1, #50	; 0x32
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f001 f8f2 	bl	80020ca <HAL_ADC_PollForConversion>

    			/* Check if the continous conversion of regular channel is finished */
    		while(!HAL_IS_BIT_SET(HAL_ADC_GetState(hadc), HAL_ADC_STATE_REG_EOC)){};
 8000ee6:	bf00      	nop
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f001 faa9 	bl	8002440 <HAL_ADC_GetState>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ef8:	d1f6      	bne.n	8000ee8 <ADC1_Conv+0x28>
    		/*##-3- Get the converted value of regular channel  ######################*/
    		ADC_1.BufferValue[Count_in] = HAL_ADC_GetValue(hadc);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f001 f970 	bl	80021e0 <HAL_ADC_GetValue>
 8000f00:	4602      	mov	r2, r0
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	b291      	uxth	r1, r2
 8000f06:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <ADC1_Conv+0x10c>)
 8000f08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            ADC_1.BufferValue_Sum[Count_in] += ADC_1.BufferValue[Count_in];
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	4a2f      	ldr	r2, [pc, #188]	; (8000fcc <ADC1_Conv+0x10c>)
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	492c      	ldr	r1, [pc, #176]	; (8000fcc <ADC1_Conv+0x10c>)
 8000f1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	440a      	add	r2, r1
 8000f24:	4929      	ldr	r1, [pc, #164]	; (8000fcc <ADC1_Conv+0x10c>)
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	605a      	str	r2, [r3, #4]
            ADC_1.BufferValue_Avg[Count_in]=0;//clear avg Value
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <ADC1_Conv+0x10c>)
 8000f30:	3304      	adds	r3, #4
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	2200      	movs	r2, #0
 8000f38:	809a      	strh	r2, [r3, #4]
    	for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Convert ADC IN by scan channel
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d9c8      	bls.n	8000ed8 <ADC1_Conv+0x18>
    	}
    	HAL_ADC_Stop(hadc);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f001 f88c 	bl	8002064 <HAL_ADC_Stop>
    for(Count_Sum=0; Count_Sum < Count_Sum_value; Count_Sum++)//take the adc value sum by count 
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	73bb      	strb	r3, [r7, #14]
 8000f52:	7bba      	ldrb	r2, [r7, #14]
 8000f54:	7b7b      	ldrb	r3, [r7, #13]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3bb      	bcc.n	8000ed2 <ADC1_Conv+0x12>
    }//End adc value sum by count 200

    for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Calculate the ADC value average Convert to the Temp value
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e02c      	b.n	8000fba <ADC1_Conv+0xfa>
    {
        ADC_1.BufferValue_Avg[Count_in] = ADC_1.BufferValue_Sum[Count_in]/Count_Sum_value ;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <ADC1_Conv+0x10c>)
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	7b7b      	ldrb	r3, [r7, #13]
 8000f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	b291      	uxth	r1, r2
 8000f74:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <ADC1_Conv+0x10c>)
 8000f76:	3304      	adds	r3, #4
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	809a      	strh	r2, [r3, #4]
        ADC_1.Vol[Count_in]=ADC_1.BufferValue_Avg[Count_in];
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	4911      	ldr	r1, [pc, #68]	; (8000fcc <ADC1_Conv+0x10c>)
 8000f86:	3304      	adds	r3, #4
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	440b      	add	r3, r1
 8000f8c:	8898      	ldrh	r0, [r3, #4]
 8000f8e:	490f      	ldr	r1, [pc, #60]	; (8000fcc <ADC1_Conv+0x10c>)
 8000f90:	f102 0308 	add.w	r3, r2, #8
 8000f94:	4602      	mov	r2, r0
 8000f96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        ADC_1.BufferValue_Sum[Count_in]=0;//clear Sum ValueV                
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <ADC1_Conv+0x10c>)
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
        ADC_1.BufferValue_Avg[Count_in]=0;//clear avg Valuee
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <ADC1_Conv+0x10c>)
 8000faa:	3304      	adds	r3, #4
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	809a      	strh	r2, [r3, #4]
    for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Calculate the ADC value average Convert to the Temp value
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d9cf      	bls.n	8000f60 <ADC1_Conv+0xa0>
        
    }
    //ADC data is ready, Green LED on
    //HAL_GPIO_WritePin(GLED_Port, GLED , GPIO_PIN_SET);
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000208 	.word	0x20000208

08000fd0 <BLE_USART>:
char Rev_SecTimeout_count;


//void BLE_USART(UART_HandleTypeDef *huart)
void BLE_USART(UART_HandleTypeDef *huart, ADC_HandleTypeDef *hadc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	switch(USARTBLE.Status)
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <BLE_USART+0xa4>)
 8000fdc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d025      	beq.n	8001030 <BLE_USART+0x60>
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	dc40      	bgt.n	800106a <BLE_USART+0x9a>
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <BLE_USART+0x22>
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d011      	beq.n	8001014 <BLE_USART+0x44>
					}
					Master_ACK_Check();
            	}
	    		break;
	    }
}
 8000ff0:	e03b      	b.n	800106a <BLE_USART+0x9a>
	    		HAL_GPIO_WritePin(RLED_Port, RLED , GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff8:	481f      	ldr	r0, [pc, #124]	; (8001078 <BLE_USART+0xa8>)
 8000ffa:	f001 fe69 	bl	8002cd0 <HAL_GPIO_WritePin>
	    		while(!USARTBLE.Revflag);
 8000ffe:	bf00      	nop
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <BLE_USART+0xa4>)
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f8      	bne.n	8001000 <BLE_USART+0x30>
	    		Connect_Rep_Check();
 800100e:	f000 f837 	bl	8001080 <Connect_Rep_Check>
	    		break;
 8001012:	e02a      	b.n	800106a <BLE_USART+0x9a>
	    		while(!USARTBLE.Revflag);
 8001014:	bf00      	nop
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <BLE_USART+0xa4>)
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f8      	bne.n	8001016 <BLE_USART+0x46>
	    		Connect_ACK_Check();
 8001024:	f000 f86e 	bl	8001104 <Connect_ACK_Check>
	    		USARTBLE.sendflag = 0;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <BLE_USART+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
	    		break;
 800102e:	e01c      	b.n	800106a <BLE_USART+0x9a>
            	if(USARTBLE.sendflag ==1)
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <BLE_USART+0xa4>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d017      	beq.n	8001068 <BLE_USART+0x98>
            		Transmit_ADC_data(huart);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f8f1 	bl	8001220 <Transmit_ADC_data>
					while(!USARTBLE.Revflag)
 800103e:	e00a      	b.n	8001056 <BLE_USART+0x86>
						if(Rev_SecTimeout_count==5)
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <BLE_USART+0xac>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b05      	cmp	r3, #5
 8001046:	d106      	bne.n	8001056 <BLE_USART+0x86>
							Rev_SecTimeout_count=0;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <BLE_USART+0xac>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
							USARTBLE.Status = WaitConnecting;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <BLE_USART+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
					while(!USARTBLE.Revflag)
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <BLE_USART+0xa4>)
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1ed      	bne.n	8001040 <BLE_USART+0x70>
					Master_ACK_Check();
 8001064:	f000 f892 	bl	800118c <Master_ACK_Check>
	    		break;
 8001068:	bf00      	nop
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000240 	.word	0x20000240
 8001078:	40020c00 	.word	0x40020c00
 800107c:	20000220 	.word	0x20000220

08001080 <Connect_Rep_Check>:

void Connect_Rep_Check(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	memset(USARTBLE.ConnCheck, 0, strlen(USARTBLE.ConnCheck) ); //clear connect response string
 8001086:	481b      	ldr	r0, [pc, #108]	; (80010f4 <Connect_Rep_Check+0x74>)
 8001088:	f7ff f8ac 	bl	80001e4 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	2100      	movs	r1, #0
 8001092:	4818      	ldr	r0, [pc, #96]	; (80010f4 <Connect_Rep_Check+0x74>)
 8001094:	f003 fde0 	bl	8004c58 <memset>
	strncpy(USARTBLE.ConnCheck, USARTBLE.RevData, 5); //copy receive data at front 5 byte
 8001098:	2205      	movs	r2, #5
 800109a:	4917      	ldr	r1, [pc, #92]	; (80010f8 <Connect_Rep_Check+0x78>)
 800109c:	4815      	ldr	r0, [pc, #84]	; (80010f4 <Connect_Rep_Check+0x74>)
 800109e:	f004 fa6d 	bl	800557c <strncpy>
	char ConSucceed[] = "+MTU:";
 80010a2:	4a16      	ldr	r2, [pc, #88]	; (80010fc <Connect_Rep_Check+0x7c>)
 80010a4:	463b      	mov	r3, r7
 80010a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010aa:	6018      	str	r0, [r3, #0]
 80010ac:	3304      	adds	r3, #4
 80010ae:	8019      	strh	r1, [r3, #0]
	if(strcmp( USARTBLE.ConnCheck, ConSucceed ) == 0)
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	480f      	ldr	r0, [pc, #60]	; (80010f4 <Connect_Rep_Check+0x74>)
 80010b6:	f7ff f88b 	bl	80001d0 <strcmp>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d104      	bne.n	80010ca <Connect_Rep_Check+0x4a>
	{
		USARTBLE.Status = WaitConnectACK;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <Connect_Rep_Check+0x80>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 80010c8:	e003      	b.n	80010d2 <Connect_Rep_Check+0x52>
	}
	else
	{
		USARTBLE.Status = WaitConnecting;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <Connect_Rep_Check+0x80>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	}
	memset( USARTBLE.RevData, 0, strlen(USARTBLE.RevData) ); //clear Receive data
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <Connect_Rep_Check+0x78>)
 80010d4:	f7ff f886 	bl	80001e4 <strlen>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	2100      	movs	r1, #0
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <Connect_Rep_Check+0x78>)
 80010e0:	f003 fdba 	bl	8004c58 <memset>
	USARTBLE.Revflag = 0;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <Connect_Rep_Check+0x80>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	705a      	strb	r2, [r3, #1]
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200002ba 	.word	0x200002ba
 80010f8:	200002a2 	.word	0x200002a2
 80010fc:	080079d0 	.word	0x080079d0
 8001100:	20000240 	.word	0x20000240

08001104 <Connect_ACK_Check>:
void Connect_ACK_Check(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	memset(USARTBLE.ConnCheck, 0, strlen(USARTBLE.ConnCheck) ); //clear connect response string
 800110a:	481c      	ldr	r0, [pc, #112]	; (800117c <Connect_ACK_Check+0x78>)
 800110c:	f7ff f86a 	bl	80001e4 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	2100      	movs	r1, #0
 8001116:	4819      	ldr	r0, [pc, #100]	; (800117c <Connect_ACK_Check+0x78>)
 8001118:	f003 fd9e 	bl	8004c58 <memset>
	strncpy(USARTBLE.ConnCheck, USARTBLE.RevData, 6); //copy receive data at front 5 byte
 800111c:	2206      	movs	r2, #6
 800111e:	4918      	ldr	r1, [pc, #96]	; (8001180 <Connect_ACK_Check+0x7c>)
 8001120:	4816      	ldr	r0, [pc, #88]	; (800117c <Connect_ACK_Check+0x78>)
 8001122:	f004 fa2b 	bl	800557c <strncpy>
	char ConSucceed[] = "ConACK";
 8001126:	4a17      	ldr	r2, [pc, #92]	; (8001184 <Connect_ACK_Check+0x80>)
 8001128:	463b      	mov	r3, r7
 800112a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112e:	6018      	str	r0, [r3, #0]
 8001130:	3304      	adds	r3, #4
 8001132:	8019      	strh	r1, [r3, #0]
 8001134:	3302      	adds	r3, #2
 8001136:	0c0a      	lsrs	r2, r1, #16
 8001138:	701a      	strb	r2, [r3, #0]
	if(strcmp( USARTBLE.ConnCheck, ConSucceed ) == 0)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	480f      	ldr	r0, [pc, #60]	; (800117c <Connect_ACK_Check+0x78>)
 8001140:	f7ff f846 	bl	80001d0 <strcmp>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d104      	bne.n	8001154 <Connect_ACK_Check+0x50>
	{
		USARTBLE.Status = SendData;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <Connect_ACK_Check+0x84>)
 800114c:	2202      	movs	r2, #2
 800114e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8001152:	e003      	b.n	800115c <Connect_ACK_Check+0x58>
	}
	else
	{
		USARTBLE.Status = WaitConnecting;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <Connect_ACK_Check+0x84>)
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	}
	memset( USARTBLE.RevData, 0, strlen(USARTBLE.RevData) ); //clear Receive data
 800115c:	4808      	ldr	r0, [pc, #32]	; (8001180 <Connect_ACK_Check+0x7c>)
 800115e:	f7ff f841 	bl	80001e4 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	2100      	movs	r1, #0
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <Connect_ACK_Check+0x7c>)
 800116a:	f003 fd75 	bl	8004c58 <memset>
	USARTBLE.Revflag = 0;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <Connect_ACK_Check+0x84>)
 8001170:	2200      	movs	r2, #0
 8001172:	705a      	strb	r2, [r3, #1]
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200002ba 	.word	0x200002ba
 8001180:	200002a2 	.word	0x200002a2
 8001184:	080079d8 	.word	0x080079d8
 8001188:	20000240 	.word	0x20000240

0800118c <Master_ACK_Check>:

void Master_ACK_Check(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
	Rev_SecTimeout_count=0; //reset receive timeout
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <Master_ACK_Check+0x80>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
	memset(USARTBLE.ACKCheck, 0, strlen(USARTBLE.ACKCheck) ); //clear connect response string
 8001198:	481d      	ldr	r0, [pc, #116]	; (8001210 <Master_ACK_Check+0x84>)
 800119a:	f7ff f823 	bl	80001e4 <strlen>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	2100      	movs	r1, #0
 80011a4:	481a      	ldr	r0, [pc, #104]	; (8001210 <Master_ACK_Check+0x84>)
 80011a6:	f003 fd57 	bl	8004c58 <memset>
	strncpy(USARTBLE.ACKCheck, USARTBLE.RevData, 6); //copy receive data at front 5 byte
 80011aa:	2206      	movs	r2, #6
 80011ac:	4919      	ldr	r1, [pc, #100]	; (8001214 <Master_ACK_Check+0x88>)
 80011ae:	4818      	ldr	r0, [pc, #96]	; (8001210 <Master_ACK_Check+0x84>)
 80011b0:	f004 f9e4 	bl	800557c <strncpy>
	char MasterACK[] = "RevACK";
 80011b4:	4a18      	ldr	r2, [pc, #96]	; (8001218 <Master_ACK_Check+0x8c>)
 80011b6:	463b      	mov	r3, r7
 80011b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011bc:	6018      	str	r0, [r3, #0]
 80011be:	3304      	adds	r3, #4
 80011c0:	8019      	strh	r1, [r3, #0]
 80011c2:	3302      	adds	r3, #2
 80011c4:	0c0a      	lsrs	r2, r1, #16
 80011c6:	701a      	strb	r2, [r3, #0]
	if(strcmp( USARTBLE.ACKCheck, MasterACK ) == 0)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	4810      	ldr	r0, [pc, #64]	; (8001210 <Master_ACK_Check+0x84>)
 80011ce:	f7fe ffff 	bl	80001d0 <strcmp>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d104      	bne.n	80011e2 <Master_ACK_Check+0x56>
	{
		USARTBLE.Status = SendData;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <Master_ACK_Check+0x90>)
 80011da:	2202      	movs	r2, #2
 80011dc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 80011e0:	e003      	b.n	80011ea <Master_ACK_Check+0x5e>
	}
	else
	{
		USARTBLE.Status = WaitConnecting;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <Master_ACK_Check+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	}
	memset( USARTBLE.RevData, 0, strlen(USARTBLE.RevData) ); //clear Receive data
 80011ea:	480a      	ldr	r0, [pc, #40]	; (8001214 <Master_ACK_Check+0x88>)
 80011ec:	f7fe fffa 	bl	80001e4 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <Master_ACK_Check+0x88>)
 80011f8:	f003 fd2e 	bl	8004c58 <memset>
	USARTBLE.Revflag = 0;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <Master_ACK_Check+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000220 	.word	0x20000220
 8001210:	200002bf 	.word	0x200002bf
 8001214:	200002a2 	.word	0x200002a2
 8001218:	080079e0 	.word	0x080079e0
 800121c:	20000240 	.word	0x20000240

08001220 <Transmit_ADC_data>:

void Transmit_ADC_data(UART_HandleTypeDef *huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    // ADC data is ready, start transmit data , flash Green LED
    HAL_GPIO_WritePin(GLED_Port, GLED , GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122e:	482e      	ldr	r0, [pc, #184]	; (80012e8 <Transmit_ADC_data+0xc8>)
 8001230:	f001 fd4e 	bl	8002cd0 <HAL_GPIO_WritePin>
    HAL_Delay(0.1);
 8001234:	2000      	movs	r0, #0
 8001236:	f000 fddb 	bl	8001df0 <HAL_Delay>
    HAL_GPIO_WritePin(GLED_Port, GLED , GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001240:	4829      	ldr	r0, [pc, #164]	; (80012e8 <Transmit_ADC_data+0xc8>)
 8001242:	f001 fd45 	bl	8002cd0 <HAL_GPIO_WritePin>
//    else if(ADC_1.Vol[0]>9 && ADC_1.Vol[0]<100)
//    	sprintf(USARTBLE.buffer,"00%d\r\n",ADC_1.Vol[0]);
//    else if(ADC_1.Vol[0]<10)
//        sprintf(USARTBLE.buffer,"000%d\r\n",ADC_1.Vol[0]);
//    else
    	sprintf(USARTBLE.buffer,"%d, %d\r\n",ADC_1.Vol[0], ADC_1.Vol[1]);
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <Transmit_ADC_data+0xcc>)
 8001248:	8a1b      	ldrh	r3, [r3, #16]
 800124a:	461a      	mov	r2, r3
 800124c:	4b27      	ldr	r3, [pc, #156]	; (80012ec <Transmit_ADC_data+0xcc>)
 800124e:	8a5b      	ldrh	r3, [r3, #18]
 8001250:	4927      	ldr	r1, [pc, #156]	; (80012f0 <Transmit_ADC_data+0xd0>)
 8001252:	4828      	ldr	r0, [pc, #160]	; (80012f4 <Transmit_ADC_data+0xd4>)
 8001254:	f004 f972 	bl	800553c <siprintf>
    
    USARTBLE.bufferSize = min(Uart_Biffer_Size, strlen(USARTBLE.buffer));
 8001258:	4826      	ldr	r0, [pc, #152]	; (80012f4 <Transmit_ADC_data+0xd4>)
 800125a:	f7fe ffc3 	bl	80001e4 <strlen>
 800125e:	4603      	mov	r3, r0
 8001260:	2b41      	cmp	r3, #65	; 0x41
 8001262:	d804      	bhi.n	800126e <Transmit_ADC_data+0x4e>
 8001264:	4823      	ldr	r0, [pc, #140]	; (80012f4 <Transmit_ADC_data+0xd4>)
 8001266:	f7fe ffbd 	bl	80001e4 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	e000      	b.n	8001270 <Transmit_ADC_data+0x50>
 800126e:	2341      	movs	r3, #65	; 0x41
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <Transmit_ADC_data+0xd8>)
 8001272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    USARTBLE.sendTimeout = 50 ;
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <Transmit_ADC_data+0xd8>)
 8001278:	2232      	movs	r2, #50	; 0x32
 800127a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    * @param huart   UART handle.
    * @param pData   Pointer to data buffer.
    * @param Size    Amount of data to be received.
    * @param Timeout Timeout duration.(ms)
    */
    while(HAL_UART_Transmit(huart, &USARTBLE.buffer, USARTBLE.bufferSize, USARTBLE.sendTimeout )!=HAL_OK);
 800127e:	bf00      	nop
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <Transmit_ADC_data+0xd8>)
 8001282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <Transmit_ADC_data+0xd8>)
 800128a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128e:	4919      	ldr	r1, [pc, #100]	; (80012f4 <Transmit_ADC_data+0xd4>)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f002 fe9c 	bl	8003fce <HAL_UART_Transmit>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f1      	bne.n	8001280 <Transmit_ADC_data+0x60>
    memset( USARTBLE.buffer, 0, strlen(USARTBLE.buffer) ); //clear send data
 800129c:	4815      	ldr	r0, [pc, #84]	; (80012f4 <Transmit_ADC_data+0xd4>)
 800129e:	f7fe ffa1 	bl	80001e4 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	2100      	movs	r1, #0
 80012a8:	4812      	ldr	r0, [pc, #72]	; (80012f4 <Transmit_ADC_data+0xd4>)
 80012aa:	f003 fcd5 	bl	8004c58 <memset>
    //transmit LED status
    HAL_GPIO_WritePin(RLED_Port, RLED , GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <Transmit_ADC_data+0xc8>)
 80012b6:	f001 fd0b 	bl	8002cd0 <HAL_GPIO_WritePin>
    HAL_Delay(0.1);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 fd98 	bl	8001df0 <HAL_Delay>
    HAL_GPIO_WritePin(RLED_Port, RLED , GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c6:	4808      	ldr	r0, [pc, #32]	; (80012e8 <Transmit_ADC_data+0xc8>)
 80012c8:	f001 fd02 	bl	8002cd0 <HAL_GPIO_WritePin>
    
    USARTBLE.sendflag = 0;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <Transmit_ADC_data+0xd8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
    Rev_SecTimeout_count++;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <Transmit_ADC_data+0xdc>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <Transmit_ADC_data+0xdc>)
 80012dc:	701a      	strb	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	20000208 	.word	0x20000208
 80012f0:	080079e8 	.word	0x080079e8
 80012f4:	20000260 	.word	0x20000260
 80012f8:	20000240 	.word	0x20000240
 80012fc:	20000220 	.word	0x20000220

08001300 <BLE_Status_Init>:

void BLE_Status_Init(UART_HandleTypeDef *huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	//init BLE Status
	USARTBLE.Status = WaitConnecting;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <BLE_Status_Init+0x2c>)
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

  	//initial BLE receive interrupt flag
  	while(HAL_UART_Receive_IT(huart ,&USARTBLE.Rbuffer,1)!=HAL_OK);
 8001310:	bf00      	nop
 8001312:	2201      	movs	r2, #1
 8001314:	4906      	ldr	r1, [pc, #24]	; (8001330 <BLE_Status_Init+0x30>)
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f002 feeb 	bl	80040f2 <HAL_UART_Receive_IT>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f7      	bne.n	8001312 <BLE_Status_Init+0x12>
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000240 	.word	0x20000240
 8001330:	200002a1 	.word	0x200002a1

08001334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001338:	f000 fce8 	bl	8001d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800133c:	f000 f824 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001340:	f000 f988 	bl	8001654 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001344:	f000 f88c 	bl	8001460 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001348:	f000 f908 	bl	800155c <MX_TIM2_Init>
  MX_USART6_UART_Init();
 800134c:	f000 f958 	bl	8001600 <MX_USART6_UART_Init>
  MX_IWDG_Init();
 8001350:	f000 f8ea 	bl	8001528 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  //TODO:--Wayne20210618
  HAL_TIM_Base_Start_IT(&htim2);//UART TIM
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <main+0x44>)
 8001356:	f002 f9bf 	bl	80036d8 <HAL_TIM_Base_Start_IT>
  BLE_Status_Init(&huart6);
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <main+0x48>)
 800135c:	f7ff ffd0 	bl	8001300 <BLE_Status_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC1_Conv(&hadc1);
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <main+0x4c>)
 8001362:	f7ff fdad 	bl	8000ec0 <ADC1_Conv>
	  BLE_USART(&huart6, &hadc1);
 8001366:	4906      	ldr	r1, [pc, #24]	; (8001380 <main+0x4c>)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <main+0x48>)
 800136a:	f7ff fe31 	bl	8000fd0 <BLE_USART>
	  //IWDG_Refresh, reload:5sec
	  HAL_IWDG_Refresh(&hiwdg);
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <main+0x50>)
 8001370:	f001 fd09 	bl	8002d86 <HAL_IWDG_Refresh>
	  ADC1_Conv(&hadc1);
 8001374:	e7f4      	b.n	8001360 <main+0x2c>
 8001376:	bf00      	nop
 8001378:	20000378 	.word	0x20000378
 800137c:	20000334 	.word	0x20000334
 8001380:	200002ec 	.word	0x200002ec
 8001384:	200002e0 	.word	0x200002e0

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	; 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2230      	movs	r2, #48	; 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fc5e 	bl	8004c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <SystemClock_Config+0xd0>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a28      	ldr	r2, [pc, #160]	; (8001458 <SystemClock_Config+0xd0>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <SystemClock_Config+0xd0>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <SystemClock_Config+0xd4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a22      	ldr	r2, [pc, #136]	; (800145c <SystemClock_Config+0xd4>)
 80013d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <SystemClock_Config+0xd4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013e4:	230a      	movs	r3, #10
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ec:	2310      	movs	r3, #16
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013f0:	2301      	movs	r3, #1
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f4:	2302      	movs	r3, #2
 80013f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013fc:	2308      	movs	r3, #8
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001400:	23a8      	movs	r3, #168	; 0xa8
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001408:	2304      	movs	r3, #4
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4618      	mov	r0, r3
 8001412:	f001 fcc9 	bl	8002da8 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800141c:	f000 fa2e 	bl	800187c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001420:	230f      	movs	r3, #15
 8001422:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001424:	2302      	movs	r3, #2
 8001426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800142c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001430:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2105      	movs	r1, #5
 800143e:	4618      	mov	r0, r3
 8001440:	f001 ff2a 	bl	8003298 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800144a:	f000 fa17 	bl	800187c <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3750      	adds	r7, #80	; 0x50
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000

08001460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001466:	463b      	mov	r3, r7
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <MX_ADC1_Init+0xbc>)
 8001474:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <MX_ADC1_Init+0xc0>)
 8001476:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001478:	4b28      	ldr	r3, [pc, #160]	; (800151c <MX_ADC1_Init+0xbc>)
 800147a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800147e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001480:	4b26      	ldr	r3, [pc, #152]	; (800151c <MX_ADC1_Init+0xbc>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <MX_ADC1_Init+0xbc>)
 8001488:	2201      	movs	r2, #1
 800148a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <MX_ADC1_Init+0xbc>)
 800148e:	2200      	movs	r2, #0
 8001490:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_ADC1_Init+0xbc>)
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <MX_ADC1_Init+0xbc>)
 800149c:	2201      	movs	r2, #1
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <MX_ADC1_Init+0xbc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_ADC1_Init+0xbc>)
 80014a8:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <MX_ADC1_Init+0xc4>)
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <MX_ADC1_Init+0xbc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_ADC1_Init+0xbc>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <MX_ADC1_Init+0xbc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_ADC1_Init+0xbc>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c6:	4815      	ldr	r0, [pc, #84]	; (800151c <MX_ADC1_Init+0xbc>)
 80014c8:	f000 fcb6 	bl	8001e38 <HAL_ADC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80014d2:	f000 f9d3 	bl	800187c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014d6:	230a      	movs	r3, #10
 80014d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014da:	2301      	movs	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	4619      	mov	r1, r3
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_ADC1_Init+0xbc>)
 80014e8:	f000 fe88 	bl	80021fc <HAL_ADC_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80014f2:	f000 f9c3 	bl	800187c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014f6:	230b      	movs	r3, #11
 80014f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_ADC1_Init+0xbc>)
 8001504:	f000 fe7a 	bl	80021fc <HAL_ADC_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800150e:	f000 f9b5 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002ec 	.word	0x200002ec
 8001520:	40012000 	.word	0x40012000
 8001524:	0f000001 	.word	0x0f000001

08001528 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_IWDG_Init+0x2c>)
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <MX_IWDG_Init+0x30>)
 8001530:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_IWDG_Init+0x2c>)
 8001534:	2204      	movs	r2, #4
 8001536:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_IWDG_Init+0x2c>)
 800153a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800153e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <MX_IWDG_Init+0x2c>)
 8001542:	f001 fbde 	bl	8002d02 <HAL_IWDG_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800154c:	f000 f996 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200002e0 	.word	0x200002e0
 8001558:	40003000 	.word	0x40003000

0800155c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001578:	4b20      	ldr	r3, [pc, #128]	; (80015fc <MX_TIM2_Init+0xa0>)
 800157a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_TIM2_Init+0xa0>)
 8001582:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_TIM2_Init+0xa0>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <MX_TIM2_Init+0xa0>)
 8001590:	f242 720f 	movw	r2, #9999	; 0x270f
 8001594:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_TIM2_Init+0xa0>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <MX_TIM2_Init+0xa0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <MX_TIM2_Init+0xa0>)
 80015a4:	f002 f848 	bl	8003638 <HAL_TIM_Base_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015ae:	f000 f965 	bl	800187c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4619      	mov	r1, r3
 80015be:	480f      	ldr	r0, [pc, #60]	; (80015fc <MX_TIM2_Init+0xa0>)
 80015c0:	f002 fa02 	bl	80039c8 <HAL_TIM_ConfigClockSource>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015ca:	f000 f957 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	4619      	mov	r1, r3
 80015da:	4808      	ldr	r0, [pc, #32]	; (80015fc <MX_TIM2_Init+0xa0>)
 80015dc:	f002 fc1a 	bl	8003e14 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015e6:	f000 f949 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);//clear timer flag to reload count
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <MX_TIM2_Init+0xa0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f06f 0201 	mvn.w	r2, #1
 80015f2:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000378 	.word	0x20000378

08001600 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <MX_USART6_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_USART6_UART_Init+0x4c>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART6_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART6_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001638:	f002 fc7c 	bl	8003f34 <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f000 f91b 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000334 	.word	0x20000334
 8001650:	40011400 	.word	0x40011400

08001654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b4e      	ldr	r3, [pc, #312]	; (80017a8 <MX_GPIO_Init+0x154>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a4d      	ldr	r2, [pc, #308]	; (80017a8 <MX_GPIO_Init+0x154>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b4b      	ldr	r3, [pc, #300]	; (80017a8 <MX_GPIO_Init+0x154>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <MX_GPIO_Init+0x154>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a46      	ldr	r2, [pc, #280]	; (80017a8 <MX_GPIO_Init+0x154>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <MX_GPIO_Init+0x154>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <MX_GPIO_Init+0x154>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a3f      	ldr	r2, [pc, #252]	; (80017a8 <MX_GPIO_Init+0x154>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <MX_GPIO_Init+0x154>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <MX_GPIO_Init+0x154>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a38      	ldr	r2, [pc, #224]	; (80017a8 <MX_GPIO_Init+0x154>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <MX_GPIO_Init+0x154>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	213c      	movs	r1, #60	; 0x3c
 80016de:	4833      	ldr	r0, [pc, #204]	; (80017ac <MX_GPIO_Init+0x158>)
 80016e0:	f001 faf6 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016e4:	2200      	movs	r2, #0
 80016e6:	21ff      	movs	r1, #255	; 0xff
 80016e8:	4831      	ldr	r0, [pc, #196]	; (80017b0 <MX_GPIO_Init+0x15c>)
 80016ea:	f001 faf1 	bl	8002cd0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2103      	movs	r1, #3
 80016f2:	4830      	ldr	r0, [pc, #192]	; (80017b4 <MX_GPIO_Init+0x160>)
 80016f4:	f001 faec 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80016fe:	482e      	ldr	r0, [pc, #184]	; (80017b8 <MX_GPIO_Init+0x164>)
 8001700:	f001 fae6 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170a:	4828      	ldr	r0, [pc, #160]	; (80017ac <MX_GPIO_Init+0x158>)
 800170c:	f001 fae0 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001710:	233c      	movs	r3, #60	; 0x3c
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001718:	2302      	movs	r3, #2
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4821      	ldr	r0, [pc, #132]	; (80017ac <MX_GPIO_Init+0x158>)
 8001728:	f001 f936 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800172c:	23ff      	movs	r3, #255	; 0xff
 800172e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001734:	2302      	movs	r3, #2
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	481b      	ldr	r0, [pc, #108]	; (80017b0 <MX_GPIO_Init+0x15c>)
 8001744:	f001 f928 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001748:	2303      	movs	r3, #3
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001750:	2302      	movs	r3, #2
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4815      	ldr	r0, [pc, #84]	; (80017b4 <MX_GPIO_Init+0x160>)
 8001760:	f001 f91a 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001764:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	480e      	ldr	r0, [pc, #56]	; (80017b8 <MX_GPIO_Init+0x164>)
 800177e:	f001 f90b 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178c:	2301      	movs	r3, #1
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_GPIO_Init+0x158>)
 800179c:	f001 f8fc 	bl	8002998 <HAL_GPIO_Init>

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40020c00 	.word	0x40020c00

080017bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//--Wayne20191211
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	 if (htim->Instance == htim2.Instance)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d102      	bne.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	 {
		 USARTBLE.sendflag = 1;
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
	 }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000378 	.word	0x20000378
 80017e8:	20000240 	.word	0x20000240

080017ec <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart6);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
  USARTBLE.RevData[USARTBLE.RxCount++]= USARTBLE.Rbuffer;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_UART_RxCpltCallback+0x80>)
 80017f6:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	b2d1      	uxtb	r1, r2
 80017fe:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_UART_RxCpltCallback+0x80>)
 8001800:	f882 1085 	strb.w	r1, [r2, #133]	; 0x85
 8001804:	4619      	mov	r1, r3
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_UART_RxCpltCallback+0x80>)
 8001808:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_UART_RxCpltCallback+0x80>)
 800180e:	440b      	add	r3, r1
 8001810:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  if(USARTBLE.Rbuffer==0x0A)//when receive 0x0a("\n" Line feeds string),it is a effective command, Send a receive flag.
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_UART_RxCpltCallback+0x80>)
 8001816:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800181a:	2b0a      	cmp	r3, #10
 800181c:	d106      	bne.n	800182c <HAL_UART_RxCpltCallback+0x40>
  	{
	  USARTBLE.Revflag = 1;
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_UART_RxCpltCallback+0x80>)
 8001820:	2201      	movs	r2, #1
 8001822:	705a      	strb	r2, [r3, #1]
	  USARTBLE.RxCount=0;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_UART_RxCpltCallback+0x80>)
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  	}
  	if(USARTBLE.RxCount>=24)//no  "\n" Line feeds string full over to 24 byte, clear data
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_UART_RxCpltCallback+0x80>)
 800182e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001832:	2b17      	cmp	r3, #23
 8001834:	d90c      	bls.n	8001850 <HAL_UART_RxCpltCallback+0x64>
  	{
  		USARTBLE.RxCount=0;
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_UART_RxCpltCallback+0x80>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  		memset( USARTBLE.RevData, 0, strlen(USARTBLE.RevData) ); //clear Receive data
 800183e:	480c      	ldr	r0, [pc, #48]	; (8001870 <HAL_UART_RxCpltCallback+0x84>)
 8001840:	f7fe fcd0 	bl	80001e4 <strlen>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	4809      	ldr	r0, [pc, #36]	; (8001870 <HAL_UART_RxCpltCallback+0x84>)
 800184c:	f003 fa04 	bl	8004c58 <memset>
  	}

  while(HAL_UART_Receive_IT(&huart6,&USARTBLE.Rbuffer,1)==HAL_OK);
 8001850:	bf00      	nop
 8001852:	2201      	movs	r2, #1
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <HAL_UART_RxCpltCallback+0x88>)
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <HAL_UART_RxCpltCallback+0x8c>)
 8001858:	f002 fc4b 	bl	80040f2 <HAL_UART_Receive_IT>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f7      	beq.n	8001852 <HAL_UART_RxCpltCallback+0x66>
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000240 	.word	0x20000240
 8001870:	200002a2 	.word	0x200002a2
 8001874:	200002a1 	.word	0x200002a1
 8001878:	20000334 	.word	0x20000334

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_MspInit+0x4c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_MspInit+0x4c>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_ADC_MspInit+0x7c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d127      	bne.n	800194e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_ADC_MspInit+0x80>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <HAL_ADC_MspInit+0x80>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_ADC_MspInit+0x80>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_ADC_MspInit+0x80>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_ADC_MspInit+0x80>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_ADC_MspInit+0x80>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001936:	2303      	movs	r3, #3
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_ADC_MspInit+0x84>)
 800194a:	f001 f825 	bl	8002998 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40012000 	.word	0x40012000
 800195c:	40023800 	.word	0x40023800
 8001960:	40020800 	.word	0x40020800

08001964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001974:	d115      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	201c      	movs	r0, #28
 8001998:	f000 ff35 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800199c:	201c      	movs	r0, #28
 800199e:	f000 ff4e 	bl	800283e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_UART_MspInit+0x94>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d133      	bne.n	8001a3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_UART_MspInit+0x98>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_UART_MspInit+0x98>)
 80019dc:	f043 0320 	orr.w	r3, r3, #32
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_UART_MspInit+0x98>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_UART_MspInit+0x98>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_UART_MspInit+0x98>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_UART_MspInit+0x98>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a0a:	23c0      	movs	r3, #192	; 0xc0
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4809      	ldr	r0, [pc, #36]	; (8001a4c <HAL_UART_MspInit+0x9c>)
 8001a26:	f000 ffb7 	bl	8002998 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2047      	movs	r0, #71	; 0x47
 8001a30:	f000 fee9 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a34:	2047      	movs	r0, #71	; 0x47
 8001a36:	f000 ff02 	bl	800283e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	; 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40011400 	.word	0x40011400
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020800 	.word	0x40020800

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f984 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <TIM2_IRQHandler+0x10>)
 8001ab2:	f001 fe81 	bl	80037b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000378 	.word	0x20000378

08001ac0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <USART6_IRQHandler+0x10>)
 8001ac6:	f002 fb45 	bl	8004154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000334 	.word	0x20000334

08001ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
	return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_kill>:

int _kill(int pid, int sig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aee:	f003 f889 	bl	8004c04 <__errno>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2216      	movs	r2, #22
 8001af6:	601a      	str	r2, [r3, #0]
	return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_exit>:

void _exit (int status)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ffe7 	bl	8001ae4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b16:	e7fe      	b.n	8001b16 <_exit+0x12>

08001b18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e00a      	b.n	8001b40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b2a:	f3af 8000 	nop.w
 8001b2e:	4601      	mov	r1, r0
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60ba      	str	r2, [r7, #8]
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf0      	blt.n	8001b2a <_read+0x12>
	}

return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e009      	b.n	8001b78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60ba      	str	r2, [r7, #8]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbf1      	blt.n	8001b64 <_write+0x12>
	}
	return len;
 8001b80:	687b      	ldr	r3, [r7, #4]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_close>:

int _close(int file)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
	return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <_isatty>:

int _isatty(int file)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x50>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x16>
		heap_end = &end;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <_sbrk+0x50>)
 8001c06:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <_sbrk+0x54>)
 8001c08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <_sbrk+0x50>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <_sbrk+0x50>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	466a      	mov	r2, sp
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d907      	bls.n	8001c2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c1e:	f002 fff1 	bl	8004c04 <__errno>
 8001c22:	4603      	mov	r3, r0
 8001c24:	220c      	movs	r2, #12
 8001c26:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	e006      	b.n	8001c3c <_sbrk+0x48>
	}

	heap_end += incr;
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <_sbrk+0x50>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <_sbrk+0x50>)
 8001c38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200001fc 	.word	0x200001fc
 8001c48:	200003d8 	.word	0x200003d8

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <SystemInit+0x60>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a15      	ldr	r2, [pc, #84]	; (8001cac <SystemInit+0x60>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <SystemInit+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <SystemInit+0x64>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <SystemInit+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <SystemInit+0x64>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <SystemInit+0x64>)
 8001c78:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <SystemInit+0x64>)
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <SystemInit+0x68>)
 8001c86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <SystemInit+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <SystemInit+0x64>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <SystemInit+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SystemInit+0x60>)
 8001c9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca0:	609a      	str	r2, [r3, #8]
#endif
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	24003010 	.word	0x24003010

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cbe:	e003      	b.n	8001cc8 <LoopCopyDataInit>

08001cc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cc6:	3104      	adds	r1, #4

08001cc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ccc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd0:	d3f6      	bcc.n	8001cc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cd4:	e002      	b.n	8001cdc <LoopFillZerobss>

08001cd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cd8:	f842 3b04 	str.w	r3, [r2], #4

08001cdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce0:	d3f9      	bcc.n	8001cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff ffb3 	bl	8001c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f002 ff93 	bl	8004c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff fb23 	bl	8001334 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cf4:	08007dfc 	.word	0x08007dfc
  ldr  r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cfc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001d00:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001d04:	200003d4 	.word	0x200003d4

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 fd5b 	bl	80027f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fda4 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fd73 	bl	800285a <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 fd3b 	bl	8002806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	200003c0 	.word	0x200003c0

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200003c0 	.word	0x200003c0

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000008 	.word	0x20000008

08001e38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e033      	b.n	8001eb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fd40 	bl	80018dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d118      	bne.n	8001ea8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e7e:	f023 0302 	bic.w	r3, r3, #2
 8001e82:	f043 0202 	orr.w	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fae4 	bl	8002458 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea6:	e001      	b.n	8001eac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Start+0x1a>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0b2      	b.n	8002040 <HAL_ADC_Start+0x180>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d018      	beq.n	8001f22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f00:	4b52      	ldr	r3, [pc, #328]	; (800204c <HAL_ADC_Start+0x18c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_ADC_Start+0x190>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9a      	lsrs	r2, r3, #18
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f14:	e002      	b.n	8001f1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f9      	bne.n	8001f16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d17a      	bne.n	8002026 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6e:	d106      	bne.n	8001f7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	f023 0206 	bic.w	r2, r3, #6
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f7c:	e002      	b.n	8001f84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_ADC_Start+0x194>)
 8001f8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d12a      	bne.n	8001ffc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <HAL_ADC_Start+0x198>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d015      	beq.n	8001fdc <HAL_ADC_Start+0x11c>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a29      	ldr	r2, [pc, #164]	; (800205c <HAL_ADC_Start+0x19c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d105      	bne.n	8001fc6 <HAL_ADC_Start+0x106>
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_ADC_Start+0x194>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_ADC_Start+0x1a0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d136      	bne.n	800203e <HAL_ADC_Start+0x17e>
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_ADC_Start+0x194>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d130      	bne.n	800203e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d129      	bne.n	800203e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	e020      	b.n	800203e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a15      	ldr	r2, [pc, #84]	; (8002058 <HAL_ADC_Start+0x198>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d11b      	bne.n	800203e <HAL_ADC_Start+0x17e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d114      	bne.n	800203e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e00b      	b.n	800203e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	20000000 	.word	0x20000000
 8002050:	431bde83 	.word	0x431bde83
 8002054:	40012300 	.word	0x40012300
 8002058:	40012000 	.word	0x40012000
 800205c:	40012100 	.word	0x40012100
 8002060:	40012200 	.word	0x40012200

08002064 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_ADC_Stop+0x16>
 8002076:	2302      	movs	r3, #2
 8002078:	e021      	b.n	80020be <HAL_ADC_Stop+0x5a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e6:	d113      	bne.n	8002110 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f6:	d10b      	bne.n	8002110 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e063      	b.n	80021d8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002110:	f7ff fe62 	bl	8001dd8 <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002116:	e021      	b.n	800215c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211e:	d01d      	beq.n	800215c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_ADC_PollForConversion+0x6c>
 8002126:	f7ff fe57 	bl	8001dd8 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d212      	bcs.n	800215c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b02      	cmp	r3, #2
 8002142:	d00b      	beq.n	800215c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f043 0204 	orr.w	r2, r3, #4
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e03d      	b.n	80021d8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b02      	cmp	r3, #2
 8002168:	d1d6      	bne.n	8002118 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f06f 0212 	mvn.w	r2, #18
 8002172:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d123      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002192:	2b00      	cmp	r3, #0
 8002194:	d11f      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d111      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1c>
 8002214:	2302      	movs	r3, #2
 8002216:	e105      	b.n	8002424 <HAL_ADC_ConfigChannel+0x228>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b09      	cmp	r3, #9
 8002226:	d925      	bls.n	8002274 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68d9      	ldr	r1, [r3, #12]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	3b1e      	subs	r3, #30
 800223e:	2207      	movs	r2, #7
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43da      	mvns	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	400a      	ands	r2, r1
 800224c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68d9      	ldr	r1, [r3, #12]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	4618      	mov	r0, r3
 8002260:	4603      	mov	r3, r0
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4403      	add	r3, r0
 8002266:	3b1e      	subs	r3, #30
 8002268:	409a      	lsls	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	e022      	b.n	80022ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6919      	ldr	r1, [r3, #16]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	2207      	movs	r2, #7
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	400a      	ands	r2, r1
 8002296:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6919      	ldr	r1, [r3, #16]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4403      	add	r3, r0
 80022b0:	409a      	lsls	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d824      	bhi.n	800230c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	3b05      	subs	r3, #5
 80022d4:	221f      	movs	r2, #31
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	400a      	ands	r2, r1
 80022e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	3b05      	subs	r3, #5
 80022fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	635a      	str	r2, [r3, #52]	; 0x34
 800230a:	e04c      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b0c      	cmp	r3, #12
 8002312:	d824      	bhi.n	800235e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b23      	subs	r3, #35	; 0x23
 8002326:	221f      	movs	r2, #31
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43da      	mvns	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	400a      	ands	r2, r1
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	4618      	mov	r0, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	3b23      	subs	r3, #35	; 0x23
 8002350:	fa00 f203 	lsl.w	r2, r0, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
 800235c:	e023      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	3b41      	subs	r3, #65	; 0x41
 8002370:	221f      	movs	r2, #31
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	400a      	ands	r2, r1
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	4618      	mov	r0, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3b41      	subs	r3, #65	; 0x41
 800239a:	fa00 f203 	lsl.w	r2, r0, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a6:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_ADC_ConfigChannel+0x234>)
 80023a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a21      	ldr	r2, [pc, #132]	; (8002434 <HAL_ADC_ConfigChannel+0x238>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d109      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1cc>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b12      	cmp	r3, #18
 80023ba:	d105      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_ADC_ConfigChannel+0x238>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d123      	bne.n	800241a <HAL_ADC_ConfigChannel+0x21e>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d003      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x1e6>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b11      	cmp	r3, #17
 80023e0:	d11b      	bne.n	800241a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d111      	bne.n	800241a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_ADC_ConfigChannel+0x23c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_ADC_ConfigChannel+0x240>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	0c9a      	lsrs	r2, r3, #18
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800240c:	e002      	b.n	8002414 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	3b01      	subs	r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f9      	bne.n	800240e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40012300 	.word	0x40012300
 8002434:	40012000 	.word	0x40012000
 8002438:	20000000 	.word	0x20000000
 800243c:	431bde83 	.word	0x431bde83

08002440 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002460:	4b79      	ldr	r3, [pc, #484]	; (8002648 <ADC_Init+0x1f0>)
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800248c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	021a      	lsls	r2, r3, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	4a58      	ldr	r2, [pc, #352]	; (800264c <ADC_Init+0x1f4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d022      	beq.n	8002536 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6899      	ldr	r1, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6899      	ldr	r1, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e00f      	b.n	8002556 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002554:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0202 	bic.w	r2, r2, #2
 8002564:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6899      	ldr	r1, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7e1b      	ldrb	r3, [r3, #24]
 8002570:	005a      	lsls	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01b      	beq.n	80025bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002592:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	3b01      	subs	r3, #1
 80025b0:	035a      	lsls	r2, r3, #13
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	e007      	b.n	80025cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	051a      	lsls	r2, r3, #20
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002600:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800260e:	025a      	lsls	r2, r3, #9
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	029a      	lsls	r2, r3, #10
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40012300 	.word	0x40012300
 800264c:	0f000001 	.word	0x0f000001

08002650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	60d3      	str	r3, [r2, #12]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <__NVIC_GetPriorityGrouping+0x18>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 0307 	and.w	r3, r3, #7
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0b      	blt.n	80026de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4907      	ldr	r1, [pc, #28]	; (80026ec <__NVIC_EnableIRQ+0x38>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2001      	movs	r0, #1
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	db0a      	blt.n	800271a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	490c      	ldr	r1, [pc, #48]	; (800273c <__NVIC_SetPriority+0x4c>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	440b      	add	r3, r1
 8002714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002718:	e00a      	b.n	8002730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4908      	ldr	r1, [pc, #32]	; (8002740 <__NVIC_SetPriority+0x50>)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3b04      	subs	r3, #4
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	440b      	add	r3, r1
 800272e:	761a      	strb	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f1c3 0307 	rsb	r3, r3, #7
 800275e:	2b04      	cmp	r3, #4
 8002760:	bf28      	it	cs
 8002762:	2304      	movcs	r3, #4
 8002764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3304      	adds	r3, #4
 800276a:	2b06      	cmp	r3, #6
 800276c:	d902      	bls.n	8002774 <NVIC_EncodePriority+0x30>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3b03      	subs	r3, #3
 8002772:	e000      	b.n	8002776 <NVIC_EncodePriority+0x32>
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	f04f 32ff 	mov.w	r2, #4294967295
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	401a      	ands	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800278c:	f04f 31ff 	mov.w	r1, #4294967295
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43d9      	mvns	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	4313      	orrs	r3, r2
         );
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027bc:	d301      	bcc.n	80027c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027be:	2301      	movs	r3, #1
 80027c0:	e00f      	b.n	80027e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <SysTick_Config+0x40>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ca:	210f      	movs	r1, #15
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f7ff ff8e 	bl	80026f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <SysTick_Config+0x40>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <SysTick_Config+0x40>)
 80027dc:	2207      	movs	r2, #7
 80027de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	e000e010 	.word	0xe000e010

080027f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff29 	bl	8002650 <__NVIC_SetPriorityGrouping>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002818:	f7ff ff3e 	bl	8002698 <__NVIC_GetPriorityGrouping>
 800281c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff ff8e 	bl	8002744 <NVIC_EncodePriority>
 8002828:	4602      	mov	r2, r0
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff5d 	bl	80026f0 <__NVIC_SetPriority>
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff31 	bl	80026b4 <__NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffa2 	bl	80027ac <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002880:	f7ff faaa 	bl	8001dd8 <HAL_GetTick>
 8002884:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d008      	beq.n	80028a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e052      	b.n	800294a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0216 	bic.w	r2, r2, #22
 80028b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <HAL_DMA_Abort+0x62>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0208 	bic.w	r2, r2, #8
 80028e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f4:	e013      	b.n	800291e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028f6:	f7ff fa6f 	bl	8001dd8 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b05      	cmp	r3, #5
 8002902:	d90c      	bls.n	800291e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2203      	movs	r2, #3
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e015      	b.n	800294a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1e4      	bne.n	80028f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	223f      	movs	r2, #63	; 0x3f
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d004      	beq.n	8002970 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e00c      	b.n	800298a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2205      	movs	r2, #5
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	e16b      	b.n	8002c8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b4:	2201      	movs	r2, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	f040 815a 	bne.w	8002c86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d005      	beq.n	80029ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d130      	bne.n	8002a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a20:	2201      	movs	r2, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 0201 	and.w	r2, r3, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d017      	beq.n	8002a88 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d123      	bne.n	8002adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	08da      	lsrs	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	220f      	movs	r2, #15
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	69b9      	ldr	r1, [r7, #24]
 8002ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0203 	and.w	r2, r3, #3
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80b4 	beq.w	8002c86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b60      	ldr	r3, [pc, #384]	; (8002ca4 <HAL_GPIO_Init+0x30c>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	4a5f      	ldr	r2, [pc, #380]	; (8002ca4 <HAL_GPIO_Init+0x30c>)
 8002b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_GPIO_Init+0x30c>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <HAL_GPIO_Init+0x310>)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	220f      	movs	r2, #15
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a52      	ldr	r2, [pc, #328]	; (8002cac <HAL_GPIO_Init+0x314>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d02b      	beq.n	8002bbe <HAL_GPIO_Init+0x226>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <HAL_GPIO_Init+0x318>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d025      	beq.n	8002bba <HAL_GPIO_Init+0x222>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a50      	ldr	r2, [pc, #320]	; (8002cb4 <HAL_GPIO_Init+0x31c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01f      	beq.n	8002bb6 <HAL_GPIO_Init+0x21e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4f      	ldr	r2, [pc, #316]	; (8002cb8 <HAL_GPIO_Init+0x320>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d019      	beq.n	8002bb2 <HAL_GPIO_Init+0x21a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x216>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4d      	ldr	r2, [pc, #308]	; (8002cc0 <HAL_GPIO_Init+0x328>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x212>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4c      	ldr	r2, [pc, #304]	; (8002cc4 <HAL_GPIO_Init+0x32c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x20e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	; (8002cc8 <HAL_GPIO_Init+0x330>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x20a>
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	e00e      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	e00c      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	e00a      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002baa:	2305      	movs	r3, #5
 8002bac:	e008      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002bae:	2304      	movs	r3, #4
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e004      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e002      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	f002 0203 	and.w	r2, r2, #3
 8002bc6:	0092      	lsls	r2, r2, #2
 8002bc8:	4093      	lsls	r3, r2
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd0:	4935      	ldr	r1, [pc, #212]	; (8002ca8 <HAL_GPIO_Init+0x310>)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c02:	4a32      	ldr	r2, [pc, #200]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c08:	4b30      	ldr	r3, [pc, #192]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c2c:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c80:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b0f      	cmp	r3, #15
 8002c90:	f67f ae90 	bls.w	80029b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	40020c00 	.word	0x40020c00
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40021400 	.word	0x40021400
 8002cc4:	40021800 	.word	0x40021800
 8002cc8:	40021c00 	.word	0x40021c00
 8002ccc:	40013c00 	.word	0x40013c00

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cec:	e003      	b.n	8002cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cee:	887b      	ldrh	r3, [r7, #2]
 8002cf0:	041a      	lsls	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e034      	b.n	8002d7e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f245 5255 	movw	r2, #21845	; 0x5555
 8002d26:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6852      	ldr	r2, [r2, #4]
 8002d30:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6892      	ldr	r2, [r2, #8]
 8002d3a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002d3c:	f7ff f84c 	bl	8001dd8 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d42:	e00f      	b.n	8002d64 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002d44:	f7ff f848 	bl	8001dd8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b30      	cmp	r3, #48	; 0x30
 8002d50:	d908      	bls.n	8002d64 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e00c      	b.n	8002d7e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e8      	bne.n	8002d44 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002d96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e264      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d075      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dc6:	4ba3      	ldr	r3, [pc, #652]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d00c      	beq.n	8002dec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd2:	4ba0      	ldr	r3, [pc, #640]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d112      	bne.n	8002e04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dde:	4b9d      	ldr	r3, [pc, #628]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dea:	d10b      	bne.n	8002e04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	4b99      	ldr	r3, [pc, #612]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d05b      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x108>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d157      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e23f      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0c:	d106      	bne.n	8002e1c <HAL_RCC_OscConfig+0x74>
 8002e0e:	4b91      	ldr	r3, [pc, #580]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a90      	ldr	r2, [pc, #576]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e01d      	b.n	8002e58 <HAL_RCC_OscConfig+0xb0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x98>
 8002e26:	4b8b      	ldr	r3, [pc, #556]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a8a      	ldr	r2, [pc, #552]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b88      	ldr	r3, [pc, #544]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a87      	ldr	r2, [pc, #540]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0xb0>
 8002e40:	4b84      	ldr	r3, [pc, #528]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a83      	ldr	r2, [pc, #524]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b81      	ldr	r3, [pc, #516]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a80      	ldr	r2, [pc, #512]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe ffba 	bl	8001dd8 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e68:	f7fe ffb6 	bl	8001dd8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e204      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	4b76      	ldr	r3, [pc, #472]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0xc0>
 8002e86:	e014      	b.n	8002eb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe ffa6 	bl	8001dd8 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe ffa2 	bl	8001dd8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1f0      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea2:	4b6c      	ldr	r3, [pc, #432]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0xe8>
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d063      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ebe:	4b65      	ldr	r3, [pc, #404]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eca:	4b62      	ldr	r3, [pc, #392]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d11c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed6:	4b5f      	ldr	r3, [pc, #380]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d116      	bne.n	8002f10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	4b5c      	ldr	r3, [pc, #368]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_RCC_OscConfig+0x152>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e1c4      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	4b56      	ldr	r3, [pc, #344]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4952      	ldr	r1, [pc, #328]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	e03a      	b.n	8002f86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f18:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <HAL_RCC_OscConfig+0x2b0>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fe ff5b 	bl	8001dd8 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f26:	f7fe ff57 	bl	8001dd8 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e1a5      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	4b46      	ldr	r3, [pc, #280]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b43      	ldr	r3, [pc, #268]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4940      	ldr	r1, [pc, #256]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]
 8002f58:	e015      	b.n	8002f86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5a:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <HAL_RCC_OscConfig+0x2b0>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe ff3a 	bl	8001dd8 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f68:	f7fe ff36 	bl	8001dd8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e184      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7a:	4b36      	ldr	r3, [pc, #216]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d030      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9a:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_RCC_OscConfig+0x2b4>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7fe ff1a 	bl	8001dd8 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7fe ff16 	bl	8001dd8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e164      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	4b26      	ldr	r3, [pc, #152]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x200>
 8002fc6:	e015      	b.n	8002ff4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc8:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_OscConfig+0x2b4>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7fe ff03 	bl	8001dd8 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd6:	f7fe feff 	bl	8001dd8 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e14d      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80a0 	beq.w	8003142 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_OscConfig+0x2b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d121      	bne.n	8003082 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_RCC_OscConfig+0x2b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a07      	ldr	r2, [pc, #28]	; (8003060 <HAL_RCC_OscConfig+0x2b8>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304a:	f7fe fec5 	bl	8001dd8 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	e011      	b.n	8003076 <HAL_RCC_OscConfig+0x2ce>
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	42470000 	.word	0x42470000
 800305c:	42470e80 	.word	0x42470e80
 8003060:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003064:	f7fe feb8 	bl	8001dd8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e106      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	4b85      	ldr	r3, [pc, #532]	; (800328c <HAL_RCC_OscConfig+0x4e4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d106      	bne.n	8003098 <HAL_RCC_OscConfig+0x2f0>
 800308a:	4b81      	ldr	r3, [pc, #516]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a80      	ldr	r2, [pc, #512]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
 8003096:	e01c      	b.n	80030d2 <HAL_RCC_OscConfig+0x32a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b05      	cmp	r3, #5
 800309e:	d10c      	bne.n	80030ba <HAL_RCC_OscConfig+0x312>
 80030a0:	4b7b      	ldr	r3, [pc, #492]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a7a      	ldr	r2, [pc, #488]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
 80030ac:	4b78      	ldr	r3, [pc, #480]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a77      	ldr	r2, [pc, #476]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
 80030b8:	e00b      	b.n	80030d2 <HAL_RCC_OscConfig+0x32a>
 80030ba:	4b75      	ldr	r3, [pc, #468]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a74      	ldr	r2, [pc, #464]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
 80030c6:	4b72      	ldr	r3, [pc, #456]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	4a71      	ldr	r2, [pc, #452]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030cc:	f023 0304 	bic.w	r3, r3, #4
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d015      	beq.n	8003106 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe fe7d 	bl	8001dd8 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe fe79 	bl	8001dd8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0c5      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0ee      	beq.n	80030e2 <HAL_RCC_OscConfig+0x33a>
 8003104:	e014      	b.n	8003130 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003106:	f7fe fe67 	bl	8001dd8 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	f7fe fe63 	bl	8001dd8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	; 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0af      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003124:	4b5a      	ldr	r3, [pc, #360]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ee      	bne.n	800310e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d105      	bne.n	8003142 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003136:	4b56      	ldr	r3, [pc, #344]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a55      	ldr	r2, [pc, #340]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 800313c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 809b 	beq.w	8003282 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800314c:	4b50      	ldr	r3, [pc, #320]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d05c      	beq.n	8003212 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d141      	bne.n	80031e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003160:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <HAL_RCC_OscConfig+0x4ec>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fe fe37 	bl	8001dd8 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe fe33 	bl	8001dd8 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e081      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003180:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f0      	bne.n	800316e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	019b      	lsls	r3, r3, #6
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	3b01      	subs	r3, #1
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	4937      	ldr	r1, [pc, #220]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <HAL_RCC_OscConfig+0x4ec>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fe0c 	bl	8001dd8 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe fe08 	bl	8001dd8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e056      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0x41c>
 80031e2:	e04e      	b.n	8003282 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_RCC_OscConfig+0x4ec>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fe fdf5 	bl	8001dd8 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fe fdf1 	bl	8001dd8 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e03f      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x44a>
 8003210:	e037      	b.n	8003282 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e032      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d028      	beq.n	800327e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d121      	bne.n	800327e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d11a      	bne.n	800327e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800324e:	4013      	ands	r3, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003254:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003256:	4293      	cmp	r3, r2
 8003258:	d111      	bne.n	800327e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	3b01      	subs	r3, #1
 8003268:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d107      	bne.n	800327e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40007000 	.word	0x40007000
 8003290:	40023800 	.word	0x40023800
 8003294:	42470060 	.word	0x42470060

08003298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0cc      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032ac:	4b68      	ldr	r3, [pc, #416]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d90c      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b65      	ldr	r3, [pc, #404]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b63      	ldr	r3, [pc, #396]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0b8      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d020      	beq.n	8003322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ec:	4b59      	ldr	r3, [pc, #356]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a58      	ldr	r2, [pc, #352]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003304:	4b53      	ldr	r3, [pc, #332]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a52      	ldr	r2, [pc, #328]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800330e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003310:	4b50      	ldr	r3, [pc, #320]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	494d      	ldr	r1, [pc, #308]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d044      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d119      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d003      	beq.n	8003356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003352:	2b03      	cmp	r3, #3
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003356:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e06f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e067      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003376:	4b37      	ldr	r3, [pc, #220]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f023 0203 	bic.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4934      	ldr	r1, [pc, #208]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003388:	f7fe fd26 	bl	8001dd8 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7fe fd22 	bl	8001dd8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e04f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 020c 	and.w	r2, r3, #12
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1eb      	bne.n	8003390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d20c      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b22      	ldr	r3, [pc, #136]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b20      	ldr	r3, [pc, #128]	; (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e032      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ec:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4916      	ldr	r1, [pc, #88]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340a:	4b12      	ldr	r3, [pc, #72]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	490e      	ldr	r1, [pc, #56]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800341e:	f000 f821 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8003422:	4602      	mov	r2, r0
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	490a      	ldr	r1, [pc, #40]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	4a09      	ldr	r2, [pc, #36]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fc86 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023c00 	.word	0x40023c00
 8003454:	40023800 	.word	0x40023800
 8003458:	080079f4 	.word	0x080079f4
 800345c:	20000000 	.word	0x20000000
 8003460:	20000004 	.word	0x20000004

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	b5b0      	push	{r4, r5, r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800346a:	2100      	movs	r1, #0
 800346c:	6079      	str	r1, [r7, #4]
 800346e:	2100      	movs	r1, #0
 8003470:	60f9      	str	r1, [r7, #12]
 8003472:	2100      	movs	r1, #0
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003476:	2100      	movs	r1, #0
 8003478:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800347a:	4952      	ldr	r1, [pc, #328]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800347c:	6889      	ldr	r1, [r1, #8]
 800347e:	f001 010c 	and.w	r1, r1, #12
 8003482:	2908      	cmp	r1, #8
 8003484:	d00d      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003486:	2908      	cmp	r1, #8
 8003488:	f200 8094 	bhi.w	80035b4 <HAL_RCC_GetSysClockFreq+0x150>
 800348c:	2900      	cmp	r1, #0
 800348e:	d002      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x32>
 8003490:	2904      	cmp	r1, #4
 8003492:	d003      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x38>
 8003494:	e08e      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003496:	4b4c      	ldr	r3, [pc, #304]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003498:	60bb      	str	r3, [r7, #8]
       break;
 800349a:	e08e      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800349c:	4b4b      	ldr	r3, [pc, #300]	; (80035cc <HAL_RCC_GetSysClockFreq+0x168>)
 800349e:	60bb      	str	r3, [r7, #8]
      break;
 80034a0:	e08b      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a2:	4948      	ldr	r1, [pc, #288]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80034a4:	6849      	ldr	r1, [r1, #4]
 80034a6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80034aa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ac:	4945      	ldr	r1, [pc, #276]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80034ae:	6849      	ldr	r1, [r1, #4]
 80034b0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80034b4:	2900      	cmp	r1, #0
 80034b6:	d024      	beq.n	8003502 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b8:	4942      	ldr	r1, [pc, #264]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80034ba:	6849      	ldr	r1, [r1, #4]
 80034bc:	0989      	lsrs	r1, r1, #6
 80034be:	4608      	mov	r0, r1
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80034c8:	f04f 0500 	mov.w	r5, #0
 80034cc:	ea00 0204 	and.w	r2, r0, r4
 80034d0:	ea01 0305 	and.w	r3, r1, r5
 80034d4:	493d      	ldr	r1, [pc, #244]	; (80035cc <HAL_RCC_GetSysClockFreq+0x168>)
 80034d6:	fb01 f003 	mul.w	r0, r1, r3
 80034da:	2100      	movs	r1, #0
 80034dc:	fb01 f102 	mul.w	r1, r1, r2
 80034e0:	1844      	adds	r4, r0, r1
 80034e2:	493a      	ldr	r1, [pc, #232]	; (80035cc <HAL_RCC_GetSysClockFreq+0x168>)
 80034e4:	fba2 0101 	umull	r0, r1, r2, r1
 80034e8:	1863      	adds	r3, r4, r1
 80034ea:	4619      	mov	r1, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	f7fd fb68 	bl	8000bc8 <__aeabi_uldivmod>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4613      	mov	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e04a      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003502:	4b30      	ldr	r3, [pc, #192]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	461a      	mov	r2, r3
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	ea02 0400 	and.w	r4, r2, r0
 800351a:	ea03 0501 	and.w	r5, r3, r1
 800351e:	4620      	mov	r0, r4
 8003520:	4629      	mov	r1, r5
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	014b      	lsls	r3, r1, #5
 800352c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003530:	0142      	lsls	r2, r0, #5
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	1b00      	subs	r0, r0, r4
 8003538:	eb61 0105 	sbc.w	r1, r1, r5
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	018b      	lsls	r3, r1, #6
 8003546:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800354a:	0182      	lsls	r2, r0, #6
 800354c:	1a12      	subs	r2, r2, r0
 800354e:	eb63 0301 	sbc.w	r3, r3, r1
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	00d9      	lsls	r1, r3, #3
 800355c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003560:	00d0      	lsls	r0, r2, #3
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	1912      	adds	r2, r2, r4
 8003568:	eb45 0303 	adc.w	r3, r5, r3
 800356c:	f04f 0000 	mov.w	r0, #0
 8003570:	f04f 0100 	mov.w	r1, #0
 8003574:	0299      	lsls	r1, r3, #10
 8003576:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800357a:	0290      	lsls	r0, r2, #10
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	461a      	mov	r2, r3
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	f7fd fb1c 	bl	8000bc8 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4613      	mov	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	3301      	adds	r3, #1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	60bb      	str	r3, [r7, #8]
      break;
 80035b2:	e002      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x164>)
 80035b6:	60bb      	str	r3, [r7, #8]
      break;
 80035b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ba:	68bb      	ldr	r3, [r7, #8]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bdb0      	pop	{r4, r5, r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	017d7840 	.word	0x017d7840

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035ec:	f7ff fff0 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	08007a04 	.word	0x08007a04

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003614:	f7ff ffdc 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0b5b      	lsrs	r3, r3, #13
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08007a04 	.word	0x08007a04

08003638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e041      	b.n	80036ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe f980 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f000 fa92 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d001      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e04e      	b.n	800378e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a23      	ldr	r2, [pc, #140]	; (800379c <HAL_TIM_Base_Start_IT+0xc4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d022      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x80>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d01d      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x80>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d018      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x80>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1e      	ldr	r2, [pc, #120]	; (80037a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x80>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00e      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x80>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <HAL_TIM_Base_Start_IT+0xd4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x80>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x80>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d111      	bne.n	800377c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b06      	cmp	r3, #6
 8003768:	d010      	beq.n	800378c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377a:	e007      	b.n	800378c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40010000 	.word	0x40010000
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40000800 	.word	0x40000800
 80037a8:	40000c00 	.word	0x40000c00
 80037ac:	40010400 	.word	0x40010400
 80037b0:	40014000 	.word	0x40014000
 80037b4:	40001800 	.word	0x40001800

080037b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d122      	bne.n	8003814 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d11b      	bne.n	8003814 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0202 	mvn.w	r2, #2
 80037e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f9b2 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 8003800:	e005      	b.n	800380e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9a4 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f9b5 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b04      	cmp	r3, #4
 8003820:	d122      	bne.n	8003868 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b04      	cmp	r3, #4
 800382e:	d11b      	bne.n	8003868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0204 	mvn.w	r2, #4
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f988 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f97a 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f98b 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b08      	cmp	r3, #8
 8003874:	d122      	bne.n	80038bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b08      	cmp	r3, #8
 8003882:	d11b      	bne.n	80038bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0208 	mvn.w	r2, #8
 800388c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2204      	movs	r2, #4
 8003892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f95e 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f950 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f961 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d122      	bne.n	8003910 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d11b      	bne.n	8003910 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0210 	mvn.w	r2, #16
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2208      	movs	r2, #8
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f934 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f926 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f937 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10e      	bne.n	800393c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0201 	mvn.w	r2, #1
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd ff40 	bl	80017bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b80      	cmp	r3, #128	; 0x80
 8003948:	d10e      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d107      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fadc 	bl	8003f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d107      	bne.n	8003994 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8fc 	bl	8003b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d10e      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0220 	mvn.w	r2, #32
 80039b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 faa6 	bl	8003f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0x18>
 80039dc:	2302      	movs	r3, #2
 80039de:	e0b3      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x180>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a18:	d03e      	beq.n	8003a98 <HAL_TIM_ConfigClockSource+0xd0>
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1e:	f200 8087 	bhi.w	8003b30 <HAL_TIM_ConfigClockSource+0x168>
 8003a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a26:	f000 8085 	beq.w	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	d87f      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x168>
 8003a30:	2b70      	cmp	r3, #112	; 0x70
 8003a32:	d01a      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0xa2>
 8003a34:	2b70      	cmp	r3, #112	; 0x70
 8003a36:	d87b      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x168>
 8003a38:	2b60      	cmp	r3, #96	; 0x60
 8003a3a:	d050      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x116>
 8003a3c:	2b60      	cmp	r3, #96	; 0x60
 8003a3e:	d877      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x168>
 8003a40:	2b50      	cmp	r3, #80	; 0x50
 8003a42:	d03c      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0xf6>
 8003a44:	2b50      	cmp	r3, #80	; 0x50
 8003a46:	d873      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x168>
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d058      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x136>
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d86f      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x168>
 8003a50:	2b30      	cmp	r3, #48	; 0x30
 8003a52:	d064      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x156>
 8003a54:	2b30      	cmp	r3, #48	; 0x30
 8003a56:	d86b      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x168>
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d060      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x156>
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d867      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x168>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d05c      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x156>
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d05a      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003a68:	e062      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6899      	ldr	r1, [r3, #8]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f000 f9ab 	bl	8003dd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	609a      	str	r2, [r3, #8]
      break;
 8003a96:	e04e      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6899      	ldr	r1, [r3, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f000 f994 	bl	8003dd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aba:	609a      	str	r2, [r3, #8]
      break;
 8003abc:	e03b      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 f908 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2150      	movs	r1, #80	; 0x50
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f961 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003adc:	e02b      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 f927 	bl	8003d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2160      	movs	r1, #96	; 0x60
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f951 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003afc:	e01b      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6859      	ldr	r1, [r3, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f000 f8e8 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2140      	movs	r1, #64	; 0x40
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f941 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e00b      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4619      	mov	r1, r3
 8003b28:	4610      	mov	r0, r2
 8003b2a:	f000 f938 	bl	8003d9e <TIM_ITRx_SetConfig>
        break;
 8003b2e:	e002      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a40      	ldr	r2, [pc, #256]	; (8003cb4 <TIM_Base_SetConfig+0x114>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d00f      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3d      	ldr	r2, [pc, #244]	; (8003cb8 <TIM_Base_SetConfig+0x118>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3c      	ldr	r2, [pc, #240]	; (8003cbc <TIM_Base_SetConfig+0x11c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <TIM_Base_SetConfig+0x120>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3a      	ldr	r2, [pc, #232]	; (8003cc4 <TIM_Base_SetConfig+0x124>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d108      	bne.n	8003bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <TIM_Base_SetConfig+0x114>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d027      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <TIM_Base_SetConfig+0x118>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d023      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <TIM_Base_SetConfig+0x11c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01f      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <TIM_Base_SetConfig+0x120>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a29      	ldr	r2, [pc, #164]	; (8003cc4 <TIM_Base_SetConfig+0x124>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d017      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <TIM_Base_SetConfig+0x128>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <TIM_Base_SetConfig+0x12c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <TIM_Base_SetConfig+0x130>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a25      	ldr	r2, [pc, #148]	; (8003cd4 <TIM_Base_SetConfig+0x134>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a24      	ldr	r2, [pc, #144]	; (8003cd8 <TIM_Base_SetConfig+0x138>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <TIM_Base_SetConfig+0x13c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <TIM_Base_SetConfig+0x114>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0xf8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <TIM_Base_SetConfig+0x124>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d103      	bne.n	8003ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	615a      	str	r2, [r3, #20]
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40000c00 	.word	0x40000c00
 8003cc4:	40010400 	.word	0x40010400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800
 8003cd4:	40001800 	.word	0x40001800
 8003cd8:	40001c00 	.word	0x40001c00
 8003cdc:	40002000 	.word	0x40002000

08003ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 030a 	bic.w	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f023 0210 	bic.w	r2, r3, #16
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	031b      	lsls	r3, r3, #12
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f043 0307 	orr.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	609a      	str	r2, [r3, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e05a      	b.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d022      	beq.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d01d      	beq.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d018      	beq.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a17      	ldr	r2, [pc, #92]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ebc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40010000 	.word	0x40010000
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800
 8003efc:	40000c00 	.word	0x40000c00
 8003f00:	40010400 	.word	0x40010400
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40001800 	.word	0x40001800

08003f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e03f      	b.n	8003fc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd fd28 	bl	80019b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fc7b 	bl	8004874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b08a      	sub	sp, #40	; 0x28
 8003fd2:	af02      	add	r7, sp, #8
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d17c      	bne.n	80040e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_UART_Transmit+0x2c>
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e075      	b.n	80040ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_UART_Transmit+0x3e>
 8004008:	2302      	movs	r3, #2
 800400a:	e06e      	b.n	80040ea <HAL_UART_Transmit+0x11c>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2221      	movs	r2, #33	; 0x21
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004022:	f7fd fed9 	bl	8001dd8 <HAL_GetTick>
 8004026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403c:	d108      	bne.n	8004050 <HAL_UART_Transmit+0x82>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d104      	bne.n	8004050 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	e003      	b.n	8004058 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004060:	e02a      	b.n	80040b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	2180      	movs	r1, #128	; 0x80
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fa3d 	bl	80044ec <UART_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e036      	b.n	80040ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004090:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	3302      	adds	r3, #2
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e007      	b.n	80040aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	781a      	ldrb	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3301      	adds	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1cf      	bne.n	8004062 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2140      	movs	r1, #64	; 0x40
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fa0d 	bl	80044ec <UART_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e006      	b.n	80040ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e000      	b.n	80040ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
  }
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	4613      	mov	r3, r2
 80040fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b20      	cmp	r3, #32
 800410a:	d11d      	bne.n	8004148 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_UART_Receive_IT+0x26>
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e016      	b.n	800414a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_UART_Receive_IT+0x38>
 8004126:	2302      	movs	r3, #2
 8004128:	e00f      	b.n	800414a <HAL_UART_Receive_IT+0x58>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004138:	88fb      	ldrh	r3, [r7, #6]
 800413a:	461a      	mov	r2, r3
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fa1e 	bl	8004580 <UART_Start_Receive_IT>
 8004144:	4603      	mov	r3, r0
 8004146:	e000      	b.n	800414a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10d      	bne.n	80041a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_UART_IRQHandler+0x52>
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fad1 	bl	8004746 <UART_Receive_IT>
      return;
 80041a4:	e17c      	b.n	80044a0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80b1 	beq.w	8004310 <HAL_UART_IRQHandler+0x1bc>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_UART_IRQHandler+0x70>
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80a6 	beq.w	8004310 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_UART_IRQHandler+0x90>
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_UART_IRQHandler+0xb0>
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f043 0202 	orr.w	r2, r3, #2
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_UART_IRQHandler+0xd0>
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f043 0204 	orr.w	r2, r3, #4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00f      	beq.n	800424e <HAL_UART_IRQHandler+0xfa>
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d104      	bne.n	8004242 <HAL_UART_IRQHandler+0xee>
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f043 0208 	orr.w	r2, r3, #8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 811f 	beq.w	8004496 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <HAL_UART_IRQHandler+0x11e>
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fa6a 	bl	8004746 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d102      	bne.n	800429a <HAL_UART_IRQHandler+0x146>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d031      	beq.n	80042fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f9aa 	bl	80045f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d123      	bne.n	80042f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d013      	beq.n	80042ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	4a77      	ldr	r2, [pc, #476]	; (80044a8 <HAL_UART_IRQHandler+0x354>)
 80042cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fb3d 	bl	8002952 <HAL_DMA_Abort_IT>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042e8:	4610      	mov	r0, r2
 80042ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	e00e      	b.n	800430c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f8e6 	bl	80044c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	e00a      	b.n	800430c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f8e2 	bl	80044c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	e006      	b.n	800430c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8de 	bl	80044c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800430a:	e0c4      	b.n	8004496 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	bf00      	nop
    return;
 800430e:	e0c2      	b.n	8004496 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	2b01      	cmp	r3, #1
 8004316:	f040 80a2 	bne.w	800445e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 809c 	beq.w	800445e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8096 	beq.w	800445e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d14f      	bne.n	80043f6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004360:	8a3b      	ldrh	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8099 	beq.w	800449a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800436c:	8a3a      	ldrh	r2, [r7, #16]
 800436e:	429a      	cmp	r2, r3
 8004370:	f080 8093 	bcs.w	800449a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8a3a      	ldrh	r2, [r7, #16]
 8004378:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004384:	d02b      	beq.n	80043de <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004394:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0210 	bic.w	r2, r2, #16
 80043d2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fe fa4a 	bl	8002872 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f870 	bl	80044d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043f4:	e051      	b.n	800449a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d047      	beq.n	800449e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800440e:	8a7b      	ldrh	r3, [r7, #18]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d044      	beq.n	800449e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004422:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0210 	bic.w	r2, r2, #16
 8004450:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004452:	8a7b      	ldrh	r3, [r7, #18]
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f83c 	bl	80044d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800445c:	e01f      	b.n	800449e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_UART_IRQHandler+0x326>
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f8ff 	bl	8004676 <UART_Transmit_IT>
    return;
 8004478:	e012      	b.n	80044a0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <HAL_UART_IRQHandler+0x34c>
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f941 	bl	8004716 <UART_EndTransmit_IT>
    return;
 8004494:	e004      	b.n	80044a0 <HAL_UART_IRQHandler+0x34c>
    return;
 8004496:	bf00      	nop
 8004498:	e002      	b.n	80044a0 <HAL_UART_IRQHandler+0x34c>
      return;
 800449a:	bf00      	nop
 800449c:	e000      	b.n	80044a0 <HAL_UART_IRQHandler+0x34c>
      return;
 800449e:	bf00      	nop
  }
}
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	0800464f 	.word	0x0800464f

080044ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fc:	e02c      	b.n	8004558 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d028      	beq.n	8004558 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0x30>
 800450c:	f7fd fc64 	bl	8001dd8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	429a      	cmp	r2, r3
 800451a:	d21d      	bcs.n	8004558 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800452a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e00f      	b.n	8004578 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	429a      	cmp	r2, r3
 8004574:	d0c3      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2222      	movs	r2, #34	; 0x22
 80045aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0220 	orr.w	r2, r2, #32
 80045e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800460a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	2b01      	cmp	r3, #1
 8004622:	d107      	bne.n	8004634 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0210 	bic.w	r2, r2, #16
 8004632:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff ff29 	bl	80044c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b21      	cmp	r3, #33	; 0x21
 8004688:	d13e      	bne.n	8004708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	d114      	bne.n	80046be <UART_Transmit_IT+0x48>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d110      	bne.n	80046be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	1c9a      	adds	r2, r3, #2
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	621a      	str	r2, [r3, #32]
 80046bc:	e008      	b.n	80046d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6211      	str	r1, [r2, #32]
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29b      	uxth	r3, r3
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4619      	mov	r1, r3
 80046de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff feb8 	bl	80044ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b22      	cmp	r3, #34	; 0x22
 8004758:	f040 8087 	bne.w	800486a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	d117      	bne.n	8004796 <UART_Receive_IT+0x50>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d113      	bne.n	8004796 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	b29a      	uxth	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	1c9a      	adds	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28
 8004794:	e026      	b.n	80047e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d007      	beq.n	80047ba <UART_Receive_IT+0x74>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <UART_Receive_IT+0x82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e008      	b.n	80047da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4619      	mov	r1, r3
 80047f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d136      	bne.n	8004866 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0220 	bic.w	r2, r2, #32
 8004806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	2b01      	cmp	r3, #1
 8004836:	d10e      	bne.n	8004856 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0210 	bic.w	r2, r2, #16
 8004846:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff fe40 	bl	80044d4 <HAL_UARTEx_RxEventCallback>
 8004854:	e002      	b.n	800485c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fc ffc8 	bl	80017ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e002      	b.n	800486c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004878:	b09f      	sub	sp, #124	; 0x7c
 800487a:	af00      	add	r7, sp, #0
 800487c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800487e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488a:	68d9      	ldr	r1, [r3, #12]
 800488c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	ea40 0301 	orr.w	r3, r0, r1
 8004894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	431a      	orrs	r2, r3
 80048a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80048ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048b8:	f021 010c 	bic.w	r1, r1, #12
 80048bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c2:	430b      	orrs	r3, r1
 80048c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d2:	6999      	ldr	r1, [r3, #24]
 80048d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	ea40 0301 	orr.w	r3, r0, r1
 80048dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4bc5      	ldr	r3, [pc, #788]	; (8004bf8 <UART_SetConfig+0x384>)
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d004      	beq.n	80048f2 <UART_SetConfig+0x7e>
 80048e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4bc3      	ldr	r3, [pc, #780]	; (8004bfc <UART_SetConfig+0x388>)
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d103      	bne.n	80048fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048f2:	f7fe fe8d 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 80048f6:	6778      	str	r0, [r7, #116]	; 0x74
 80048f8:	e002      	b.n	8004900 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048fa:	f7fe fe75 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 80048fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004908:	f040 80b6 	bne.w	8004a78 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800490c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490e:	461c      	mov	r4, r3
 8004910:	f04f 0500 	mov.w	r5, #0
 8004914:	4622      	mov	r2, r4
 8004916:	462b      	mov	r3, r5
 8004918:	1891      	adds	r1, r2, r2
 800491a:	6439      	str	r1, [r7, #64]	; 0x40
 800491c:	415b      	adcs	r3, r3
 800491e:	647b      	str	r3, [r7, #68]	; 0x44
 8004920:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004924:	1912      	adds	r2, r2, r4
 8004926:	eb45 0303 	adc.w	r3, r5, r3
 800492a:	f04f 0000 	mov.w	r0, #0
 800492e:	f04f 0100 	mov.w	r1, #0
 8004932:	00d9      	lsls	r1, r3, #3
 8004934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004938:	00d0      	lsls	r0, r2, #3
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	1911      	adds	r1, r2, r4
 8004940:	6639      	str	r1, [r7, #96]	; 0x60
 8004942:	416b      	adcs	r3, r5
 8004944:	667b      	str	r3, [r7, #100]	; 0x64
 8004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	461a      	mov	r2, r3
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	1891      	adds	r1, r2, r2
 8004952:	63b9      	str	r1, [r7, #56]	; 0x38
 8004954:	415b      	adcs	r3, r3
 8004956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800495c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004960:	f7fc f932 	bl	8000bc8 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4ba5      	ldr	r3, [pc, #660]	; (8004c00 <UART_SetConfig+0x38c>)
 800496a:	fba3 2302 	umull	r2, r3, r3, r2
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	011e      	lsls	r6, r3, #4
 8004972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004974:	461c      	mov	r4, r3
 8004976:	f04f 0500 	mov.w	r5, #0
 800497a:	4622      	mov	r2, r4
 800497c:	462b      	mov	r3, r5
 800497e:	1891      	adds	r1, r2, r2
 8004980:	6339      	str	r1, [r7, #48]	; 0x30
 8004982:	415b      	adcs	r3, r3
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
 8004986:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800498a:	1912      	adds	r2, r2, r4
 800498c:	eb45 0303 	adc.w	r3, r5, r3
 8004990:	f04f 0000 	mov.w	r0, #0
 8004994:	f04f 0100 	mov.w	r1, #0
 8004998:	00d9      	lsls	r1, r3, #3
 800499a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800499e:	00d0      	lsls	r0, r2, #3
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	1911      	adds	r1, r2, r4
 80049a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80049a8:	416b      	adcs	r3, r5
 80049aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	461a      	mov	r2, r3
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	1891      	adds	r1, r2, r2
 80049b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80049ba:	415b      	adcs	r3, r3
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80049c6:	f7fc f8ff 	bl	8000bc8 <__aeabi_uldivmod>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4b8c      	ldr	r3, [pc, #560]	; (8004c00 <UART_SetConfig+0x38c>)
 80049d0:	fba3 1302 	umull	r1, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	2164      	movs	r1, #100	; 0x64
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	3332      	adds	r3, #50	; 0x32
 80049e2:	4a87      	ldr	r2, [pc, #540]	; (8004c00 <UART_SetConfig+0x38c>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049f0:	441e      	add	r6, r3
 80049f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f4:	4618      	mov	r0, r3
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	1894      	adds	r4, r2, r2
 8004a00:	623c      	str	r4, [r7, #32]
 8004a02:	415b      	adcs	r3, r3
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
 8004a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a0a:	1812      	adds	r2, r2, r0
 8004a0c:	eb41 0303 	adc.w	r3, r1, r3
 8004a10:	f04f 0400 	mov.w	r4, #0
 8004a14:	f04f 0500 	mov.w	r5, #0
 8004a18:	00dd      	lsls	r5, r3, #3
 8004a1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a1e:	00d4      	lsls	r4, r2, #3
 8004a20:	4622      	mov	r2, r4
 8004a22:	462b      	mov	r3, r5
 8004a24:	1814      	adds	r4, r2, r0
 8004a26:	653c      	str	r4, [r7, #80]	; 0x50
 8004a28:	414b      	adcs	r3, r1
 8004a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	61b9      	str	r1, [r7, #24]
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a46:	f7fc f8bf 	bl	8000bc8 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4b6c      	ldr	r3, [pc, #432]	; (8004c00 <UART_SetConfig+0x38c>)
 8004a50:	fba3 1302 	umull	r1, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	2164      	movs	r1, #100	; 0x64
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	3332      	adds	r3, #50	; 0x32
 8004a62:	4a67      	ldr	r2, [pc, #412]	; (8004c00 <UART_SetConfig+0x38c>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	f003 0207 	and.w	r2, r3, #7
 8004a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4432      	add	r2, r6
 8004a74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a76:	e0b9      	b.n	8004bec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7a:	461c      	mov	r4, r3
 8004a7c:	f04f 0500 	mov.w	r5, #0
 8004a80:	4622      	mov	r2, r4
 8004a82:	462b      	mov	r3, r5
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	6139      	str	r1, [r7, #16]
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a90:	1912      	adds	r2, r2, r4
 8004a92:	eb45 0303 	adc.w	r3, r5, r3
 8004a96:	f04f 0000 	mov.w	r0, #0
 8004a9a:	f04f 0100 	mov.w	r1, #0
 8004a9e:	00d9      	lsls	r1, r3, #3
 8004aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aa4:	00d0      	lsls	r0, r2, #3
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	eb12 0804 	adds.w	r8, r2, r4
 8004aae:	eb43 0905 	adc.w	r9, r3, r5
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	008b      	lsls	r3, r1, #2
 8004ac6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004aca:	0082      	lsls	r2, r0, #2
 8004acc:	4640      	mov	r0, r8
 8004ace:	4649      	mov	r1, r9
 8004ad0:	f7fc f87a 	bl	8000bc8 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4b49      	ldr	r3, [pc, #292]	; (8004c00 <UART_SetConfig+0x38c>)
 8004ada:	fba3 2302 	umull	r2, r3, r3, r2
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	011e      	lsls	r6, r3, #4
 8004ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	1894      	adds	r4, r2, r2
 8004af0:	60bc      	str	r4, [r7, #8]
 8004af2:	415b      	adcs	r3, r3
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004afa:	1812      	adds	r2, r2, r0
 8004afc:	eb41 0303 	adc.w	r3, r1, r3
 8004b00:	f04f 0400 	mov.w	r4, #0
 8004b04:	f04f 0500 	mov.w	r5, #0
 8004b08:	00dd      	lsls	r5, r3, #3
 8004b0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b0e:	00d4      	lsls	r4, r2, #3
 8004b10:	4622      	mov	r2, r4
 8004b12:	462b      	mov	r3, r5
 8004b14:	1814      	adds	r4, r2, r0
 8004b16:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b18:	414b      	adcs	r3, r1
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	008b      	lsls	r3, r1, #2
 8004b30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b34:	0082      	lsls	r2, r0, #2
 8004b36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b3a:	f7fc f845 	bl	8000bc8 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4b2f      	ldr	r3, [pc, #188]	; (8004c00 <UART_SetConfig+0x38c>)
 8004b44:	fba3 1302 	umull	r1, r3, r3, r2
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2164      	movs	r1, #100	; 0x64
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <UART_SetConfig+0x38c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b62:	441e      	add	r6, r3
 8004b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b66:	4618      	mov	r0, r3
 8004b68:	f04f 0100 	mov.w	r1, #0
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	1894      	adds	r4, r2, r2
 8004b72:	603c      	str	r4, [r7, #0]
 8004b74:	415b      	adcs	r3, r3
 8004b76:	607b      	str	r3, [r7, #4]
 8004b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b7c:	1812      	adds	r2, r2, r0
 8004b7e:	eb41 0303 	adc.w	r3, r1, r3
 8004b82:	f04f 0400 	mov.w	r4, #0
 8004b86:	f04f 0500 	mov.w	r5, #0
 8004b8a:	00dd      	lsls	r5, r3, #3
 8004b8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b90:	00d4      	lsls	r4, r2, #3
 8004b92:	4622      	mov	r2, r4
 8004b94:	462b      	mov	r3, r5
 8004b96:	eb12 0a00 	adds.w	sl, r2, r0
 8004b9a:	eb43 0b01 	adc.w	fp, r3, r1
 8004b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	008b      	lsls	r3, r1, #2
 8004bb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bb6:	0082      	lsls	r2, r0, #2
 8004bb8:	4650      	mov	r0, sl
 8004bba:	4659      	mov	r1, fp
 8004bbc:	f7fc f804 	bl	8000bc8 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <UART_SetConfig+0x38c>)
 8004bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2164      	movs	r1, #100	; 0x64
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	3332      	adds	r3, #50	; 0x32
 8004bd8:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <UART_SetConfig+0x38c>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4432      	add	r2, r6
 8004bea:	609a      	str	r2, [r3, #8]
}
 8004bec:	bf00      	nop
 8004bee:	377c      	adds	r7, #124	; 0x7c
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40011000 	.word	0x40011000
 8004bfc:	40011400 	.word	0x40011400
 8004c00:	51eb851f 	.word	0x51eb851f

08004c04 <__errno>:
 8004c04:	4b01      	ldr	r3, [pc, #4]	; (8004c0c <__errno+0x8>)
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	2000000c 	.word	0x2000000c

08004c10 <__libc_init_array>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4d0d      	ldr	r5, [pc, #52]	; (8004c48 <__libc_init_array+0x38>)
 8004c14:	4c0d      	ldr	r4, [pc, #52]	; (8004c4c <__libc_init_array+0x3c>)
 8004c16:	1b64      	subs	r4, r4, r5
 8004c18:	10a4      	asrs	r4, r4, #2
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	42a6      	cmp	r6, r4
 8004c1e:	d109      	bne.n	8004c34 <__libc_init_array+0x24>
 8004c20:	4d0b      	ldr	r5, [pc, #44]	; (8004c50 <__libc_init_array+0x40>)
 8004c22:	4c0c      	ldr	r4, [pc, #48]	; (8004c54 <__libc_init_array+0x44>)
 8004c24:	f002 fec6 	bl	80079b4 <_init>
 8004c28:	1b64      	subs	r4, r4, r5
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	42a6      	cmp	r6, r4
 8004c30:	d105      	bne.n	8004c3e <__libc_init_array+0x2e>
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c38:	4798      	blx	r3
 8004c3a:	3601      	adds	r6, #1
 8004c3c:	e7ee      	b.n	8004c1c <__libc_init_array+0xc>
 8004c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c42:	4798      	blx	r3
 8004c44:	3601      	adds	r6, #1
 8004c46:	e7f2      	b.n	8004c2e <__libc_init_array+0x1e>
 8004c48:	08007df4 	.word	0x08007df4
 8004c4c:	08007df4 	.word	0x08007df4
 8004c50:	08007df4 	.word	0x08007df4
 8004c54:	08007df8 	.word	0x08007df8

08004c58 <memset>:
 8004c58:	4402      	add	r2, r0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d100      	bne.n	8004c62 <memset+0xa>
 8004c60:	4770      	bx	lr
 8004c62:	f803 1b01 	strb.w	r1, [r3], #1
 8004c66:	e7f9      	b.n	8004c5c <memset+0x4>

08004c68 <__cvt>:
 8004c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c6c:	ec55 4b10 	vmov	r4, r5, d0
 8004c70:	2d00      	cmp	r5, #0
 8004c72:	460e      	mov	r6, r1
 8004c74:	4619      	mov	r1, r3
 8004c76:	462b      	mov	r3, r5
 8004c78:	bfbb      	ittet	lt
 8004c7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c7e:	461d      	movlt	r5, r3
 8004c80:	2300      	movge	r3, #0
 8004c82:	232d      	movlt	r3, #45	; 0x2d
 8004c84:	700b      	strb	r3, [r1, #0]
 8004c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c8c:	4691      	mov	r9, r2
 8004c8e:	f023 0820 	bic.w	r8, r3, #32
 8004c92:	bfbc      	itt	lt
 8004c94:	4622      	movlt	r2, r4
 8004c96:	4614      	movlt	r4, r2
 8004c98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c9c:	d005      	beq.n	8004caa <__cvt+0x42>
 8004c9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ca2:	d100      	bne.n	8004ca6 <__cvt+0x3e>
 8004ca4:	3601      	adds	r6, #1
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	e000      	b.n	8004cac <__cvt+0x44>
 8004caa:	2103      	movs	r1, #3
 8004cac:	ab03      	add	r3, sp, #12
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	ab02      	add	r3, sp, #8
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	ec45 4b10 	vmov	d0, r4, r5
 8004cb8:	4653      	mov	r3, sl
 8004cba:	4632      	mov	r2, r6
 8004cbc:	f000 fcfc 	bl	80056b8 <_dtoa_r>
 8004cc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	d102      	bne.n	8004cce <__cvt+0x66>
 8004cc8:	f019 0f01 	tst.w	r9, #1
 8004ccc:	d022      	beq.n	8004d14 <__cvt+0xac>
 8004cce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cd2:	eb07 0906 	add.w	r9, r7, r6
 8004cd6:	d110      	bne.n	8004cfa <__cvt+0x92>
 8004cd8:	783b      	ldrb	r3, [r7, #0]
 8004cda:	2b30      	cmp	r3, #48	; 0x30
 8004cdc:	d10a      	bne.n	8004cf4 <__cvt+0x8c>
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	f7fb feff 	bl	8000ae8 <__aeabi_dcmpeq>
 8004cea:	b918      	cbnz	r0, 8004cf4 <__cvt+0x8c>
 8004cec:	f1c6 0601 	rsb	r6, r6, #1
 8004cf0:	f8ca 6000 	str.w	r6, [sl]
 8004cf4:	f8da 3000 	ldr.w	r3, [sl]
 8004cf8:	4499      	add	r9, r3
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4620      	mov	r0, r4
 8004d00:	4629      	mov	r1, r5
 8004d02:	f7fb fef1 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d06:	b108      	cbz	r0, 8004d0c <__cvt+0xa4>
 8004d08:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d0c:	2230      	movs	r2, #48	; 0x30
 8004d0e:	9b03      	ldr	r3, [sp, #12]
 8004d10:	454b      	cmp	r3, r9
 8004d12:	d307      	bcc.n	8004d24 <__cvt+0xbc>
 8004d14:	9b03      	ldr	r3, [sp, #12]
 8004d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d18:	1bdb      	subs	r3, r3, r7
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	b004      	add	sp, #16
 8004d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d24:	1c59      	adds	r1, r3, #1
 8004d26:	9103      	str	r1, [sp, #12]
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	e7f0      	b.n	8004d0e <__cvt+0xa6>

08004d2c <__exponent>:
 8004d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2900      	cmp	r1, #0
 8004d32:	bfb8      	it	lt
 8004d34:	4249      	neglt	r1, r1
 8004d36:	f803 2b02 	strb.w	r2, [r3], #2
 8004d3a:	bfb4      	ite	lt
 8004d3c:	222d      	movlt	r2, #45	; 0x2d
 8004d3e:	222b      	movge	r2, #43	; 0x2b
 8004d40:	2909      	cmp	r1, #9
 8004d42:	7042      	strb	r2, [r0, #1]
 8004d44:	dd2a      	ble.n	8004d9c <__exponent+0x70>
 8004d46:	f10d 0407 	add.w	r4, sp, #7
 8004d4a:	46a4      	mov	ip, r4
 8004d4c:	270a      	movs	r7, #10
 8004d4e:	46a6      	mov	lr, r4
 8004d50:	460a      	mov	r2, r1
 8004d52:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d56:	fb07 1516 	mls	r5, r7, r6, r1
 8004d5a:	3530      	adds	r5, #48	; 0x30
 8004d5c:	2a63      	cmp	r2, #99	; 0x63
 8004d5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d66:	4631      	mov	r1, r6
 8004d68:	dcf1      	bgt.n	8004d4e <__exponent+0x22>
 8004d6a:	3130      	adds	r1, #48	; 0x30
 8004d6c:	f1ae 0502 	sub.w	r5, lr, #2
 8004d70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d74:	1c44      	adds	r4, r0, #1
 8004d76:	4629      	mov	r1, r5
 8004d78:	4561      	cmp	r1, ip
 8004d7a:	d30a      	bcc.n	8004d92 <__exponent+0x66>
 8004d7c:	f10d 0209 	add.w	r2, sp, #9
 8004d80:	eba2 020e 	sub.w	r2, r2, lr
 8004d84:	4565      	cmp	r5, ip
 8004d86:	bf88      	it	hi
 8004d88:	2200      	movhi	r2, #0
 8004d8a:	4413      	add	r3, r2
 8004d8c:	1a18      	subs	r0, r3, r0
 8004d8e:	b003      	add	sp, #12
 8004d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d9a:	e7ed      	b.n	8004d78 <__exponent+0x4c>
 8004d9c:	2330      	movs	r3, #48	; 0x30
 8004d9e:	3130      	adds	r1, #48	; 0x30
 8004da0:	7083      	strb	r3, [r0, #2]
 8004da2:	70c1      	strb	r1, [r0, #3]
 8004da4:	1d03      	adds	r3, r0, #4
 8004da6:	e7f1      	b.n	8004d8c <__exponent+0x60>

08004da8 <_printf_float>:
 8004da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dac:	ed2d 8b02 	vpush	{d8}
 8004db0:	b08d      	sub	sp, #52	; 0x34
 8004db2:	460c      	mov	r4, r1
 8004db4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004db8:	4616      	mov	r6, r2
 8004dba:	461f      	mov	r7, r3
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	f001 fa67 	bl	8006290 <_localeconv_r>
 8004dc2:	f8d0 a000 	ldr.w	sl, [r0]
 8004dc6:	4650      	mov	r0, sl
 8004dc8:	f7fb fa0c 	bl	80001e4 <strlen>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	930a      	str	r3, [sp, #40]	; 0x28
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	9305      	str	r3, [sp, #20]
 8004dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ddc:	3307      	adds	r3, #7
 8004dde:	f023 0307 	bic.w	r3, r3, #7
 8004de2:	f103 0208 	add.w	r2, r3, #8
 8004de6:	f8c8 2000 	str.w	r2, [r8]
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004df2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004df6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dfa:	9307      	str	r3, [sp, #28]
 8004dfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e00:	ee08 0a10 	vmov	s16, r0
 8004e04:	4b9f      	ldr	r3, [pc, #636]	; (8005084 <_printf_float+0x2dc>)
 8004e06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0e:	f7fb fe9d 	bl	8000b4c <__aeabi_dcmpun>
 8004e12:	bb88      	cbnz	r0, 8004e78 <_printf_float+0xd0>
 8004e14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e18:	4b9a      	ldr	r3, [pc, #616]	; (8005084 <_printf_float+0x2dc>)
 8004e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1e:	f7fb fe77 	bl	8000b10 <__aeabi_dcmple>
 8004e22:	bb48      	cbnz	r0, 8004e78 <_printf_float+0xd0>
 8004e24:	2200      	movs	r2, #0
 8004e26:	2300      	movs	r3, #0
 8004e28:	4640      	mov	r0, r8
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	f7fb fe66 	bl	8000afc <__aeabi_dcmplt>
 8004e30:	b110      	cbz	r0, 8004e38 <_printf_float+0x90>
 8004e32:	232d      	movs	r3, #45	; 0x2d
 8004e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e38:	4b93      	ldr	r3, [pc, #588]	; (8005088 <_printf_float+0x2e0>)
 8004e3a:	4894      	ldr	r0, [pc, #592]	; (800508c <_printf_float+0x2e4>)
 8004e3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e40:	bf94      	ite	ls
 8004e42:	4698      	movls	r8, r3
 8004e44:	4680      	movhi	r8, r0
 8004e46:	2303      	movs	r3, #3
 8004e48:	6123      	str	r3, [r4, #16]
 8004e4a:	9b05      	ldr	r3, [sp, #20]
 8004e4c:	f023 0204 	bic.w	r2, r3, #4
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	f04f 0900 	mov.w	r9, #0
 8004e56:	9700      	str	r7, [sp, #0]
 8004e58:	4633      	mov	r3, r6
 8004e5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 f9d8 	bl	8005214 <_printf_common>
 8004e64:	3001      	adds	r0, #1
 8004e66:	f040 8090 	bne.w	8004f8a <_printf_float+0x1e2>
 8004e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6e:	b00d      	add	sp, #52	; 0x34
 8004e70:	ecbd 8b02 	vpop	{d8}
 8004e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e78:	4642      	mov	r2, r8
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	4649      	mov	r1, r9
 8004e80:	f7fb fe64 	bl	8000b4c <__aeabi_dcmpun>
 8004e84:	b140      	cbz	r0, 8004e98 <_printf_float+0xf0>
 8004e86:	464b      	mov	r3, r9
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	bfbc      	itt	lt
 8004e8c:	232d      	movlt	r3, #45	; 0x2d
 8004e8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e92:	487f      	ldr	r0, [pc, #508]	; (8005090 <_printf_float+0x2e8>)
 8004e94:	4b7f      	ldr	r3, [pc, #508]	; (8005094 <_printf_float+0x2ec>)
 8004e96:	e7d1      	b.n	8004e3c <_printf_float+0x94>
 8004e98:	6863      	ldr	r3, [r4, #4]
 8004e9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e9e:	9206      	str	r2, [sp, #24]
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	d13f      	bne.n	8004f24 <_printf_float+0x17c>
 8004ea4:	2306      	movs	r3, #6
 8004ea6:	6063      	str	r3, [r4, #4]
 8004ea8:	9b05      	ldr	r3, [sp, #20]
 8004eaa:	6861      	ldr	r1, [r4, #4]
 8004eac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9303      	str	r3, [sp, #12]
 8004eb4:	ab0a      	add	r3, sp, #40	; 0x28
 8004eb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004eba:	ab09      	add	r3, sp, #36	; 0x24
 8004ebc:	ec49 8b10 	vmov	d0, r8, r9
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f7ff fecd 	bl	8004c68 <__cvt>
 8004ece:	9b06      	ldr	r3, [sp, #24]
 8004ed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ed2:	2b47      	cmp	r3, #71	; 0x47
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	d108      	bne.n	8004eea <_printf_float+0x142>
 8004ed8:	1cc8      	adds	r0, r1, #3
 8004eda:	db02      	blt.n	8004ee2 <_printf_float+0x13a>
 8004edc:	6863      	ldr	r3, [r4, #4]
 8004ede:	4299      	cmp	r1, r3
 8004ee0:	dd41      	ble.n	8004f66 <_printf_float+0x1be>
 8004ee2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004ee6:	fa5f fb8b 	uxtb.w	fp, fp
 8004eea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004eee:	d820      	bhi.n	8004f32 <_printf_float+0x18a>
 8004ef0:	3901      	subs	r1, #1
 8004ef2:	465a      	mov	r2, fp
 8004ef4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ef8:	9109      	str	r1, [sp, #36]	; 0x24
 8004efa:	f7ff ff17 	bl	8004d2c <__exponent>
 8004efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f00:	1813      	adds	r3, r2, r0
 8004f02:	2a01      	cmp	r2, #1
 8004f04:	4681      	mov	r9, r0
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	dc02      	bgt.n	8004f10 <_printf_float+0x168>
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	07d2      	lsls	r2, r2, #31
 8004f0e:	d501      	bpl.n	8004f14 <_printf_float+0x16c>
 8004f10:	3301      	adds	r3, #1
 8004f12:	6123      	str	r3, [r4, #16]
 8004f14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d09c      	beq.n	8004e56 <_printf_float+0xae>
 8004f1c:	232d      	movs	r3, #45	; 0x2d
 8004f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f22:	e798      	b.n	8004e56 <_printf_float+0xae>
 8004f24:	9a06      	ldr	r2, [sp, #24]
 8004f26:	2a47      	cmp	r2, #71	; 0x47
 8004f28:	d1be      	bne.n	8004ea8 <_printf_float+0x100>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1bc      	bne.n	8004ea8 <_printf_float+0x100>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e7b9      	b.n	8004ea6 <_printf_float+0xfe>
 8004f32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f36:	d118      	bne.n	8004f6a <_printf_float+0x1c2>
 8004f38:	2900      	cmp	r1, #0
 8004f3a:	6863      	ldr	r3, [r4, #4]
 8004f3c:	dd0b      	ble.n	8004f56 <_printf_float+0x1ae>
 8004f3e:	6121      	str	r1, [r4, #16]
 8004f40:	b913      	cbnz	r3, 8004f48 <_printf_float+0x1a0>
 8004f42:	6822      	ldr	r2, [r4, #0]
 8004f44:	07d0      	lsls	r0, r2, #31
 8004f46:	d502      	bpl.n	8004f4e <_printf_float+0x1a6>
 8004f48:	3301      	adds	r3, #1
 8004f4a:	440b      	add	r3, r1
 8004f4c:	6123      	str	r3, [r4, #16]
 8004f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f50:	f04f 0900 	mov.w	r9, #0
 8004f54:	e7de      	b.n	8004f14 <_printf_float+0x16c>
 8004f56:	b913      	cbnz	r3, 8004f5e <_printf_float+0x1b6>
 8004f58:	6822      	ldr	r2, [r4, #0]
 8004f5a:	07d2      	lsls	r2, r2, #31
 8004f5c:	d501      	bpl.n	8004f62 <_printf_float+0x1ba>
 8004f5e:	3302      	adds	r3, #2
 8004f60:	e7f4      	b.n	8004f4c <_printf_float+0x1a4>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e7f2      	b.n	8004f4c <_printf_float+0x1a4>
 8004f66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f6c:	4299      	cmp	r1, r3
 8004f6e:	db05      	blt.n	8004f7c <_printf_float+0x1d4>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	6121      	str	r1, [r4, #16]
 8004f74:	07d8      	lsls	r0, r3, #31
 8004f76:	d5ea      	bpl.n	8004f4e <_printf_float+0x1a6>
 8004f78:	1c4b      	adds	r3, r1, #1
 8004f7a:	e7e7      	b.n	8004f4c <_printf_float+0x1a4>
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	bfd4      	ite	le
 8004f80:	f1c1 0202 	rsble	r2, r1, #2
 8004f84:	2201      	movgt	r2, #1
 8004f86:	4413      	add	r3, r2
 8004f88:	e7e0      	b.n	8004f4c <_printf_float+0x1a4>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	055a      	lsls	r2, r3, #21
 8004f8e:	d407      	bmi.n	8004fa0 <_printf_float+0x1f8>
 8004f90:	6923      	ldr	r3, [r4, #16]
 8004f92:	4642      	mov	r2, r8
 8004f94:	4631      	mov	r1, r6
 8004f96:	4628      	mov	r0, r5
 8004f98:	47b8      	blx	r7
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d12c      	bne.n	8004ff8 <_printf_float+0x250>
 8004f9e:	e764      	b.n	8004e6a <_printf_float+0xc2>
 8004fa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fa4:	f240 80e0 	bls.w	8005168 <_printf_float+0x3c0>
 8004fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fac:	2200      	movs	r2, #0
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f7fb fd9a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d034      	beq.n	8005022 <_printf_float+0x27a>
 8004fb8:	4a37      	ldr	r2, [pc, #220]	; (8005098 <_printf_float+0x2f0>)
 8004fba:	2301      	movs	r3, #1
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	47b8      	blx	r7
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	f43f af51 	beq.w	8004e6a <_printf_float+0xc2>
 8004fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	db02      	blt.n	8004fd6 <_printf_float+0x22e>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	07d8      	lsls	r0, r3, #31
 8004fd4:	d510      	bpl.n	8004ff8 <_printf_float+0x250>
 8004fd6:	ee18 3a10 	vmov	r3, s16
 8004fda:	4652      	mov	r2, sl
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b8      	blx	r7
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	f43f af41 	beq.w	8004e6a <_printf_float+0xc2>
 8004fe8:	f04f 0800 	mov.w	r8, #0
 8004fec:	f104 091a 	add.w	r9, r4, #26
 8004ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	4543      	cmp	r3, r8
 8004ff6:	dc09      	bgt.n	800500c <_printf_float+0x264>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	079b      	lsls	r3, r3, #30
 8004ffc:	f100 8105 	bmi.w	800520a <_printf_float+0x462>
 8005000:	68e0      	ldr	r0, [r4, #12]
 8005002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005004:	4298      	cmp	r0, r3
 8005006:	bfb8      	it	lt
 8005008:	4618      	movlt	r0, r3
 800500a:	e730      	b.n	8004e6e <_printf_float+0xc6>
 800500c:	2301      	movs	r3, #1
 800500e:	464a      	mov	r2, r9
 8005010:	4631      	mov	r1, r6
 8005012:	4628      	mov	r0, r5
 8005014:	47b8      	blx	r7
 8005016:	3001      	adds	r0, #1
 8005018:	f43f af27 	beq.w	8004e6a <_printf_float+0xc2>
 800501c:	f108 0801 	add.w	r8, r8, #1
 8005020:	e7e6      	b.n	8004ff0 <_printf_float+0x248>
 8005022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	dc39      	bgt.n	800509c <_printf_float+0x2f4>
 8005028:	4a1b      	ldr	r2, [pc, #108]	; (8005098 <_printf_float+0x2f0>)
 800502a:	2301      	movs	r3, #1
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	f43f af19 	beq.w	8004e6a <_printf_float+0xc2>
 8005038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800503c:	4313      	orrs	r3, r2
 800503e:	d102      	bne.n	8005046 <_printf_float+0x29e>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	07d9      	lsls	r1, r3, #31
 8005044:	d5d8      	bpl.n	8004ff8 <_printf_float+0x250>
 8005046:	ee18 3a10 	vmov	r3, s16
 800504a:	4652      	mov	r2, sl
 800504c:	4631      	mov	r1, r6
 800504e:	4628      	mov	r0, r5
 8005050:	47b8      	blx	r7
 8005052:	3001      	adds	r0, #1
 8005054:	f43f af09 	beq.w	8004e6a <_printf_float+0xc2>
 8005058:	f04f 0900 	mov.w	r9, #0
 800505c:	f104 0a1a 	add.w	sl, r4, #26
 8005060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005062:	425b      	negs	r3, r3
 8005064:	454b      	cmp	r3, r9
 8005066:	dc01      	bgt.n	800506c <_printf_float+0x2c4>
 8005068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506a:	e792      	b.n	8004f92 <_printf_float+0x1ea>
 800506c:	2301      	movs	r3, #1
 800506e:	4652      	mov	r2, sl
 8005070:	4631      	mov	r1, r6
 8005072:	4628      	mov	r0, r5
 8005074:	47b8      	blx	r7
 8005076:	3001      	adds	r0, #1
 8005078:	f43f aef7 	beq.w	8004e6a <_printf_float+0xc2>
 800507c:	f109 0901 	add.w	r9, r9, #1
 8005080:	e7ee      	b.n	8005060 <_printf_float+0x2b8>
 8005082:	bf00      	nop
 8005084:	7fefffff 	.word	0x7fefffff
 8005088:	08007a10 	.word	0x08007a10
 800508c:	08007a14 	.word	0x08007a14
 8005090:	08007a1c 	.word	0x08007a1c
 8005094:	08007a18 	.word	0x08007a18
 8005098:	08007a20 	.word	0x08007a20
 800509c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800509e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050a0:	429a      	cmp	r2, r3
 80050a2:	bfa8      	it	ge
 80050a4:	461a      	movge	r2, r3
 80050a6:	2a00      	cmp	r2, #0
 80050a8:	4691      	mov	r9, r2
 80050aa:	dc37      	bgt.n	800511c <_printf_float+0x374>
 80050ac:	f04f 0b00 	mov.w	fp, #0
 80050b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050b4:	f104 021a 	add.w	r2, r4, #26
 80050b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050ba:	9305      	str	r3, [sp, #20]
 80050bc:	eba3 0309 	sub.w	r3, r3, r9
 80050c0:	455b      	cmp	r3, fp
 80050c2:	dc33      	bgt.n	800512c <_printf_float+0x384>
 80050c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050c8:	429a      	cmp	r2, r3
 80050ca:	db3b      	blt.n	8005144 <_printf_float+0x39c>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	07da      	lsls	r2, r3, #31
 80050d0:	d438      	bmi.n	8005144 <_printf_float+0x39c>
 80050d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050d4:	9b05      	ldr	r3, [sp, #20]
 80050d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	eba2 0901 	sub.w	r9, r2, r1
 80050de:	4599      	cmp	r9, r3
 80050e0:	bfa8      	it	ge
 80050e2:	4699      	movge	r9, r3
 80050e4:	f1b9 0f00 	cmp.w	r9, #0
 80050e8:	dc35      	bgt.n	8005156 <_printf_float+0x3ae>
 80050ea:	f04f 0800 	mov.w	r8, #0
 80050ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050f2:	f104 0a1a 	add.w	sl, r4, #26
 80050f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	eba3 0309 	sub.w	r3, r3, r9
 8005100:	4543      	cmp	r3, r8
 8005102:	f77f af79 	ble.w	8004ff8 <_printf_float+0x250>
 8005106:	2301      	movs	r3, #1
 8005108:	4652      	mov	r2, sl
 800510a:	4631      	mov	r1, r6
 800510c:	4628      	mov	r0, r5
 800510e:	47b8      	blx	r7
 8005110:	3001      	adds	r0, #1
 8005112:	f43f aeaa 	beq.w	8004e6a <_printf_float+0xc2>
 8005116:	f108 0801 	add.w	r8, r8, #1
 800511a:	e7ec      	b.n	80050f6 <_printf_float+0x34e>
 800511c:	4613      	mov	r3, r2
 800511e:	4631      	mov	r1, r6
 8005120:	4642      	mov	r2, r8
 8005122:	4628      	mov	r0, r5
 8005124:	47b8      	blx	r7
 8005126:	3001      	adds	r0, #1
 8005128:	d1c0      	bne.n	80050ac <_printf_float+0x304>
 800512a:	e69e      	b.n	8004e6a <_printf_float+0xc2>
 800512c:	2301      	movs	r3, #1
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	9205      	str	r2, [sp, #20]
 8005134:	47b8      	blx	r7
 8005136:	3001      	adds	r0, #1
 8005138:	f43f ae97 	beq.w	8004e6a <_printf_float+0xc2>
 800513c:	9a05      	ldr	r2, [sp, #20]
 800513e:	f10b 0b01 	add.w	fp, fp, #1
 8005142:	e7b9      	b.n	80050b8 <_printf_float+0x310>
 8005144:	ee18 3a10 	vmov	r3, s16
 8005148:	4652      	mov	r2, sl
 800514a:	4631      	mov	r1, r6
 800514c:	4628      	mov	r0, r5
 800514e:	47b8      	blx	r7
 8005150:	3001      	adds	r0, #1
 8005152:	d1be      	bne.n	80050d2 <_printf_float+0x32a>
 8005154:	e689      	b.n	8004e6a <_printf_float+0xc2>
 8005156:	9a05      	ldr	r2, [sp, #20]
 8005158:	464b      	mov	r3, r9
 800515a:	4442      	add	r2, r8
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	d1c1      	bne.n	80050ea <_printf_float+0x342>
 8005166:	e680      	b.n	8004e6a <_printf_float+0xc2>
 8005168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800516a:	2a01      	cmp	r2, #1
 800516c:	dc01      	bgt.n	8005172 <_printf_float+0x3ca>
 800516e:	07db      	lsls	r3, r3, #31
 8005170:	d538      	bpl.n	80051e4 <_printf_float+0x43c>
 8005172:	2301      	movs	r3, #1
 8005174:	4642      	mov	r2, r8
 8005176:	4631      	mov	r1, r6
 8005178:	4628      	mov	r0, r5
 800517a:	47b8      	blx	r7
 800517c:	3001      	adds	r0, #1
 800517e:	f43f ae74 	beq.w	8004e6a <_printf_float+0xc2>
 8005182:	ee18 3a10 	vmov	r3, s16
 8005186:	4652      	mov	r2, sl
 8005188:	4631      	mov	r1, r6
 800518a:	4628      	mov	r0, r5
 800518c:	47b8      	blx	r7
 800518e:	3001      	adds	r0, #1
 8005190:	f43f ae6b 	beq.w	8004e6a <_printf_float+0xc2>
 8005194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005198:	2200      	movs	r2, #0
 800519a:	2300      	movs	r3, #0
 800519c:	f7fb fca4 	bl	8000ae8 <__aeabi_dcmpeq>
 80051a0:	b9d8      	cbnz	r0, 80051da <_printf_float+0x432>
 80051a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a4:	f108 0201 	add.w	r2, r8, #1
 80051a8:	3b01      	subs	r3, #1
 80051aa:	4631      	mov	r1, r6
 80051ac:	4628      	mov	r0, r5
 80051ae:	47b8      	blx	r7
 80051b0:	3001      	adds	r0, #1
 80051b2:	d10e      	bne.n	80051d2 <_printf_float+0x42a>
 80051b4:	e659      	b.n	8004e6a <_printf_float+0xc2>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4652      	mov	r2, sl
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	47b8      	blx	r7
 80051c0:	3001      	adds	r0, #1
 80051c2:	f43f ae52 	beq.w	8004e6a <_printf_float+0xc2>
 80051c6:	f108 0801 	add.w	r8, r8, #1
 80051ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	4543      	cmp	r3, r8
 80051d0:	dcf1      	bgt.n	80051b6 <_printf_float+0x40e>
 80051d2:	464b      	mov	r3, r9
 80051d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051d8:	e6dc      	b.n	8004f94 <_printf_float+0x1ec>
 80051da:	f04f 0800 	mov.w	r8, #0
 80051de:	f104 0a1a 	add.w	sl, r4, #26
 80051e2:	e7f2      	b.n	80051ca <_printf_float+0x422>
 80051e4:	2301      	movs	r3, #1
 80051e6:	4642      	mov	r2, r8
 80051e8:	e7df      	b.n	80051aa <_printf_float+0x402>
 80051ea:	2301      	movs	r3, #1
 80051ec:	464a      	mov	r2, r9
 80051ee:	4631      	mov	r1, r6
 80051f0:	4628      	mov	r0, r5
 80051f2:	47b8      	blx	r7
 80051f4:	3001      	adds	r0, #1
 80051f6:	f43f ae38 	beq.w	8004e6a <_printf_float+0xc2>
 80051fa:	f108 0801 	add.w	r8, r8, #1
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005202:	1a5b      	subs	r3, r3, r1
 8005204:	4543      	cmp	r3, r8
 8005206:	dcf0      	bgt.n	80051ea <_printf_float+0x442>
 8005208:	e6fa      	b.n	8005000 <_printf_float+0x258>
 800520a:	f04f 0800 	mov.w	r8, #0
 800520e:	f104 0919 	add.w	r9, r4, #25
 8005212:	e7f4      	b.n	80051fe <_printf_float+0x456>

08005214 <_printf_common>:
 8005214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005218:	4616      	mov	r6, r2
 800521a:	4699      	mov	r9, r3
 800521c:	688a      	ldr	r2, [r1, #8]
 800521e:	690b      	ldr	r3, [r1, #16]
 8005220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005224:	4293      	cmp	r3, r2
 8005226:	bfb8      	it	lt
 8005228:	4613      	movlt	r3, r2
 800522a:	6033      	str	r3, [r6, #0]
 800522c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005230:	4607      	mov	r7, r0
 8005232:	460c      	mov	r4, r1
 8005234:	b10a      	cbz	r2, 800523a <_printf_common+0x26>
 8005236:	3301      	adds	r3, #1
 8005238:	6033      	str	r3, [r6, #0]
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	0699      	lsls	r1, r3, #26
 800523e:	bf42      	ittt	mi
 8005240:	6833      	ldrmi	r3, [r6, #0]
 8005242:	3302      	addmi	r3, #2
 8005244:	6033      	strmi	r3, [r6, #0]
 8005246:	6825      	ldr	r5, [r4, #0]
 8005248:	f015 0506 	ands.w	r5, r5, #6
 800524c:	d106      	bne.n	800525c <_printf_common+0x48>
 800524e:	f104 0a19 	add.w	sl, r4, #25
 8005252:	68e3      	ldr	r3, [r4, #12]
 8005254:	6832      	ldr	r2, [r6, #0]
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	42ab      	cmp	r3, r5
 800525a:	dc26      	bgt.n	80052aa <_printf_common+0x96>
 800525c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005260:	1e13      	subs	r3, r2, #0
 8005262:	6822      	ldr	r2, [r4, #0]
 8005264:	bf18      	it	ne
 8005266:	2301      	movne	r3, #1
 8005268:	0692      	lsls	r2, r2, #26
 800526a:	d42b      	bmi.n	80052c4 <_printf_common+0xb0>
 800526c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005270:	4649      	mov	r1, r9
 8005272:	4638      	mov	r0, r7
 8005274:	47c0      	blx	r8
 8005276:	3001      	adds	r0, #1
 8005278:	d01e      	beq.n	80052b8 <_printf_common+0xa4>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	68e5      	ldr	r5, [r4, #12]
 800527e:	6832      	ldr	r2, [r6, #0]
 8005280:	f003 0306 	and.w	r3, r3, #6
 8005284:	2b04      	cmp	r3, #4
 8005286:	bf08      	it	eq
 8005288:	1aad      	subeq	r5, r5, r2
 800528a:	68a3      	ldr	r3, [r4, #8]
 800528c:	6922      	ldr	r2, [r4, #16]
 800528e:	bf0c      	ite	eq
 8005290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005294:	2500      	movne	r5, #0
 8005296:	4293      	cmp	r3, r2
 8005298:	bfc4      	itt	gt
 800529a:	1a9b      	subgt	r3, r3, r2
 800529c:	18ed      	addgt	r5, r5, r3
 800529e:	2600      	movs	r6, #0
 80052a0:	341a      	adds	r4, #26
 80052a2:	42b5      	cmp	r5, r6
 80052a4:	d11a      	bne.n	80052dc <_printf_common+0xc8>
 80052a6:	2000      	movs	r0, #0
 80052a8:	e008      	b.n	80052bc <_printf_common+0xa8>
 80052aa:	2301      	movs	r3, #1
 80052ac:	4652      	mov	r2, sl
 80052ae:	4649      	mov	r1, r9
 80052b0:	4638      	mov	r0, r7
 80052b2:	47c0      	blx	r8
 80052b4:	3001      	adds	r0, #1
 80052b6:	d103      	bne.n	80052c0 <_printf_common+0xac>
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c0:	3501      	adds	r5, #1
 80052c2:	e7c6      	b.n	8005252 <_printf_common+0x3e>
 80052c4:	18e1      	adds	r1, r4, r3
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	2030      	movs	r0, #48	; 0x30
 80052ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ce:	4422      	add	r2, r4
 80052d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052d8:	3302      	adds	r3, #2
 80052da:	e7c7      	b.n	800526c <_printf_common+0x58>
 80052dc:	2301      	movs	r3, #1
 80052de:	4622      	mov	r2, r4
 80052e0:	4649      	mov	r1, r9
 80052e2:	4638      	mov	r0, r7
 80052e4:	47c0      	blx	r8
 80052e6:	3001      	adds	r0, #1
 80052e8:	d0e6      	beq.n	80052b8 <_printf_common+0xa4>
 80052ea:	3601      	adds	r6, #1
 80052ec:	e7d9      	b.n	80052a2 <_printf_common+0x8e>
	...

080052f0 <_printf_i>:
 80052f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052f4:	460c      	mov	r4, r1
 80052f6:	4691      	mov	r9, r2
 80052f8:	7e27      	ldrb	r7, [r4, #24]
 80052fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052fc:	2f78      	cmp	r7, #120	; 0x78
 80052fe:	4680      	mov	r8, r0
 8005300:	469a      	mov	sl, r3
 8005302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005306:	d807      	bhi.n	8005318 <_printf_i+0x28>
 8005308:	2f62      	cmp	r7, #98	; 0x62
 800530a:	d80a      	bhi.n	8005322 <_printf_i+0x32>
 800530c:	2f00      	cmp	r7, #0
 800530e:	f000 80d8 	beq.w	80054c2 <_printf_i+0x1d2>
 8005312:	2f58      	cmp	r7, #88	; 0x58
 8005314:	f000 80a3 	beq.w	800545e <_printf_i+0x16e>
 8005318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800531c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005320:	e03a      	b.n	8005398 <_printf_i+0xa8>
 8005322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005326:	2b15      	cmp	r3, #21
 8005328:	d8f6      	bhi.n	8005318 <_printf_i+0x28>
 800532a:	a001      	add	r0, pc, #4	; (adr r0, 8005330 <_printf_i+0x40>)
 800532c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005330:	08005389 	.word	0x08005389
 8005334:	0800539d 	.word	0x0800539d
 8005338:	08005319 	.word	0x08005319
 800533c:	08005319 	.word	0x08005319
 8005340:	08005319 	.word	0x08005319
 8005344:	08005319 	.word	0x08005319
 8005348:	0800539d 	.word	0x0800539d
 800534c:	08005319 	.word	0x08005319
 8005350:	08005319 	.word	0x08005319
 8005354:	08005319 	.word	0x08005319
 8005358:	08005319 	.word	0x08005319
 800535c:	080054a9 	.word	0x080054a9
 8005360:	080053cd 	.word	0x080053cd
 8005364:	0800548b 	.word	0x0800548b
 8005368:	08005319 	.word	0x08005319
 800536c:	08005319 	.word	0x08005319
 8005370:	080054cb 	.word	0x080054cb
 8005374:	08005319 	.word	0x08005319
 8005378:	080053cd 	.word	0x080053cd
 800537c:	08005319 	.word	0x08005319
 8005380:	08005319 	.word	0x08005319
 8005384:	08005493 	.word	0x08005493
 8005388:	680b      	ldr	r3, [r1, #0]
 800538a:	1d1a      	adds	r2, r3, #4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	600a      	str	r2, [r1, #0]
 8005390:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005398:	2301      	movs	r3, #1
 800539a:	e0a3      	b.n	80054e4 <_printf_i+0x1f4>
 800539c:	6825      	ldr	r5, [r4, #0]
 800539e:	6808      	ldr	r0, [r1, #0]
 80053a0:	062e      	lsls	r6, r5, #24
 80053a2:	f100 0304 	add.w	r3, r0, #4
 80053a6:	d50a      	bpl.n	80053be <_printf_i+0xce>
 80053a8:	6805      	ldr	r5, [r0, #0]
 80053aa:	600b      	str	r3, [r1, #0]
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	da03      	bge.n	80053b8 <_printf_i+0xc8>
 80053b0:	232d      	movs	r3, #45	; 0x2d
 80053b2:	426d      	negs	r5, r5
 80053b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b8:	485e      	ldr	r0, [pc, #376]	; (8005534 <_printf_i+0x244>)
 80053ba:	230a      	movs	r3, #10
 80053bc:	e019      	b.n	80053f2 <_printf_i+0x102>
 80053be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053c2:	6805      	ldr	r5, [r0, #0]
 80053c4:	600b      	str	r3, [r1, #0]
 80053c6:	bf18      	it	ne
 80053c8:	b22d      	sxthne	r5, r5
 80053ca:	e7ef      	b.n	80053ac <_printf_i+0xbc>
 80053cc:	680b      	ldr	r3, [r1, #0]
 80053ce:	6825      	ldr	r5, [r4, #0]
 80053d0:	1d18      	adds	r0, r3, #4
 80053d2:	6008      	str	r0, [r1, #0]
 80053d4:	0628      	lsls	r0, r5, #24
 80053d6:	d501      	bpl.n	80053dc <_printf_i+0xec>
 80053d8:	681d      	ldr	r5, [r3, #0]
 80053da:	e002      	b.n	80053e2 <_printf_i+0xf2>
 80053dc:	0669      	lsls	r1, r5, #25
 80053de:	d5fb      	bpl.n	80053d8 <_printf_i+0xe8>
 80053e0:	881d      	ldrh	r5, [r3, #0]
 80053e2:	4854      	ldr	r0, [pc, #336]	; (8005534 <_printf_i+0x244>)
 80053e4:	2f6f      	cmp	r7, #111	; 0x6f
 80053e6:	bf0c      	ite	eq
 80053e8:	2308      	moveq	r3, #8
 80053ea:	230a      	movne	r3, #10
 80053ec:	2100      	movs	r1, #0
 80053ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053f2:	6866      	ldr	r6, [r4, #4]
 80053f4:	60a6      	str	r6, [r4, #8]
 80053f6:	2e00      	cmp	r6, #0
 80053f8:	bfa2      	ittt	ge
 80053fa:	6821      	ldrge	r1, [r4, #0]
 80053fc:	f021 0104 	bicge.w	r1, r1, #4
 8005400:	6021      	strge	r1, [r4, #0]
 8005402:	b90d      	cbnz	r5, 8005408 <_printf_i+0x118>
 8005404:	2e00      	cmp	r6, #0
 8005406:	d04d      	beq.n	80054a4 <_printf_i+0x1b4>
 8005408:	4616      	mov	r6, r2
 800540a:	fbb5 f1f3 	udiv	r1, r5, r3
 800540e:	fb03 5711 	mls	r7, r3, r1, r5
 8005412:	5dc7      	ldrb	r7, [r0, r7]
 8005414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005418:	462f      	mov	r7, r5
 800541a:	42bb      	cmp	r3, r7
 800541c:	460d      	mov	r5, r1
 800541e:	d9f4      	bls.n	800540a <_printf_i+0x11a>
 8005420:	2b08      	cmp	r3, #8
 8005422:	d10b      	bne.n	800543c <_printf_i+0x14c>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	07df      	lsls	r7, r3, #31
 8005428:	d508      	bpl.n	800543c <_printf_i+0x14c>
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	6861      	ldr	r1, [r4, #4]
 800542e:	4299      	cmp	r1, r3
 8005430:	bfde      	ittt	le
 8005432:	2330      	movle	r3, #48	; 0x30
 8005434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005438:	f106 36ff 	addle.w	r6, r6, #4294967295
 800543c:	1b92      	subs	r2, r2, r6
 800543e:	6122      	str	r2, [r4, #16]
 8005440:	f8cd a000 	str.w	sl, [sp]
 8005444:	464b      	mov	r3, r9
 8005446:	aa03      	add	r2, sp, #12
 8005448:	4621      	mov	r1, r4
 800544a:	4640      	mov	r0, r8
 800544c:	f7ff fee2 	bl	8005214 <_printf_common>
 8005450:	3001      	adds	r0, #1
 8005452:	d14c      	bne.n	80054ee <_printf_i+0x1fe>
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	b004      	add	sp, #16
 800545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545e:	4835      	ldr	r0, [pc, #212]	; (8005534 <_printf_i+0x244>)
 8005460:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	680e      	ldr	r6, [r1, #0]
 8005468:	061f      	lsls	r7, r3, #24
 800546a:	f856 5b04 	ldr.w	r5, [r6], #4
 800546e:	600e      	str	r6, [r1, #0]
 8005470:	d514      	bpl.n	800549c <_printf_i+0x1ac>
 8005472:	07d9      	lsls	r1, r3, #31
 8005474:	bf44      	itt	mi
 8005476:	f043 0320 	orrmi.w	r3, r3, #32
 800547a:	6023      	strmi	r3, [r4, #0]
 800547c:	b91d      	cbnz	r5, 8005486 <_printf_i+0x196>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	f023 0320 	bic.w	r3, r3, #32
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	2310      	movs	r3, #16
 8005488:	e7b0      	b.n	80053ec <_printf_i+0xfc>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	f043 0320 	orr.w	r3, r3, #32
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	2378      	movs	r3, #120	; 0x78
 8005494:	4828      	ldr	r0, [pc, #160]	; (8005538 <_printf_i+0x248>)
 8005496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800549a:	e7e3      	b.n	8005464 <_printf_i+0x174>
 800549c:	065e      	lsls	r6, r3, #25
 800549e:	bf48      	it	mi
 80054a0:	b2ad      	uxthmi	r5, r5
 80054a2:	e7e6      	b.n	8005472 <_printf_i+0x182>
 80054a4:	4616      	mov	r6, r2
 80054a6:	e7bb      	b.n	8005420 <_printf_i+0x130>
 80054a8:	680b      	ldr	r3, [r1, #0]
 80054aa:	6826      	ldr	r6, [r4, #0]
 80054ac:	6960      	ldr	r0, [r4, #20]
 80054ae:	1d1d      	adds	r5, r3, #4
 80054b0:	600d      	str	r5, [r1, #0]
 80054b2:	0635      	lsls	r5, r6, #24
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	d501      	bpl.n	80054bc <_printf_i+0x1cc>
 80054b8:	6018      	str	r0, [r3, #0]
 80054ba:	e002      	b.n	80054c2 <_printf_i+0x1d2>
 80054bc:	0671      	lsls	r1, r6, #25
 80054be:	d5fb      	bpl.n	80054b8 <_printf_i+0x1c8>
 80054c0:	8018      	strh	r0, [r3, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	4616      	mov	r6, r2
 80054c8:	e7ba      	b.n	8005440 <_printf_i+0x150>
 80054ca:	680b      	ldr	r3, [r1, #0]
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	600a      	str	r2, [r1, #0]
 80054d0:	681e      	ldr	r6, [r3, #0]
 80054d2:	6862      	ldr	r2, [r4, #4]
 80054d4:	2100      	movs	r1, #0
 80054d6:	4630      	mov	r0, r6
 80054d8:	f7fa fe92 	bl	8000200 <memchr>
 80054dc:	b108      	cbz	r0, 80054e2 <_printf_i+0x1f2>
 80054de:	1b80      	subs	r0, r0, r6
 80054e0:	6060      	str	r0, [r4, #4]
 80054e2:	6863      	ldr	r3, [r4, #4]
 80054e4:	6123      	str	r3, [r4, #16]
 80054e6:	2300      	movs	r3, #0
 80054e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ec:	e7a8      	b.n	8005440 <_printf_i+0x150>
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	4632      	mov	r2, r6
 80054f2:	4649      	mov	r1, r9
 80054f4:	4640      	mov	r0, r8
 80054f6:	47d0      	blx	sl
 80054f8:	3001      	adds	r0, #1
 80054fa:	d0ab      	beq.n	8005454 <_printf_i+0x164>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	079b      	lsls	r3, r3, #30
 8005500:	d413      	bmi.n	800552a <_printf_i+0x23a>
 8005502:	68e0      	ldr	r0, [r4, #12]
 8005504:	9b03      	ldr	r3, [sp, #12]
 8005506:	4298      	cmp	r0, r3
 8005508:	bfb8      	it	lt
 800550a:	4618      	movlt	r0, r3
 800550c:	e7a4      	b.n	8005458 <_printf_i+0x168>
 800550e:	2301      	movs	r3, #1
 8005510:	4632      	mov	r2, r6
 8005512:	4649      	mov	r1, r9
 8005514:	4640      	mov	r0, r8
 8005516:	47d0      	blx	sl
 8005518:	3001      	adds	r0, #1
 800551a:	d09b      	beq.n	8005454 <_printf_i+0x164>
 800551c:	3501      	adds	r5, #1
 800551e:	68e3      	ldr	r3, [r4, #12]
 8005520:	9903      	ldr	r1, [sp, #12]
 8005522:	1a5b      	subs	r3, r3, r1
 8005524:	42ab      	cmp	r3, r5
 8005526:	dcf2      	bgt.n	800550e <_printf_i+0x21e>
 8005528:	e7eb      	b.n	8005502 <_printf_i+0x212>
 800552a:	2500      	movs	r5, #0
 800552c:	f104 0619 	add.w	r6, r4, #25
 8005530:	e7f5      	b.n	800551e <_printf_i+0x22e>
 8005532:	bf00      	nop
 8005534:	08007a22 	.word	0x08007a22
 8005538:	08007a33 	.word	0x08007a33

0800553c <siprintf>:
 800553c:	b40e      	push	{r1, r2, r3}
 800553e:	b500      	push	{lr}
 8005540:	b09c      	sub	sp, #112	; 0x70
 8005542:	ab1d      	add	r3, sp, #116	; 0x74
 8005544:	9002      	str	r0, [sp, #8]
 8005546:	9006      	str	r0, [sp, #24]
 8005548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800554c:	4809      	ldr	r0, [pc, #36]	; (8005574 <siprintf+0x38>)
 800554e:	9107      	str	r1, [sp, #28]
 8005550:	9104      	str	r1, [sp, #16]
 8005552:	4909      	ldr	r1, [pc, #36]	; (8005578 <siprintf+0x3c>)
 8005554:	f853 2b04 	ldr.w	r2, [r3], #4
 8005558:	9105      	str	r1, [sp, #20]
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	a902      	add	r1, sp, #8
 8005560:	f001 fb44 	bl	8006bec <_svfiprintf_r>
 8005564:	9b02      	ldr	r3, [sp, #8]
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	b01c      	add	sp, #112	; 0x70
 800556c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005570:	b003      	add	sp, #12
 8005572:	4770      	bx	lr
 8005574:	2000000c 	.word	0x2000000c
 8005578:	ffff0208 	.word	0xffff0208

0800557c <strncpy>:
 800557c:	b510      	push	{r4, lr}
 800557e:	3901      	subs	r1, #1
 8005580:	4603      	mov	r3, r0
 8005582:	b132      	cbz	r2, 8005592 <strncpy+0x16>
 8005584:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005588:	f803 4b01 	strb.w	r4, [r3], #1
 800558c:	3a01      	subs	r2, #1
 800558e:	2c00      	cmp	r4, #0
 8005590:	d1f7      	bne.n	8005582 <strncpy+0x6>
 8005592:	441a      	add	r2, r3
 8005594:	2100      	movs	r1, #0
 8005596:	4293      	cmp	r3, r2
 8005598:	d100      	bne.n	800559c <strncpy+0x20>
 800559a:	bd10      	pop	{r4, pc}
 800559c:	f803 1b01 	strb.w	r1, [r3], #1
 80055a0:	e7f9      	b.n	8005596 <strncpy+0x1a>

080055a2 <quorem>:
 80055a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a6:	6903      	ldr	r3, [r0, #16]
 80055a8:	690c      	ldr	r4, [r1, #16]
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	4607      	mov	r7, r0
 80055ae:	f2c0 8081 	blt.w	80056b4 <quorem+0x112>
 80055b2:	3c01      	subs	r4, #1
 80055b4:	f101 0814 	add.w	r8, r1, #20
 80055b8:	f100 0514 	add.w	r5, r0, #20
 80055bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055ca:	3301      	adds	r3, #1
 80055cc:	429a      	cmp	r2, r3
 80055ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80055da:	d331      	bcc.n	8005640 <quorem+0x9e>
 80055dc:	f04f 0e00 	mov.w	lr, #0
 80055e0:	4640      	mov	r0, r8
 80055e2:	46ac      	mov	ip, r5
 80055e4:	46f2      	mov	sl, lr
 80055e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80055ea:	b293      	uxth	r3, r2
 80055ec:	fb06 e303 	mla	r3, r6, r3, lr
 80055f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	ebaa 0303 	sub.w	r3, sl, r3
 80055fa:	0c12      	lsrs	r2, r2, #16
 80055fc:	f8dc a000 	ldr.w	sl, [ip]
 8005600:	fb06 e202 	mla	r2, r6, r2, lr
 8005604:	fa13 f38a 	uxtah	r3, r3, sl
 8005608:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800560c:	fa1f fa82 	uxth.w	sl, r2
 8005610:	f8dc 2000 	ldr.w	r2, [ip]
 8005614:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005618:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800561c:	b29b      	uxth	r3, r3
 800561e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005622:	4581      	cmp	r9, r0
 8005624:	f84c 3b04 	str.w	r3, [ip], #4
 8005628:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800562c:	d2db      	bcs.n	80055e6 <quorem+0x44>
 800562e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005632:	b92b      	cbnz	r3, 8005640 <quorem+0x9e>
 8005634:	9b01      	ldr	r3, [sp, #4]
 8005636:	3b04      	subs	r3, #4
 8005638:	429d      	cmp	r5, r3
 800563a:	461a      	mov	r2, r3
 800563c:	d32e      	bcc.n	800569c <quorem+0xfa>
 800563e:	613c      	str	r4, [r7, #16]
 8005640:	4638      	mov	r0, r7
 8005642:	f001 f8bd 	bl	80067c0 <__mcmp>
 8005646:	2800      	cmp	r0, #0
 8005648:	db24      	blt.n	8005694 <quorem+0xf2>
 800564a:	3601      	adds	r6, #1
 800564c:	4628      	mov	r0, r5
 800564e:	f04f 0c00 	mov.w	ip, #0
 8005652:	f858 2b04 	ldr.w	r2, [r8], #4
 8005656:	f8d0 e000 	ldr.w	lr, [r0]
 800565a:	b293      	uxth	r3, r2
 800565c:	ebac 0303 	sub.w	r3, ip, r3
 8005660:	0c12      	lsrs	r2, r2, #16
 8005662:	fa13 f38e 	uxtah	r3, r3, lr
 8005666:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800566a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800566e:	b29b      	uxth	r3, r3
 8005670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005674:	45c1      	cmp	r9, r8
 8005676:	f840 3b04 	str.w	r3, [r0], #4
 800567a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800567e:	d2e8      	bcs.n	8005652 <quorem+0xb0>
 8005680:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005684:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005688:	b922      	cbnz	r2, 8005694 <quorem+0xf2>
 800568a:	3b04      	subs	r3, #4
 800568c:	429d      	cmp	r5, r3
 800568e:	461a      	mov	r2, r3
 8005690:	d30a      	bcc.n	80056a8 <quorem+0x106>
 8005692:	613c      	str	r4, [r7, #16]
 8005694:	4630      	mov	r0, r6
 8005696:	b003      	add	sp, #12
 8005698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	3b04      	subs	r3, #4
 80056a0:	2a00      	cmp	r2, #0
 80056a2:	d1cc      	bne.n	800563e <quorem+0x9c>
 80056a4:	3c01      	subs	r4, #1
 80056a6:	e7c7      	b.n	8005638 <quorem+0x96>
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	3b04      	subs	r3, #4
 80056ac:	2a00      	cmp	r2, #0
 80056ae:	d1f0      	bne.n	8005692 <quorem+0xf0>
 80056b0:	3c01      	subs	r4, #1
 80056b2:	e7eb      	b.n	800568c <quorem+0xea>
 80056b4:	2000      	movs	r0, #0
 80056b6:	e7ee      	b.n	8005696 <quorem+0xf4>

080056b8 <_dtoa_r>:
 80056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	ed2d 8b02 	vpush	{d8}
 80056c0:	ec57 6b10 	vmov	r6, r7, d0
 80056c4:	b095      	sub	sp, #84	; 0x54
 80056c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056cc:	9105      	str	r1, [sp, #20]
 80056ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80056d2:	4604      	mov	r4, r0
 80056d4:	9209      	str	r2, [sp, #36]	; 0x24
 80056d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80056d8:	b975      	cbnz	r5, 80056f8 <_dtoa_r+0x40>
 80056da:	2010      	movs	r0, #16
 80056dc:	f000 fddc 	bl	8006298 <malloc>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6260      	str	r0, [r4, #36]	; 0x24
 80056e4:	b920      	cbnz	r0, 80056f0 <_dtoa_r+0x38>
 80056e6:	4bb2      	ldr	r3, [pc, #712]	; (80059b0 <_dtoa_r+0x2f8>)
 80056e8:	21ea      	movs	r1, #234	; 0xea
 80056ea:	48b2      	ldr	r0, [pc, #712]	; (80059b4 <_dtoa_r+0x2fc>)
 80056ec:	f001 fb8e 	bl	8006e0c <__assert_func>
 80056f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056f4:	6005      	str	r5, [r0, #0]
 80056f6:	60c5      	str	r5, [r0, #12]
 80056f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056fa:	6819      	ldr	r1, [r3, #0]
 80056fc:	b151      	cbz	r1, 8005714 <_dtoa_r+0x5c>
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	604a      	str	r2, [r1, #4]
 8005702:	2301      	movs	r3, #1
 8005704:	4093      	lsls	r3, r2
 8005706:	608b      	str	r3, [r1, #8]
 8005708:	4620      	mov	r0, r4
 800570a:	f000 fe1b 	bl	8006344 <_Bfree>
 800570e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	1e3b      	subs	r3, r7, #0
 8005716:	bfb9      	ittee	lt
 8005718:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800571c:	9303      	strlt	r3, [sp, #12]
 800571e:	2300      	movge	r3, #0
 8005720:	f8c8 3000 	strge.w	r3, [r8]
 8005724:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005728:	4ba3      	ldr	r3, [pc, #652]	; (80059b8 <_dtoa_r+0x300>)
 800572a:	bfbc      	itt	lt
 800572c:	2201      	movlt	r2, #1
 800572e:	f8c8 2000 	strlt.w	r2, [r8]
 8005732:	ea33 0309 	bics.w	r3, r3, r9
 8005736:	d11b      	bne.n	8005770 <_dtoa_r+0xb8>
 8005738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800573a:	f242 730f 	movw	r3, #9999	; 0x270f
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005744:	4333      	orrs	r3, r6
 8005746:	f000 857a 	beq.w	800623e <_dtoa_r+0xb86>
 800574a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800574c:	b963      	cbnz	r3, 8005768 <_dtoa_r+0xb0>
 800574e:	4b9b      	ldr	r3, [pc, #620]	; (80059bc <_dtoa_r+0x304>)
 8005750:	e024      	b.n	800579c <_dtoa_r+0xe4>
 8005752:	4b9b      	ldr	r3, [pc, #620]	; (80059c0 <_dtoa_r+0x308>)
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	9800      	ldr	r0, [sp, #0]
 800575e:	b015      	add	sp, #84	; 0x54
 8005760:	ecbd 8b02 	vpop	{d8}
 8005764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005768:	4b94      	ldr	r3, [pc, #592]	; (80059bc <_dtoa_r+0x304>)
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	3303      	adds	r3, #3
 800576e:	e7f3      	b.n	8005758 <_dtoa_r+0xa0>
 8005770:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005774:	2200      	movs	r2, #0
 8005776:	ec51 0b17 	vmov	r0, r1, d7
 800577a:	2300      	movs	r3, #0
 800577c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005780:	f7fb f9b2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005784:	4680      	mov	r8, r0
 8005786:	b158      	cbz	r0, 80057a0 <_dtoa_r+0xe8>
 8005788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800578a:	2301      	movs	r3, #1
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8551 	beq.w	8006238 <_dtoa_r+0xb80>
 8005796:	488b      	ldr	r0, [pc, #556]	; (80059c4 <_dtoa_r+0x30c>)
 8005798:	6018      	str	r0, [r3, #0]
 800579a:	1e43      	subs	r3, r0, #1
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	e7dd      	b.n	800575c <_dtoa_r+0xa4>
 80057a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80057a4:	aa12      	add	r2, sp, #72	; 0x48
 80057a6:	a913      	add	r1, sp, #76	; 0x4c
 80057a8:	4620      	mov	r0, r4
 80057aa:	f001 f8ad 	bl	8006908 <__d2b>
 80057ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80057b2:	4683      	mov	fp, r0
 80057b4:	2d00      	cmp	r5, #0
 80057b6:	d07c      	beq.n	80058b2 <_dtoa_r+0x1fa>
 80057b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80057be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80057c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80057ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80057ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057d2:	4b7d      	ldr	r3, [pc, #500]	; (80059c8 <_dtoa_r+0x310>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	4630      	mov	r0, r6
 80057d8:	4639      	mov	r1, r7
 80057da:	f7fa fd65 	bl	80002a8 <__aeabi_dsub>
 80057de:	a36e      	add	r3, pc, #440	; (adr r3, 8005998 <_dtoa_r+0x2e0>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f7fa ff18 	bl	8000618 <__aeabi_dmul>
 80057e8:	a36d      	add	r3, pc, #436	; (adr r3, 80059a0 <_dtoa_r+0x2e8>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f7fa fd5d 	bl	80002ac <__adddf3>
 80057f2:	4606      	mov	r6, r0
 80057f4:	4628      	mov	r0, r5
 80057f6:	460f      	mov	r7, r1
 80057f8:	f7fa fea4 	bl	8000544 <__aeabi_i2d>
 80057fc:	a36a      	add	r3, pc, #424	; (adr r3, 80059a8 <_dtoa_r+0x2f0>)
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	f7fa ff09 	bl	8000618 <__aeabi_dmul>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4630      	mov	r0, r6
 800580c:	4639      	mov	r1, r7
 800580e:	f7fa fd4d 	bl	80002ac <__adddf3>
 8005812:	4606      	mov	r6, r0
 8005814:	460f      	mov	r7, r1
 8005816:	f7fb f9af 	bl	8000b78 <__aeabi_d2iz>
 800581a:	2200      	movs	r2, #0
 800581c:	4682      	mov	sl, r0
 800581e:	2300      	movs	r3, #0
 8005820:	4630      	mov	r0, r6
 8005822:	4639      	mov	r1, r7
 8005824:	f7fb f96a 	bl	8000afc <__aeabi_dcmplt>
 8005828:	b148      	cbz	r0, 800583e <_dtoa_r+0x186>
 800582a:	4650      	mov	r0, sl
 800582c:	f7fa fe8a 	bl	8000544 <__aeabi_i2d>
 8005830:	4632      	mov	r2, r6
 8005832:	463b      	mov	r3, r7
 8005834:	f7fb f958 	bl	8000ae8 <__aeabi_dcmpeq>
 8005838:	b908      	cbnz	r0, 800583e <_dtoa_r+0x186>
 800583a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800583e:	f1ba 0f16 	cmp.w	sl, #22
 8005842:	d854      	bhi.n	80058ee <_dtoa_r+0x236>
 8005844:	4b61      	ldr	r3, [pc, #388]	; (80059cc <_dtoa_r+0x314>)
 8005846:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005852:	f7fb f953 	bl	8000afc <__aeabi_dcmplt>
 8005856:	2800      	cmp	r0, #0
 8005858:	d04b      	beq.n	80058f2 <_dtoa_r+0x23a>
 800585a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800585e:	2300      	movs	r3, #0
 8005860:	930e      	str	r3, [sp, #56]	; 0x38
 8005862:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005864:	1b5d      	subs	r5, r3, r5
 8005866:	1e6b      	subs	r3, r5, #1
 8005868:	9304      	str	r3, [sp, #16]
 800586a:	bf43      	ittte	mi
 800586c:	2300      	movmi	r3, #0
 800586e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005872:	9304      	strmi	r3, [sp, #16]
 8005874:	f04f 0800 	movpl.w	r8, #0
 8005878:	f1ba 0f00 	cmp.w	sl, #0
 800587c:	db3b      	blt.n	80058f6 <_dtoa_r+0x23e>
 800587e:	9b04      	ldr	r3, [sp, #16]
 8005880:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005884:	4453      	add	r3, sl
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	2300      	movs	r3, #0
 800588a:	9306      	str	r3, [sp, #24]
 800588c:	9b05      	ldr	r3, [sp, #20]
 800588e:	2b09      	cmp	r3, #9
 8005890:	d869      	bhi.n	8005966 <_dtoa_r+0x2ae>
 8005892:	2b05      	cmp	r3, #5
 8005894:	bfc4      	itt	gt
 8005896:	3b04      	subgt	r3, #4
 8005898:	9305      	strgt	r3, [sp, #20]
 800589a:	9b05      	ldr	r3, [sp, #20]
 800589c:	f1a3 0302 	sub.w	r3, r3, #2
 80058a0:	bfcc      	ite	gt
 80058a2:	2500      	movgt	r5, #0
 80058a4:	2501      	movle	r5, #1
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d869      	bhi.n	800597e <_dtoa_r+0x2c6>
 80058aa:	e8df f003 	tbb	[pc, r3]
 80058ae:	4e2c      	.short	0x4e2c
 80058b0:	5a4c      	.short	0x5a4c
 80058b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80058b6:	441d      	add	r5, r3
 80058b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058bc:	2b20      	cmp	r3, #32
 80058be:	bfc1      	itttt	gt
 80058c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80058c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80058cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80058d0:	bfda      	itte	le
 80058d2:	f1c3 0320 	rsble	r3, r3, #32
 80058d6:	fa06 f003 	lslle.w	r0, r6, r3
 80058da:	4318      	orrgt	r0, r3
 80058dc:	f7fa fe22 	bl	8000524 <__aeabi_ui2d>
 80058e0:	2301      	movs	r3, #1
 80058e2:	4606      	mov	r6, r0
 80058e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80058e8:	3d01      	subs	r5, #1
 80058ea:	9310      	str	r3, [sp, #64]	; 0x40
 80058ec:	e771      	b.n	80057d2 <_dtoa_r+0x11a>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e7b6      	b.n	8005860 <_dtoa_r+0x1a8>
 80058f2:	900e      	str	r0, [sp, #56]	; 0x38
 80058f4:	e7b5      	b.n	8005862 <_dtoa_r+0x1aa>
 80058f6:	f1ca 0300 	rsb	r3, sl, #0
 80058fa:	9306      	str	r3, [sp, #24]
 80058fc:	2300      	movs	r3, #0
 80058fe:	eba8 080a 	sub.w	r8, r8, sl
 8005902:	930d      	str	r3, [sp, #52]	; 0x34
 8005904:	e7c2      	b.n	800588c <_dtoa_r+0x1d4>
 8005906:	2300      	movs	r3, #0
 8005908:	9308      	str	r3, [sp, #32]
 800590a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	dc39      	bgt.n	8005984 <_dtoa_r+0x2cc>
 8005910:	f04f 0901 	mov.w	r9, #1
 8005914:	f8cd 9004 	str.w	r9, [sp, #4]
 8005918:	464b      	mov	r3, r9
 800591a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800591e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005920:	2200      	movs	r2, #0
 8005922:	6042      	str	r2, [r0, #4]
 8005924:	2204      	movs	r2, #4
 8005926:	f102 0614 	add.w	r6, r2, #20
 800592a:	429e      	cmp	r6, r3
 800592c:	6841      	ldr	r1, [r0, #4]
 800592e:	d92f      	bls.n	8005990 <_dtoa_r+0x2d8>
 8005930:	4620      	mov	r0, r4
 8005932:	f000 fcc7 	bl	80062c4 <_Balloc>
 8005936:	9000      	str	r0, [sp, #0]
 8005938:	2800      	cmp	r0, #0
 800593a:	d14b      	bne.n	80059d4 <_dtoa_r+0x31c>
 800593c:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <_dtoa_r+0x318>)
 800593e:	4602      	mov	r2, r0
 8005940:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005944:	e6d1      	b.n	80056ea <_dtoa_r+0x32>
 8005946:	2301      	movs	r3, #1
 8005948:	e7de      	b.n	8005908 <_dtoa_r+0x250>
 800594a:	2300      	movs	r3, #0
 800594c:	9308      	str	r3, [sp, #32]
 800594e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005950:	eb0a 0903 	add.w	r9, sl, r3
 8005954:	f109 0301 	add.w	r3, r9, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	bfb8      	it	lt
 800595e:	2301      	movlt	r3, #1
 8005960:	e7dd      	b.n	800591e <_dtoa_r+0x266>
 8005962:	2301      	movs	r3, #1
 8005964:	e7f2      	b.n	800594c <_dtoa_r+0x294>
 8005966:	2501      	movs	r5, #1
 8005968:	2300      	movs	r3, #0
 800596a:	9305      	str	r3, [sp, #20]
 800596c:	9508      	str	r5, [sp, #32]
 800596e:	f04f 39ff 	mov.w	r9, #4294967295
 8005972:	2200      	movs	r2, #0
 8005974:	f8cd 9004 	str.w	r9, [sp, #4]
 8005978:	2312      	movs	r3, #18
 800597a:	9209      	str	r2, [sp, #36]	; 0x24
 800597c:	e7cf      	b.n	800591e <_dtoa_r+0x266>
 800597e:	2301      	movs	r3, #1
 8005980:	9308      	str	r3, [sp, #32]
 8005982:	e7f4      	b.n	800596e <_dtoa_r+0x2b6>
 8005984:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005988:	f8cd 9004 	str.w	r9, [sp, #4]
 800598c:	464b      	mov	r3, r9
 800598e:	e7c6      	b.n	800591e <_dtoa_r+0x266>
 8005990:	3101      	adds	r1, #1
 8005992:	6041      	str	r1, [r0, #4]
 8005994:	0052      	lsls	r2, r2, #1
 8005996:	e7c6      	b.n	8005926 <_dtoa_r+0x26e>
 8005998:	636f4361 	.word	0x636f4361
 800599c:	3fd287a7 	.word	0x3fd287a7
 80059a0:	8b60c8b3 	.word	0x8b60c8b3
 80059a4:	3fc68a28 	.word	0x3fc68a28
 80059a8:	509f79fb 	.word	0x509f79fb
 80059ac:	3fd34413 	.word	0x3fd34413
 80059b0:	08007a51 	.word	0x08007a51
 80059b4:	08007a68 	.word	0x08007a68
 80059b8:	7ff00000 	.word	0x7ff00000
 80059bc:	08007a4d 	.word	0x08007a4d
 80059c0:	08007a44 	.word	0x08007a44
 80059c4:	08007a21 	.word	0x08007a21
 80059c8:	3ff80000 	.word	0x3ff80000
 80059cc:	08007b60 	.word	0x08007b60
 80059d0:	08007ac7 	.word	0x08007ac7
 80059d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d6:	9a00      	ldr	r2, [sp, #0]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	9b01      	ldr	r3, [sp, #4]
 80059dc:	2b0e      	cmp	r3, #14
 80059de:	f200 80ad 	bhi.w	8005b3c <_dtoa_r+0x484>
 80059e2:	2d00      	cmp	r5, #0
 80059e4:	f000 80aa 	beq.w	8005b3c <_dtoa_r+0x484>
 80059e8:	f1ba 0f00 	cmp.w	sl, #0
 80059ec:	dd36      	ble.n	8005a5c <_dtoa_r+0x3a4>
 80059ee:	4ac3      	ldr	r2, [pc, #780]	; (8005cfc <_dtoa_r+0x644>)
 80059f0:	f00a 030f 	and.w	r3, sl, #15
 80059f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059f8:	ed93 7b00 	vldr	d7, [r3]
 80059fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a00:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005a04:	eeb0 8a47 	vmov.f32	s16, s14
 8005a08:	eef0 8a67 	vmov.f32	s17, s15
 8005a0c:	d016      	beq.n	8005a3c <_dtoa_r+0x384>
 8005a0e:	4bbc      	ldr	r3, [pc, #752]	; (8005d00 <_dtoa_r+0x648>)
 8005a10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a18:	f7fa ff28 	bl	800086c <__aeabi_ddiv>
 8005a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a20:	f007 070f 	and.w	r7, r7, #15
 8005a24:	2503      	movs	r5, #3
 8005a26:	4eb6      	ldr	r6, [pc, #728]	; (8005d00 <_dtoa_r+0x648>)
 8005a28:	b957      	cbnz	r7, 8005a40 <_dtoa_r+0x388>
 8005a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a2e:	ec53 2b18 	vmov	r2, r3, d8
 8005a32:	f7fa ff1b 	bl	800086c <__aeabi_ddiv>
 8005a36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a3a:	e029      	b.n	8005a90 <_dtoa_r+0x3d8>
 8005a3c:	2502      	movs	r5, #2
 8005a3e:	e7f2      	b.n	8005a26 <_dtoa_r+0x36e>
 8005a40:	07f9      	lsls	r1, r7, #31
 8005a42:	d508      	bpl.n	8005a56 <_dtoa_r+0x39e>
 8005a44:	ec51 0b18 	vmov	r0, r1, d8
 8005a48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a4c:	f7fa fde4 	bl	8000618 <__aeabi_dmul>
 8005a50:	ec41 0b18 	vmov	d8, r0, r1
 8005a54:	3501      	adds	r5, #1
 8005a56:	107f      	asrs	r7, r7, #1
 8005a58:	3608      	adds	r6, #8
 8005a5a:	e7e5      	b.n	8005a28 <_dtoa_r+0x370>
 8005a5c:	f000 80a6 	beq.w	8005bac <_dtoa_r+0x4f4>
 8005a60:	f1ca 0600 	rsb	r6, sl, #0
 8005a64:	4ba5      	ldr	r3, [pc, #660]	; (8005cfc <_dtoa_r+0x644>)
 8005a66:	4fa6      	ldr	r7, [pc, #664]	; (8005d00 <_dtoa_r+0x648>)
 8005a68:	f006 020f 	and.w	r2, r6, #15
 8005a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a78:	f7fa fdce 	bl	8000618 <__aeabi_dmul>
 8005a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a80:	1136      	asrs	r6, r6, #4
 8005a82:	2300      	movs	r3, #0
 8005a84:	2502      	movs	r5, #2
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	f040 8085 	bne.w	8005b96 <_dtoa_r+0x4de>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1d2      	bne.n	8005a36 <_dtoa_r+0x37e>
 8005a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 808c 	beq.w	8005bb0 <_dtoa_r+0x4f8>
 8005a98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a9c:	4b99      	ldr	r3, [pc, #612]	; (8005d04 <_dtoa_r+0x64c>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	f7fb f82a 	bl	8000afc <__aeabi_dcmplt>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f000 8081 	beq.w	8005bb0 <_dtoa_r+0x4f8>
 8005aae:	9b01      	ldr	r3, [sp, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d07d      	beq.n	8005bb0 <_dtoa_r+0x4f8>
 8005ab4:	f1b9 0f00 	cmp.w	r9, #0
 8005ab8:	dd3c      	ble.n	8005b34 <_dtoa_r+0x47c>
 8005aba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005abe:	9307      	str	r3, [sp, #28]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4b91      	ldr	r3, [pc, #580]	; (8005d08 <_dtoa_r+0x650>)
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	f7fa fda6 	bl	8000618 <__aeabi_dmul>
 8005acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005ad6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7fa fd32 	bl	8000544 <__aeabi_i2d>
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	f7fa fd98 	bl	8000618 <__aeabi_dmul>
 8005ae8:	4b88      	ldr	r3, [pc, #544]	; (8005d0c <_dtoa_r+0x654>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	f7fa fbde 	bl	80002ac <__adddf3>
 8005af0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005af8:	9303      	str	r3, [sp, #12]
 8005afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d15c      	bne.n	8005bba <_dtoa_r+0x502>
 8005b00:	4b83      	ldr	r3, [pc, #524]	; (8005d10 <_dtoa_r+0x658>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	4630      	mov	r0, r6
 8005b06:	4639      	mov	r1, r7
 8005b08:	f7fa fbce 	bl	80002a8 <__aeabi_dsub>
 8005b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b10:	4606      	mov	r6, r0
 8005b12:	460f      	mov	r7, r1
 8005b14:	f7fb f810 	bl	8000b38 <__aeabi_dcmpgt>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	f040 8296 	bne.w	800604a <_dtoa_r+0x992>
 8005b1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005b22:	4630      	mov	r0, r6
 8005b24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b28:	4639      	mov	r1, r7
 8005b2a:	f7fa ffe7 	bl	8000afc <__aeabi_dcmplt>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	f040 8288 	bne.w	8006044 <_dtoa_r+0x98c>
 8005b34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f2c0 8158 	blt.w	8005df4 <_dtoa_r+0x73c>
 8005b44:	f1ba 0f0e 	cmp.w	sl, #14
 8005b48:	f300 8154 	bgt.w	8005df4 <_dtoa_r+0x73c>
 8005b4c:	4b6b      	ldr	r3, [pc, #428]	; (8005cfc <_dtoa_r+0x644>)
 8005b4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f280 80e3 	bge.w	8005d24 <_dtoa_r+0x66c>
 8005b5e:	9b01      	ldr	r3, [sp, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f300 80df 	bgt.w	8005d24 <_dtoa_r+0x66c>
 8005b66:	f040 826d 	bne.w	8006044 <_dtoa_r+0x98c>
 8005b6a:	4b69      	ldr	r3, [pc, #420]	; (8005d10 <_dtoa_r+0x658>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4640      	mov	r0, r8
 8005b70:	4649      	mov	r1, r9
 8005b72:	f7fa fd51 	bl	8000618 <__aeabi_dmul>
 8005b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b7a:	f7fa ffd3 	bl	8000b24 <__aeabi_dcmpge>
 8005b7e:	9e01      	ldr	r6, [sp, #4]
 8005b80:	4637      	mov	r7, r6
 8005b82:	2800      	cmp	r0, #0
 8005b84:	f040 8243 	bne.w	800600e <_dtoa_r+0x956>
 8005b88:	9d00      	ldr	r5, [sp, #0]
 8005b8a:	2331      	movs	r3, #49	; 0x31
 8005b8c:	f805 3b01 	strb.w	r3, [r5], #1
 8005b90:	f10a 0a01 	add.w	sl, sl, #1
 8005b94:	e23f      	b.n	8006016 <_dtoa_r+0x95e>
 8005b96:	07f2      	lsls	r2, r6, #31
 8005b98:	d505      	bpl.n	8005ba6 <_dtoa_r+0x4ee>
 8005b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b9e:	f7fa fd3b 	bl	8000618 <__aeabi_dmul>
 8005ba2:	3501      	adds	r5, #1
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	1076      	asrs	r6, r6, #1
 8005ba8:	3708      	adds	r7, #8
 8005baa:	e76c      	b.n	8005a86 <_dtoa_r+0x3ce>
 8005bac:	2502      	movs	r5, #2
 8005bae:	e76f      	b.n	8005a90 <_dtoa_r+0x3d8>
 8005bb0:	9b01      	ldr	r3, [sp, #4]
 8005bb2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8005bb8:	e78d      	b.n	8005ad6 <_dtoa_r+0x41e>
 8005bba:	9900      	ldr	r1, [sp, #0]
 8005bbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bc0:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <_dtoa_r+0x644>)
 8005bc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bc6:	4401      	add	r1, r0
 8005bc8:	9102      	str	r1, [sp, #8]
 8005bca:	9908      	ldr	r1, [sp, #32]
 8005bcc:	eeb0 8a47 	vmov.f32	s16, s14
 8005bd0:	eef0 8a67 	vmov.f32	s17, s15
 8005bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d045      	beq.n	8005c6c <_dtoa_r+0x5b4>
 8005be0:	494c      	ldr	r1, [pc, #304]	; (8005d14 <_dtoa_r+0x65c>)
 8005be2:	2000      	movs	r0, #0
 8005be4:	f7fa fe42 	bl	800086c <__aeabi_ddiv>
 8005be8:	ec53 2b18 	vmov	r2, r3, d8
 8005bec:	f7fa fb5c 	bl	80002a8 <__aeabi_dsub>
 8005bf0:	9d00      	ldr	r5, [sp, #0]
 8005bf2:	ec41 0b18 	vmov	d8, r0, r1
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f7fa ffbd 	bl	8000b78 <__aeabi_d2iz>
 8005bfe:	900c      	str	r0, [sp, #48]	; 0x30
 8005c00:	f7fa fca0 	bl	8000544 <__aeabi_i2d>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4630      	mov	r0, r6
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	f7fa fb4c 	bl	80002a8 <__aeabi_dsub>
 8005c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c12:	3330      	adds	r3, #48	; 0x30
 8005c14:	f805 3b01 	strb.w	r3, [r5], #1
 8005c18:	ec53 2b18 	vmov	r2, r3, d8
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	460f      	mov	r7, r1
 8005c20:	f7fa ff6c 	bl	8000afc <__aeabi_dcmplt>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d165      	bne.n	8005cf4 <_dtoa_r+0x63c>
 8005c28:	4632      	mov	r2, r6
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	4935      	ldr	r1, [pc, #212]	; (8005d04 <_dtoa_r+0x64c>)
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f7fa fb3a 	bl	80002a8 <__aeabi_dsub>
 8005c34:	ec53 2b18 	vmov	r2, r3, d8
 8005c38:	f7fa ff60 	bl	8000afc <__aeabi_dcmplt>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f040 80b9 	bne.w	8005db4 <_dtoa_r+0x6fc>
 8005c42:	9b02      	ldr	r3, [sp, #8]
 8005c44:	429d      	cmp	r5, r3
 8005c46:	f43f af75 	beq.w	8005b34 <_dtoa_r+0x47c>
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	; (8005d08 <_dtoa_r+0x650>)
 8005c4c:	ec51 0b18 	vmov	r0, r1, d8
 8005c50:	2200      	movs	r2, #0
 8005c52:	f7fa fce1 	bl	8000618 <__aeabi_dmul>
 8005c56:	4b2c      	ldr	r3, [pc, #176]	; (8005d08 <_dtoa_r+0x650>)
 8005c58:	ec41 0b18 	vmov	d8, r0, r1
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4630      	mov	r0, r6
 8005c60:	4639      	mov	r1, r7
 8005c62:	f7fa fcd9 	bl	8000618 <__aeabi_dmul>
 8005c66:	4606      	mov	r6, r0
 8005c68:	460f      	mov	r7, r1
 8005c6a:	e7c4      	b.n	8005bf6 <_dtoa_r+0x53e>
 8005c6c:	ec51 0b17 	vmov	r0, r1, d7
 8005c70:	f7fa fcd2 	bl	8000618 <__aeabi_dmul>
 8005c74:	9b02      	ldr	r3, [sp, #8]
 8005c76:	9d00      	ldr	r5, [sp, #0]
 8005c78:	930c      	str	r3, [sp, #48]	; 0x30
 8005c7a:	ec41 0b18 	vmov	d8, r0, r1
 8005c7e:	4639      	mov	r1, r7
 8005c80:	4630      	mov	r0, r6
 8005c82:	f7fa ff79 	bl	8000b78 <__aeabi_d2iz>
 8005c86:	9011      	str	r0, [sp, #68]	; 0x44
 8005c88:	f7fa fc5c 	bl	8000544 <__aeabi_i2d>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4630      	mov	r0, r6
 8005c92:	4639      	mov	r1, r7
 8005c94:	f7fa fb08 	bl	80002a8 <__aeabi_dsub>
 8005c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c9a:	3330      	adds	r3, #48	; 0x30
 8005c9c:	f805 3b01 	strb.w	r3, [r5], #1
 8005ca0:	9b02      	ldr	r3, [sp, #8]
 8005ca2:	429d      	cmp	r5, r3
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	460f      	mov	r7, r1
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	d134      	bne.n	8005d18 <_dtoa_r+0x660>
 8005cae:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <_dtoa_r+0x65c>)
 8005cb0:	ec51 0b18 	vmov	r0, r1, d8
 8005cb4:	f7fa fafa 	bl	80002ac <__adddf3>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	f7fa ff3a 	bl	8000b38 <__aeabi_dcmpgt>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	d175      	bne.n	8005db4 <_dtoa_r+0x6fc>
 8005cc8:	ec53 2b18 	vmov	r2, r3, d8
 8005ccc:	4911      	ldr	r1, [pc, #68]	; (8005d14 <_dtoa_r+0x65c>)
 8005cce:	2000      	movs	r0, #0
 8005cd0:	f7fa faea 	bl	80002a8 <__aeabi_dsub>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4630      	mov	r0, r6
 8005cda:	4639      	mov	r1, r7
 8005cdc:	f7fa ff0e 	bl	8000afc <__aeabi_dcmplt>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	f43f af27 	beq.w	8005b34 <_dtoa_r+0x47c>
 8005ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ce8:	1e6b      	subs	r3, r5, #1
 8005cea:	930c      	str	r3, [sp, #48]	; 0x30
 8005cec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d0f8      	beq.n	8005ce6 <_dtoa_r+0x62e>
 8005cf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005cf8:	e04a      	b.n	8005d90 <_dtoa_r+0x6d8>
 8005cfa:	bf00      	nop
 8005cfc:	08007b60 	.word	0x08007b60
 8005d00:	08007b38 	.word	0x08007b38
 8005d04:	3ff00000 	.word	0x3ff00000
 8005d08:	40240000 	.word	0x40240000
 8005d0c:	401c0000 	.word	0x401c0000
 8005d10:	40140000 	.word	0x40140000
 8005d14:	3fe00000 	.word	0x3fe00000
 8005d18:	4baf      	ldr	r3, [pc, #700]	; (8005fd8 <_dtoa_r+0x920>)
 8005d1a:	f7fa fc7d 	bl	8000618 <__aeabi_dmul>
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460f      	mov	r7, r1
 8005d22:	e7ac      	b.n	8005c7e <_dtoa_r+0x5c6>
 8005d24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d28:	9d00      	ldr	r5, [sp, #0]
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	4630      	mov	r0, r6
 8005d30:	4639      	mov	r1, r7
 8005d32:	f7fa fd9b 	bl	800086c <__aeabi_ddiv>
 8005d36:	f7fa ff1f 	bl	8000b78 <__aeabi_d2iz>
 8005d3a:	9002      	str	r0, [sp, #8]
 8005d3c:	f7fa fc02 	bl	8000544 <__aeabi_i2d>
 8005d40:	4642      	mov	r2, r8
 8005d42:	464b      	mov	r3, r9
 8005d44:	f7fa fc68 	bl	8000618 <__aeabi_dmul>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	4639      	mov	r1, r7
 8005d50:	f7fa faaa 	bl	80002a8 <__aeabi_dsub>
 8005d54:	9e02      	ldr	r6, [sp, #8]
 8005d56:	9f01      	ldr	r7, [sp, #4]
 8005d58:	3630      	adds	r6, #48	; 0x30
 8005d5a:	f805 6b01 	strb.w	r6, [r5], #1
 8005d5e:	9e00      	ldr	r6, [sp, #0]
 8005d60:	1bae      	subs	r6, r5, r6
 8005d62:	42b7      	cmp	r7, r6
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	d137      	bne.n	8005dda <_dtoa_r+0x722>
 8005d6a:	f7fa fa9f 	bl	80002ac <__adddf3>
 8005d6e:	4642      	mov	r2, r8
 8005d70:	464b      	mov	r3, r9
 8005d72:	4606      	mov	r6, r0
 8005d74:	460f      	mov	r7, r1
 8005d76:	f7fa fedf 	bl	8000b38 <__aeabi_dcmpgt>
 8005d7a:	b9c8      	cbnz	r0, 8005db0 <_dtoa_r+0x6f8>
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	464b      	mov	r3, r9
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	f7fa feb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d88:	b110      	cbz	r0, 8005d90 <_dtoa_r+0x6d8>
 8005d8a:	9b02      	ldr	r3, [sp, #8]
 8005d8c:	07d9      	lsls	r1, r3, #31
 8005d8e:	d40f      	bmi.n	8005db0 <_dtoa_r+0x6f8>
 8005d90:	4620      	mov	r0, r4
 8005d92:	4659      	mov	r1, fp
 8005d94:	f000 fad6 	bl	8006344 <_Bfree>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	702b      	strb	r3, [r5, #0]
 8005d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d9e:	f10a 0001 	add.w	r0, sl, #1
 8005da2:	6018      	str	r0, [r3, #0]
 8005da4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f43f acd8 	beq.w	800575c <_dtoa_r+0xa4>
 8005dac:	601d      	str	r5, [r3, #0]
 8005dae:	e4d5      	b.n	800575c <_dtoa_r+0xa4>
 8005db0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005db4:	462b      	mov	r3, r5
 8005db6:	461d      	mov	r5, r3
 8005db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dbc:	2a39      	cmp	r2, #57	; 0x39
 8005dbe:	d108      	bne.n	8005dd2 <_dtoa_r+0x71a>
 8005dc0:	9a00      	ldr	r2, [sp, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d1f7      	bne.n	8005db6 <_dtoa_r+0x6fe>
 8005dc6:	9a07      	ldr	r2, [sp, #28]
 8005dc8:	9900      	ldr	r1, [sp, #0]
 8005dca:	3201      	adds	r2, #1
 8005dcc:	9207      	str	r2, [sp, #28]
 8005dce:	2230      	movs	r2, #48	; 0x30
 8005dd0:	700a      	strb	r2, [r1, #0]
 8005dd2:	781a      	ldrb	r2, [r3, #0]
 8005dd4:	3201      	adds	r2, #1
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	e78c      	b.n	8005cf4 <_dtoa_r+0x63c>
 8005dda:	4b7f      	ldr	r3, [pc, #508]	; (8005fd8 <_dtoa_r+0x920>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f7fa fc1b 	bl	8000618 <__aeabi_dmul>
 8005de2:	2200      	movs	r2, #0
 8005de4:	2300      	movs	r3, #0
 8005de6:	4606      	mov	r6, r0
 8005de8:	460f      	mov	r7, r1
 8005dea:	f7fa fe7d 	bl	8000ae8 <__aeabi_dcmpeq>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d09b      	beq.n	8005d2a <_dtoa_r+0x672>
 8005df2:	e7cd      	b.n	8005d90 <_dtoa_r+0x6d8>
 8005df4:	9a08      	ldr	r2, [sp, #32]
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	f000 80c4 	beq.w	8005f84 <_dtoa_r+0x8cc>
 8005dfc:	9a05      	ldr	r2, [sp, #20]
 8005dfe:	2a01      	cmp	r2, #1
 8005e00:	f300 80a8 	bgt.w	8005f54 <_dtoa_r+0x89c>
 8005e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e06:	2a00      	cmp	r2, #0
 8005e08:	f000 80a0 	beq.w	8005f4c <_dtoa_r+0x894>
 8005e0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e10:	9e06      	ldr	r6, [sp, #24]
 8005e12:	4645      	mov	r5, r8
 8005e14:	9a04      	ldr	r2, [sp, #16]
 8005e16:	2101      	movs	r1, #1
 8005e18:	441a      	add	r2, r3
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	4498      	add	r8, r3
 8005e1e:	9204      	str	r2, [sp, #16]
 8005e20:	f000 fb4c 	bl	80064bc <__i2b>
 8005e24:	4607      	mov	r7, r0
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	dd0b      	ble.n	8005e42 <_dtoa_r+0x78a>
 8005e2a:	9b04      	ldr	r3, [sp, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	dd08      	ble.n	8005e42 <_dtoa_r+0x78a>
 8005e30:	42ab      	cmp	r3, r5
 8005e32:	9a04      	ldr	r2, [sp, #16]
 8005e34:	bfa8      	it	ge
 8005e36:	462b      	movge	r3, r5
 8005e38:	eba8 0803 	sub.w	r8, r8, r3
 8005e3c:	1aed      	subs	r5, r5, r3
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	9b06      	ldr	r3, [sp, #24]
 8005e44:	b1fb      	cbz	r3, 8005e86 <_dtoa_r+0x7ce>
 8005e46:	9b08      	ldr	r3, [sp, #32]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 809f 	beq.w	8005f8c <_dtoa_r+0x8d4>
 8005e4e:	2e00      	cmp	r6, #0
 8005e50:	dd11      	ble.n	8005e76 <_dtoa_r+0x7be>
 8005e52:	4639      	mov	r1, r7
 8005e54:	4632      	mov	r2, r6
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 fbec 	bl	8006634 <__pow5mult>
 8005e5c:	465a      	mov	r2, fp
 8005e5e:	4601      	mov	r1, r0
 8005e60:	4607      	mov	r7, r0
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 fb40 	bl	80064e8 <__multiply>
 8005e68:	4659      	mov	r1, fp
 8005e6a:	9007      	str	r0, [sp, #28]
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 fa69 	bl	8006344 <_Bfree>
 8005e72:	9b07      	ldr	r3, [sp, #28]
 8005e74:	469b      	mov	fp, r3
 8005e76:	9b06      	ldr	r3, [sp, #24]
 8005e78:	1b9a      	subs	r2, r3, r6
 8005e7a:	d004      	beq.n	8005e86 <_dtoa_r+0x7ce>
 8005e7c:	4659      	mov	r1, fp
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 fbd8 	bl	8006634 <__pow5mult>
 8005e84:	4683      	mov	fp, r0
 8005e86:	2101      	movs	r1, #1
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 fb17 	bl	80064bc <__i2b>
 8005e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	4606      	mov	r6, r0
 8005e94:	dd7c      	ble.n	8005f90 <_dtoa_r+0x8d8>
 8005e96:	461a      	mov	r2, r3
 8005e98:	4601      	mov	r1, r0
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 fbca 	bl	8006634 <__pow5mult>
 8005ea0:	9b05      	ldr	r3, [sp, #20]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	dd76      	ble.n	8005f96 <_dtoa_r+0x8de>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9306      	str	r3, [sp, #24]
 8005eac:	6933      	ldr	r3, [r6, #16]
 8005eae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005eb2:	6918      	ldr	r0, [r3, #16]
 8005eb4:	f000 fab2 	bl	800641c <__hi0bits>
 8005eb8:	f1c0 0020 	rsb	r0, r0, #32
 8005ebc:	9b04      	ldr	r3, [sp, #16]
 8005ebe:	4418      	add	r0, r3
 8005ec0:	f010 001f 	ands.w	r0, r0, #31
 8005ec4:	f000 8086 	beq.w	8005fd4 <_dtoa_r+0x91c>
 8005ec8:	f1c0 0320 	rsb	r3, r0, #32
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	dd7f      	ble.n	8005fd0 <_dtoa_r+0x918>
 8005ed0:	f1c0 001c 	rsb	r0, r0, #28
 8005ed4:	9b04      	ldr	r3, [sp, #16]
 8005ed6:	4403      	add	r3, r0
 8005ed8:	4480      	add	r8, r0
 8005eda:	4405      	add	r5, r0
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	f1b8 0f00 	cmp.w	r8, #0
 8005ee2:	dd05      	ble.n	8005ef0 <_dtoa_r+0x838>
 8005ee4:	4659      	mov	r1, fp
 8005ee6:	4642      	mov	r2, r8
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f000 fbfd 	bl	80066e8 <__lshift>
 8005eee:	4683      	mov	fp, r0
 8005ef0:	9b04      	ldr	r3, [sp, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	dd05      	ble.n	8005f02 <_dtoa_r+0x84a>
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4620      	mov	r0, r4
 8005efc:	f000 fbf4 	bl	80066e8 <__lshift>
 8005f00:	4606      	mov	r6, r0
 8005f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d069      	beq.n	8005fdc <_dtoa_r+0x924>
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4658      	mov	r0, fp
 8005f0c:	f000 fc58 	bl	80067c0 <__mcmp>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	da63      	bge.n	8005fdc <_dtoa_r+0x924>
 8005f14:	2300      	movs	r3, #0
 8005f16:	4659      	mov	r1, fp
 8005f18:	220a      	movs	r2, #10
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f000 fa34 	bl	8006388 <__multadd>
 8005f20:	9b08      	ldr	r3, [sp, #32]
 8005f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f26:	4683      	mov	fp, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 818f 	beq.w	800624c <_dtoa_r+0xb94>
 8005f2e:	4639      	mov	r1, r7
 8005f30:	2300      	movs	r3, #0
 8005f32:	220a      	movs	r2, #10
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 fa27 	bl	8006388 <__multadd>
 8005f3a:	f1b9 0f00 	cmp.w	r9, #0
 8005f3e:	4607      	mov	r7, r0
 8005f40:	f300 808e 	bgt.w	8006060 <_dtoa_r+0x9a8>
 8005f44:	9b05      	ldr	r3, [sp, #20]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	dc50      	bgt.n	8005fec <_dtoa_r+0x934>
 8005f4a:	e089      	b.n	8006060 <_dtoa_r+0x9a8>
 8005f4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f52:	e75d      	b.n	8005e10 <_dtoa_r+0x758>
 8005f54:	9b01      	ldr	r3, [sp, #4]
 8005f56:	1e5e      	subs	r6, r3, #1
 8005f58:	9b06      	ldr	r3, [sp, #24]
 8005f5a:	42b3      	cmp	r3, r6
 8005f5c:	bfbf      	itttt	lt
 8005f5e:	9b06      	ldrlt	r3, [sp, #24]
 8005f60:	9606      	strlt	r6, [sp, #24]
 8005f62:	1af2      	sublt	r2, r6, r3
 8005f64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005f66:	bfb6      	itet	lt
 8005f68:	189b      	addlt	r3, r3, r2
 8005f6a:	1b9e      	subge	r6, r3, r6
 8005f6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005f6e:	9b01      	ldr	r3, [sp, #4]
 8005f70:	bfb8      	it	lt
 8005f72:	2600      	movlt	r6, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bfb5      	itete	lt
 8005f78:	eba8 0503 	sublt.w	r5, r8, r3
 8005f7c:	9b01      	ldrge	r3, [sp, #4]
 8005f7e:	2300      	movlt	r3, #0
 8005f80:	4645      	movge	r5, r8
 8005f82:	e747      	b.n	8005e14 <_dtoa_r+0x75c>
 8005f84:	9e06      	ldr	r6, [sp, #24]
 8005f86:	9f08      	ldr	r7, [sp, #32]
 8005f88:	4645      	mov	r5, r8
 8005f8a:	e74c      	b.n	8005e26 <_dtoa_r+0x76e>
 8005f8c:	9a06      	ldr	r2, [sp, #24]
 8005f8e:	e775      	b.n	8005e7c <_dtoa_r+0x7c4>
 8005f90:	9b05      	ldr	r3, [sp, #20]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	dc18      	bgt.n	8005fc8 <_dtoa_r+0x910>
 8005f96:	9b02      	ldr	r3, [sp, #8]
 8005f98:	b9b3      	cbnz	r3, 8005fc8 <_dtoa_r+0x910>
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fa0:	b9a3      	cbnz	r3, 8005fcc <_dtoa_r+0x914>
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fa8:	0d1b      	lsrs	r3, r3, #20
 8005faa:	051b      	lsls	r3, r3, #20
 8005fac:	b12b      	cbz	r3, 8005fba <_dtoa_r+0x902>
 8005fae:	9b04      	ldr	r3, [sp, #16]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	9304      	str	r3, [sp, #16]
 8005fb4:	f108 0801 	add.w	r8, r8, #1
 8005fb8:	2301      	movs	r3, #1
 8005fba:	9306      	str	r3, [sp, #24]
 8005fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f47f af74 	bne.w	8005eac <_dtoa_r+0x7f4>
 8005fc4:	2001      	movs	r0, #1
 8005fc6:	e779      	b.n	8005ebc <_dtoa_r+0x804>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e7f6      	b.n	8005fba <_dtoa_r+0x902>
 8005fcc:	9b02      	ldr	r3, [sp, #8]
 8005fce:	e7f4      	b.n	8005fba <_dtoa_r+0x902>
 8005fd0:	d085      	beq.n	8005ede <_dtoa_r+0x826>
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	301c      	adds	r0, #28
 8005fd6:	e77d      	b.n	8005ed4 <_dtoa_r+0x81c>
 8005fd8:	40240000 	.word	0x40240000
 8005fdc:	9b01      	ldr	r3, [sp, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	dc38      	bgt.n	8006054 <_dtoa_r+0x99c>
 8005fe2:	9b05      	ldr	r3, [sp, #20]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	dd35      	ble.n	8006054 <_dtoa_r+0x99c>
 8005fe8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005fec:	f1b9 0f00 	cmp.w	r9, #0
 8005ff0:	d10d      	bne.n	800600e <_dtoa_r+0x956>
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	464b      	mov	r3, r9
 8005ff6:	2205      	movs	r2, #5
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 f9c5 	bl	8006388 <__multadd>
 8005ffe:	4601      	mov	r1, r0
 8006000:	4606      	mov	r6, r0
 8006002:	4658      	mov	r0, fp
 8006004:	f000 fbdc 	bl	80067c0 <__mcmp>
 8006008:	2800      	cmp	r0, #0
 800600a:	f73f adbd 	bgt.w	8005b88 <_dtoa_r+0x4d0>
 800600e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006010:	9d00      	ldr	r5, [sp, #0]
 8006012:	ea6f 0a03 	mvn.w	sl, r3
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	4631      	mov	r1, r6
 800601c:	4620      	mov	r0, r4
 800601e:	f000 f991 	bl	8006344 <_Bfree>
 8006022:	2f00      	cmp	r7, #0
 8006024:	f43f aeb4 	beq.w	8005d90 <_dtoa_r+0x6d8>
 8006028:	f1b8 0f00 	cmp.w	r8, #0
 800602c:	d005      	beq.n	800603a <_dtoa_r+0x982>
 800602e:	45b8      	cmp	r8, r7
 8006030:	d003      	beq.n	800603a <_dtoa_r+0x982>
 8006032:	4641      	mov	r1, r8
 8006034:	4620      	mov	r0, r4
 8006036:	f000 f985 	bl	8006344 <_Bfree>
 800603a:	4639      	mov	r1, r7
 800603c:	4620      	mov	r0, r4
 800603e:	f000 f981 	bl	8006344 <_Bfree>
 8006042:	e6a5      	b.n	8005d90 <_dtoa_r+0x6d8>
 8006044:	2600      	movs	r6, #0
 8006046:	4637      	mov	r7, r6
 8006048:	e7e1      	b.n	800600e <_dtoa_r+0x956>
 800604a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800604c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006050:	4637      	mov	r7, r6
 8006052:	e599      	b.n	8005b88 <_dtoa_r+0x4d0>
 8006054:	9b08      	ldr	r3, [sp, #32]
 8006056:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80fd 	beq.w	800625a <_dtoa_r+0xba2>
 8006060:	2d00      	cmp	r5, #0
 8006062:	dd05      	ble.n	8006070 <_dtoa_r+0x9b8>
 8006064:	4639      	mov	r1, r7
 8006066:	462a      	mov	r2, r5
 8006068:	4620      	mov	r0, r4
 800606a:	f000 fb3d 	bl	80066e8 <__lshift>
 800606e:	4607      	mov	r7, r0
 8006070:	9b06      	ldr	r3, [sp, #24]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d05c      	beq.n	8006130 <_dtoa_r+0xa78>
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4620      	mov	r0, r4
 800607a:	f000 f923 	bl	80062c4 <_Balloc>
 800607e:	4605      	mov	r5, r0
 8006080:	b928      	cbnz	r0, 800608e <_dtoa_r+0x9d6>
 8006082:	4b80      	ldr	r3, [pc, #512]	; (8006284 <_dtoa_r+0xbcc>)
 8006084:	4602      	mov	r2, r0
 8006086:	f240 21ea 	movw	r1, #746	; 0x2ea
 800608a:	f7ff bb2e 	b.w	80056ea <_dtoa_r+0x32>
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	3202      	adds	r2, #2
 8006092:	0092      	lsls	r2, r2, #2
 8006094:	f107 010c 	add.w	r1, r7, #12
 8006098:	300c      	adds	r0, #12
 800609a:	f000 f905 	bl	80062a8 <memcpy>
 800609e:	2201      	movs	r2, #1
 80060a0:	4629      	mov	r1, r5
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 fb20 	bl	80066e8 <__lshift>
 80060a8:	9b00      	ldr	r3, [sp, #0]
 80060aa:	3301      	adds	r3, #1
 80060ac:	9301      	str	r3, [sp, #4]
 80060ae:	9b00      	ldr	r3, [sp, #0]
 80060b0:	444b      	add	r3, r9
 80060b2:	9307      	str	r3, [sp, #28]
 80060b4:	9b02      	ldr	r3, [sp, #8]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	46b8      	mov	r8, r7
 80060bc:	9306      	str	r3, [sp, #24]
 80060be:	4607      	mov	r7, r0
 80060c0:	9b01      	ldr	r3, [sp, #4]
 80060c2:	4631      	mov	r1, r6
 80060c4:	3b01      	subs	r3, #1
 80060c6:	4658      	mov	r0, fp
 80060c8:	9302      	str	r3, [sp, #8]
 80060ca:	f7ff fa6a 	bl	80055a2 <quorem>
 80060ce:	4603      	mov	r3, r0
 80060d0:	3330      	adds	r3, #48	; 0x30
 80060d2:	9004      	str	r0, [sp, #16]
 80060d4:	4641      	mov	r1, r8
 80060d6:	4658      	mov	r0, fp
 80060d8:	9308      	str	r3, [sp, #32]
 80060da:	f000 fb71 	bl	80067c0 <__mcmp>
 80060de:	463a      	mov	r2, r7
 80060e0:	4681      	mov	r9, r0
 80060e2:	4631      	mov	r1, r6
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 fb87 	bl	80067f8 <__mdiff>
 80060ea:	68c2      	ldr	r2, [r0, #12]
 80060ec:	9b08      	ldr	r3, [sp, #32]
 80060ee:	4605      	mov	r5, r0
 80060f0:	bb02      	cbnz	r2, 8006134 <_dtoa_r+0xa7c>
 80060f2:	4601      	mov	r1, r0
 80060f4:	4658      	mov	r0, fp
 80060f6:	f000 fb63 	bl	80067c0 <__mcmp>
 80060fa:	9b08      	ldr	r3, [sp, #32]
 80060fc:	4602      	mov	r2, r0
 80060fe:	4629      	mov	r1, r5
 8006100:	4620      	mov	r0, r4
 8006102:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006106:	f000 f91d 	bl	8006344 <_Bfree>
 800610a:	9b05      	ldr	r3, [sp, #20]
 800610c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800610e:	9d01      	ldr	r5, [sp, #4]
 8006110:	ea43 0102 	orr.w	r1, r3, r2
 8006114:	9b06      	ldr	r3, [sp, #24]
 8006116:	430b      	orrs	r3, r1
 8006118:	9b08      	ldr	r3, [sp, #32]
 800611a:	d10d      	bne.n	8006138 <_dtoa_r+0xa80>
 800611c:	2b39      	cmp	r3, #57	; 0x39
 800611e:	d029      	beq.n	8006174 <_dtoa_r+0xabc>
 8006120:	f1b9 0f00 	cmp.w	r9, #0
 8006124:	dd01      	ble.n	800612a <_dtoa_r+0xa72>
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	3331      	adds	r3, #49	; 0x31
 800612a:	9a02      	ldr	r2, [sp, #8]
 800612c:	7013      	strb	r3, [r2, #0]
 800612e:	e774      	b.n	800601a <_dtoa_r+0x962>
 8006130:	4638      	mov	r0, r7
 8006132:	e7b9      	b.n	80060a8 <_dtoa_r+0x9f0>
 8006134:	2201      	movs	r2, #1
 8006136:	e7e2      	b.n	80060fe <_dtoa_r+0xa46>
 8006138:	f1b9 0f00 	cmp.w	r9, #0
 800613c:	db06      	blt.n	800614c <_dtoa_r+0xa94>
 800613e:	9905      	ldr	r1, [sp, #20]
 8006140:	ea41 0909 	orr.w	r9, r1, r9
 8006144:	9906      	ldr	r1, [sp, #24]
 8006146:	ea59 0101 	orrs.w	r1, r9, r1
 800614a:	d120      	bne.n	800618e <_dtoa_r+0xad6>
 800614c:	2a00      	cmp	r2, #0
 800614e:	ddec      	ble.n	800612a <_dtoa_r+0xa72>
 8006150:	4659      	mov	r1, fp
 8006152:	2201      	movs	r2, #1
 8006154:	4620      	mov	r0, r4
 8006156:	9301      	str	r3, [sp, #4]
 8006158:	f000 fac6 	bl	80066e8 <__lshift>
 800615c:	4631      	mov	r1, r6
 800615e:	4683      	mov	fp, r0
 8006160:	f000 fb2e 	bl	80067c0 <__mcmp>
 8006164:	2800      	cmp	r0, #0
 8006166:	9b01      	ldr	r3, [sp, #4]
 8006168:	dc02      	bgt.n	8006170 <_dtoa_r+0xab8>
 800616a:	d1de      	bne.n	800612a <_dtoa_r+0xa72>
 800616c:	07da      	lsls	r2, r3, #31
 800616e:	d5dc      	bpl.n	800612a <_dtoa_r+0xa72>
 8006170:	2b39      	cmp	r3, #57	; 0x39
 8006172:	d1d8      	bne.n	8006126 <_dtoa_r+0xa6e>
 8006174:	9a02      	ldr	r2, [sp, #8]
 8006176:	2339      	movs	r3, #57	; 0x39
 8006178:	7013      	strb	r3, [r2, #0]
 800617a:	462b      	mov	r3, r5
 800617c:	461d      	mov	r5, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006184:	2a39      	cmp	r2, #57	; 0x39
 8006186:	d050      	beq.n	800622a <_dtoa_r+0xb72>
 8006188:	3201      	adds	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	e745      	b.n	800601a <_dtoa_r+0x962>
 800618e:	2a00      	cmp	r2, #0
 8006190:	dd03      	ble.n	800619a <_dtoa_r+0xae2>
 8006192:	2b39      	cmp	r3, #57	; 0x39
 8006194:	d0ee      	beq.n	8006174 <_dtoa_r+0xabc>
 8006196:	3301      	adds	r3, #1
 8006198:	e7c7      	b.n	800612a <_dtoa_r+0xa72>
 800619a:	9a01      	ldr	r2, [sp, #4]
 800619c:	9907      	ldr	r1, [sp, #28]
 800619e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061a2:	428a      	cmp	r2, r1
 80061a4:	d02a      	beq.n	80061fc <_dtoa_r+0xb44>
 80061a6:	4659      	mov	r1, fp
 80061a8:	2300      	movs	r3, #0
 80061aa:	220a      	movs	r2, #10
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 f8eb 	bl	8006388 <__multadd>
 80061b2:	45b8      	cmp	r8, r7
 80061b4:	4683      	mov	fp, r0
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	f04f 020a 	mov.w	r2, #10
 80061be:	4641      	mov	r1, r8
 80061c0:	4620      	mov	r0, r4
 80061c2:	d107      	bne.n	80061d4 <_dtoa_r+0xb1c>
 80061c4:	f000 f8e0 	bl	8006388 <__multadd>
 80061c8:	4680      	mov	r8, r0
 80061ca:	4607      	mov	r7, r0
 80061cc:	9b01      	ldr	r3, [sp, #4]
 80061ce:	3301      	adds	r3, #1
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	e775      	b.n	80060c0 <_dtoa_r+0xa08>
 80061d4:	f000 f8d8 	bl	8006388 <__multadd>
 80061d8:	4639      	mov	r1, r7
 80061da:	4680      	mov	r8, r0
 80061dc:	2300      	movs	r3, #0
 80061de:	220a      	movs	r2, #10
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 f8d1 	bl	8006388 <__multadd>
 80061e6:	4607      	mov	r7, r0
 80061e8:	e7f0      	b.n	80061cc <_dtoa_r+0xb14>
 80061ea:	f1b9 0f00 	cmp.w	r9, #0
 80061ee:	9a00      	ldr	r2, [sp, #0]
 80061f0:	bfcc      	ite	gt
 80061f2:	464d      	movgt	r5, r9
 80061f4:	2501      	movle	r5, #1
 80061f6:	4415      	add	r5, r2
 80061f8:	f04f 0800 	mov.w	r8, #0
 80061fc:	4659      	mov	r1, fp
 80061fe:	2201      	movs	r2, #1
 8006200:	4620      	mov	r0, r4
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	f000 fa70 	bl	80066e8 <__lshift>
 8006208:	4631      	mov	r1, r6
 800620a:	4683      	mov	fp, r0
 800620c:	f000 fad8 	bl	80067c0 <__mcmp>
 8006210:	2800      	cmp	r0, #0
 8006212:	dcb2      	bgt.n	800617a <_dtoa_r+0xac2>
 8006214:	d102      	bne.n	800621c <_dtoa_r+0xb64>
 8006216:	9b01      	ldr	r3, [sp, #4]
 8006218:	07db      	lsls	r3, r3, #31
 800621a:	d4ae      	bmi.n	800617a <_dtoa_r+0xac2>
 800621c:	462b      	mov	r3, r5
 800621e:	461d      	mov	r5, r3
 8006220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006224:	2a30      	cmp	r2, #48	; 0x30
 8006226:	d0fa      	beq.n	800621e <_dtoa_r+0xb66>
 8006228:	e6f7      	b.n	800601a <_dtoa_r+0x962>
 800622a:	9a00      	ldr	r2, [sp, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d1a5      	bne.n	800617c <_dtoa_r+0xac4>
 8006230:	f10a 0a01 	add.w	sl, sl, #1
 8006234:	2331      	movs	r3, #49	; 0x31
 8006236:	e779      	b.n	800612c <_dtoa_r+0xa74>
 8006238:	4b13      	ldr	r3, [pc, #76]	; (8006288 <_dtoa_r+0xbd0>)
 800623a:	f7ff baaf 	b.w	800579c <_dtoa_r+0xe4>
 800623e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006240:	2b00      	cmp	r3, #0
 8006242:	f47f aa86 	bne.w	8005752 <_dtoa_r+0x9a>
 8006246:	4b11      	ldr	r3, [pc, #68]	; (800628c <_dtoa_r+0xbd4>)
 8006248:	f7ff baa8 	b.w	800579c <_dtoa_r+0xe4>
 800624c:	f1b9 0f00 	cmp.w	r9, #0
 8006250:	dc03      	bgt.n	800625a <_dtoa_r+0xba2>
 8006252:	9b05      	ldr	r3, [sp, #20]
 8006254:	2b02      	cmp	r3, #2
 8006256:	f73f aec9 	bgt.w	8005fec <_dtoa_r+0x934>
 800625a:	9d00      	ldr	r5, [sp, #0]
 800625c:	4631      	mov	r1, r6
 800625e:	4658      	mov	r0, fp
 8006260:	f7ff f99f 	bl	80055a2 <quorem>
 8006264:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006268:	f805 3b01 	strb.w	r3, [r5], #1
 800626c:	9a00      	ldr	r2, [sp, #0]
 800626e:	1aaa      	subs	r2, r5, r2
 8006270:	4591      	cmp	r9, r2
 8006272:	ddba      	ble.n	80061ea <_dtoa_r+0xb32>
 8006274:	4659      	mov	r1, fp
 8006276:	2300      	movs	r3, #0
 8006278:	220a      	movs	r2, #10
 800627a:	4620      	mov	r0, r4
 800627c:	f000 f884 	bl	8006388 <__multadd>
 8006280:	4683      	mov	fp, r0
 8006282:	e7eb      	b.n	800625c <_dtoa_r+0xba4>
 8006284:	08007ac7 	.word	0x08007ac7
 8006288:	08007a20 	.word	0x08007a20
 800628c:	08007a44 	.word	0x08007a44

08006290 <_localeconv_r>:
 8006290:	4800      	ldr	r0, [pc, #0]	; (8006294 <_localeconv_r+0x4>)
 8006292:	4770      	bx	lr
 8006294:	20000160 	.word	0x20000160

08006298 <malloc>:
 8006298:	4b02      	ldr	r3, [pc, #8]	; (80062a4 <malloc+0xc>)
 800629a:	4601      	mov	r1, r0
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	f000 bbef 	b.w	8006a80 <_malloc_r>
 80062a2:	bf00      	nop
 80062a4:	2000000c 	.word	0x2000000c

080062a8 <memcpy>:
 80062a8:	440a      	add	r2, r1
 80062aa:	4291      	cmp	r1, r2
 80062ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80062b0:	d100      	bne.n	80062b4 <memcpy+0xc>
 80062b2:	4770      	bx	lr
 80062b4:	b510      	push	{r4, lr}
 80062b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062be:	4291      	cmp	r1, r2
 80062c0:	d1f9      	bne.n	80062b6 <memcpy+0xe>
 80062c2:	bd10      	pop	{r4, pc}

080062c4 <_Balloc>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062c8:	4604      	mov	r4, r0
 80062ca:	460d      	mov	r5, r1
 80062cc:	b976      	cbnz	r6, 80062ec <_Balloc+0x28>
 80062ce:	2010      	movs	r0, #16
 80062d0:	f7ff ffe2 	bl	8006298 <malloc>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6260      	str	r0, [r4, #36]	; 0x24
 80062d8:	b920      	cbnz	r0, 80062e4 <_Balloc+0x20>
 80062da:	4b18      	ldr	r3, [pc, #96]	; (800633c <_Balloc+0x78>)
 80062dc:	4818      	ldr	r0, [pc, #96]	; (8006340 <_Balloc+0x7c>)
 80062de:	2166      	movs	r1, #102	; 0x66
 80062e0:	f000 fd94 	bl	8006e0c <__assert_func>
 80062e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062e8:	6006      	str	r6, [r0, #0]
 80062ea:	60c6      	str	r6, [r0, #12]
 80062ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062ee:	68f3      	ldr	r3, [r6, #12]
 80062f0:	b183      	cbz	r3, 8006314 <_Balloc+0x50>
 80062f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062fa:	b9b8      	cbnz	r0, 800632c <_Balloc+0x68>
 80062fc:	2101      	movs	r1, #1
 80062fe:	fa01 f605 	lsl.w	r6, r1, r5
 8006302:	1d72      	adds	r2, r6, #5
 8006304:	0092      	lsls	r2, r2, #2
 8006306:	4620      	mov	r0, r4
 8006308:	f000 fb5a 	bl	80069c0 <_calloc_r>
 800630c:	b160      	cbz	r0, 8006328 <_Balloc+0x64>
 800630e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006312:	e00e      	b.n	8006332 <_Balloc+0x6e>
 8006314:	2221      	movs	r2, #33	; 0x21
 8006316:	2104      	movs	r1, #4
 8006318:	4620      	mov	r0, r4
 800631a:	f000 fb51 	bl	80069c0 <_calloc_r>
 800631e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006320:	60f0      	str	r0, [r6, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e4      	bne.n	80062f2 <_Balloc+0x2e>
 8006328:	2000      	movs	r0, #0
 800632a:	bd70      	pop	{r4, r5, r6, pc}
 800632c:	6802      	ldr	r2, [r0, #0]
 800632e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006332:	2300      	movs	r3, #0
 8006334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006338:	e7f7      	b.n	800632a <_Balloc+0x66>
 800633a:	bf00      	nop
 800633c:	08007a51 	.word	0x08007a51
 8006340:	08007ad8 	.word	0x08007ad8

08006344 <_Bfree>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006348:	4605      	mov	r5, r0
 800634a:	460c      	mov	r4, r1
 800634c:	b976      	cbnz	r6, 800636c <_Bfree+0x28>
 800634e:	2010      	movs	r0, #16
 8006350:	f7ff ffa2 	bl	8006298 <malloc>
 8006354:	4602      	mov	r2, r0
 8006356:	6268      	str	r0, [r5, #36]	; 0x24
 8006358:	b920      	cbnz	r0, 8006364 <_Bfree+0x20>
 800635a:	4b09      	ldr	r3, [pc, #36]	; (8006380 <_Bfree+0x3c>)
 800635c:	4809      	ldr	r0, [pc, #36]	; (8006384 <_Bfree+0x40>)
 800635e:	218a      	movs	r1, #138	; 0x8a
 8006360:	f000 fd54 	bl	8006e0c <__assert_func>
 8006364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006368:	6006      	str	r6, [r0, #0]
 800636a:	60c6      	str	r6, [r0, #12]
 800636c:	b13c      	cbz	r4, 800637e <_Bfree+0x3a>
 800636e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006370:	6862      	ldr	r2, [r4, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006378:	6021      	str	r1, [r4, #0]
 800637a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	08007a51 	.word	0x08007a51
 8006384:	08007ad8 	.word	0x08007ad8

08006388 <__multadd>:
 8006388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638c:	690e      	ldr	r6, [r1, #16]
 800638e:	4607      	mov	r7, r0
 8006390:	4698      	mov	r8, r3
 8006392:	460c      	mov	r4, r1
 8006394:	f101 0014 	add.w	r0, r1, #20
 8006398:	2300      	movs	r3, #0
 800639a:	6805      	ldr	r5, [r0, #0]
 800639c:	b2a9      	uxth	r1, r5
 800639e:	fb02 8101 	mla	r1, r2, r1, r8
 80063a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80063a6:	0c2d      	lsrs	r5, r5, #16
 80063a8:	fb02 c505 	mla	r5, r2, r5, ip
 80063ac:	b289      	uxth	r1, r1
 80063ae:	3301      	adds	r3, #1
 80063b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80063b4:	429e      	cmp	r6, r3
 80063b6:	f840 1b04 	str.w	r1, [r0], #4
 80063ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80063be:	dcec      	bgt.n	800639a <__multadd+0x12>
 80063c0:	f1b8 0f00 	cmp.w	r8, #0
 80063c4:	d022      	beq.n	800640c <__multadd+0x84>
 80063c6:	68a3      	ldr	r3, [r4, #8]
 80063c8:	42b3      	cmp	r3, r6
 80063ca:	dc19      	bgt.n	8006400 <__multadd+0x78>
 80063cc:	6861      	ldr	r1, [r4, #4]
 80063ce:	4638      	mov	r0, r7
 80063d0:	3101      	adds	r1, #1
 80063d2:	f7ff ff77 	bl	80062c4 <_Balloc>
 80063d6:	4605      	mov	r5, r0
 80063d8:	b928      	cbnz	r0, 80063e6 <__multadd+0x5e>
 80063da:	4602      	mov	r2, r0
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <__multadd+0x8c>)
 80063de:	480e      	ldr	r0, [pc, #56]	; (8006418 <__multadd+0x90>)
 80063e0:	21b5      	movs	r1, #181	; 0xb5
 80063e2:	f000 fd13 	bl	8006e0c <__assert_func>
 80063e6:	6922      	ldr	r2, [r4, #16]
 80063e8:	3202      	adds	r2, #2
 80063ea:	f104 010c 	add.w	r1, r4, #12
 80063ee:	0092      	lsls	r2, r2, #2
 80063f0:	300c      	adds	r0, #12
 80063f2:	f7ff ff59 	bl	80062a8 <memcpy>
 80063f6:	4621      	mov	r1, r4
 80063f8:	4638      	mov	r0, r7
 80063fa:	f7ff ffa3 	bl	8006344 <_Bfree>
 80063fe:	462c      	mov	r4, r5
 8006400:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006404:	3601      	adds	r6, #1
 8006406:	f8c3 8014 	str.w	r8, [r3, #20]
 800640a:	6126      	str	r6, [r4, #16]
 800640c:	4620      	mov	r0, r4
 800640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006412:	bf00      	nop
 8006414:	08007ac7 	.word	0x08007ac7
 8006418:	08007ad8 	.word	0x08007ad8

0800641c <__hi0bits>:
 800641c:	0c03      	lsrs	r3, r0, #16
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	b9d3      	cbnz	r3, 8006458 <__hi0bits+0x3c>
 8006422:	0400      	lsls	r0, r0, #16
 8006424:	2310      	movs	r3, #16
 8006426:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800642a:	bf04      	itt	eq
 800642c:	0200      	lsleq	r0, r0, #8
 800642e:	3308      	addeq	r3, #8
 8006430:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006434:	bf04      	itt	eq
 8006436:	0100      	lsleq	r0, r0, #4
 8006438:	3304      	addeq	r3, #4
 800643a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800643e:	bf04      	itt	eq
 8006440:	0080      	lsleq	r0, r0, #2
 8006442:	3302      	addeq	r3, #2
 8006444:	2800      	cmp	r0, #0
 8006446:	db05      	blt.n	8006454 <__hi0bits+0x38>
 8006448:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800644c:	f103 0301 	add.w	r3, r3, #1
 8006450:	bf08      	it	eq
 8006452:	2320      	moveq	r3, #32
 8006454:	4618      	mov	r0, r3
 8006456:	4770      	bx	lr
 8006458:	2300      	movs	r3, #0
 800645a:	e7e4      	b.n	8006426 <__hi0bits+0xa>

0800645c <__lo0bits>:
 800645c:	6803      	ldr	r3, [r0, #0]
 800645e:	f013 0207 	ands.w	r2, r3, #7
 8006462:	4601      	mov	r1, r0
 8006464:	d00b      	beq.n	800647e <__lo0bits+0x22>
 8006466:	07da      	lsls	r2, r3, #31
 8006468:	d424      	bmi.n	80064b4 <__lo0bits+0x58>
 800646a:	0798      	lsls	r0, r3, #30
 800646c:	bf49      	itett	mi
 800646e:	085b      	lsrmi	r3, r3, #1
 8006470:	089b      	lsrpl	r3, r3, #2
 8006472:	2001      	movmi	r0, #1
 8006474:	600b      	strmi	r3, [r1, #0]
 8006476:	bf5c      	itt	pl
 8006478:	600b      	strpl	r3, [r1, #0]
 800647a:	2002      	movpl	r0, #2
 800647c:	4770      	bx	lr
 800647e:	b298      	uxth	r0, r3
 8006480:	b9b0      	cbnz	r0, 80064b0 <__lo0bits+0x54>
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	2010      	movs	r0, #16
 8006486:	f013 0fff 	tst.w	r3, #255	; 0xff
 800648a:	bf04      	itt	eq
 800648c:	0a1b      	lsreq	r3, r3, #8
 800648e:	3008      	addeq	r0, #8
 8006490:	071a      	lsls	r2, r3, #28
 8006492:	bf04      	itt	eq
 8006494:	091b      	lsreq	r3, r3, #4
 8006496:	3004      	addeq	r0, #4
 8006498:	079a      	lsls	r2, r3, #30
 800649a:	bf04      	itt	eq
 800649c:	089b      	lsreq	r3, r3, #2
 800649e:	3002      	addeq	r0, #2
 80064a0:	07da      	lsls	r2, r3, #31
 80064a2:	d403      	bmi.n	80064ac <__lo0bits+0x50>
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	f100 0001 	add.w	r0, r0, #1
 80064aa:	d005      	beq.n	80064b8 <__lo0bits+0x5c>
 80064ac:	600b      	str	r3, [r1, #0]
 80064ae:	4770      	bx	lr
 80064b0:	4610      	mov	r0, r2
 80064b2:	e7e8      	b.n	8006486 <__lo0bits+0x2a>
 80064b4:	2000      	movs	r0, #0
 80064b6:	4770      	bx	lr
 80064b8:	2020      	movs	r0, #32
 80064ba:	4770      	bx	lr

080064bc <__i2b>:
 80064bc:	b510      	push	{r4, lr}
 80064be:	460c      	mov	r4, r1
 80064c0:	2101      	movs	r1, #1
 80064c2:	f7ff feff 	bl	80062c4 <_Balloc>
 80064c6:	4602      	mov	r2, r0
 80064c8:	b928      	cbnz	r0, 80064d6 <__i2b+0x1a>
 80064ca:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <__i2b+0x24>)
 80064cc:	4805      	ldr	r0, [pc, #20]	; (80064e4 <__i2b+0x28>)
 80064ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80064d2:	f000 fc9b 	bl	8006e0c <__assert_func>
 80064d6:	2301      	movs	r3, #1
 80064d8:	6144      	str	r4, [r0, #20]
 80064da:	6103      	str	r3, [r0, #16]
 80064dc:	bd10      	pop	{r4, pc}
 80064de:	bf00      	nop
 80064e0:	08007ac7 	.word	0x08007ac7
 80064e4:	08007ad8 	.word	0x08007ad8

080064e8 <__multiply>:
 80064e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	4614      	mov	r4, r2
 80064ee:	690a      	ldr	r2, [r1, #16]
 80064f0:	6923      	ldr	r3, [r4, #16]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	bfb8      	it	lt
 80064f6:	460b      	movlt	r3, r1
 80064f8:	460d      	mov	r5, r1
 80064fa:	bfbc      	itt	lt
 80064fc:	4625      	movlt	r5, r4
 80064fe:	461c      	movlt	r4, r3
 8006500:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006504:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006508:	68ab      	ldr	r3, [r5, #8]
 800650a:	6869      	ldr	r1, [r5, #4]
 800650c:	eb0a 0709 	add.w	r7, sl, r9
 8006510:	42bb      	cmp	r3, r7
 8006512:	b085      	sub	sp, #20
 8006514:	bfb8      	it	lt
 8006516:	3101      	addlt	r1, #1
 8006518:	f7ff fed4 	bl	80062c4 <_Balloc>
 800651c:	b930      	cbnz	r0, 800652c <__multiply+0x44>
 800651e:	4602      	mov	r2, r0
 8006520:	4b42      	ldr	r3, [pc, #264]	; (800662c <__multiply+0x144>)
 8006522:	4843      	ldr	r0, [pc, #268]	; (8006630 <__multiply+0x148>)
 8006524:	f240 115d 	movw	r1, #349	; 0x15d
 8006528:	f000 fc70 	bl	8006e0c <__assert_func>
 800652c:	f100 0614 	add.w	r6, r0, #20
 8006530:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006534:	4633      	mov	r3, r6
 8006536:	2200      	movs	r2, #0
 8006538:	4543      	cmp	r3, r8
 800653a:	d31e      	bcc.n	800657a <__multiply+0x92>
 800653c:	f105 0c14 	add.w	ip, r5, #20
 8006540:	f104 0314 	add.w	r3, r4, #20
 8006544:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006548:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800654c:	9202      	str	r2, [sp, #8]
 800654e:	ebac 0205 	sub.w	r2, ip, r5
 8006552:	3a15      	subs	r2, #21
 8006554:	f022 0203 	bic.w	r2, r2, #3
 8006558:	3204      	adds	r2, #4
 800655a:	f105 0115 	add.w	r1, r5, #21
 800655e:	458c      	cmp	ip, r1
 8006560:	bf38      	it	cc
 8006562:	2204      	movcc	r2, #4
 8006564:	9201      	str	r2, [sp, #4]
 8006566:	9a02      	ldr	r2, [sp, #8]
 8006568:	9303      	str	r3, [sp, #12]
 800656a:	429a      	cmp	r2, r3
 800656c:	d808      	bhi.n	8006580 <__multiply+0x98>
 800656e:	2f00      	cmp	r7, #0
 8006570:	dc55      	bgt.n	800661e <__multiply+0x136>
 8006572:	6107      	str	r7, [r0, #16]
 8006574:	b005      	add	sp, #20
 8006576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657a:	f843 2b04 	str.w	r2, [r3], #4
 800657e:	e7db      	b.n	8006538 <__multiply+0x50>
 8006580:	f8b3 a000 	ldrh.w	sl, [r3]
 8006584:	f1ba 0f00 	cmp.w	sl, #0
 8006588:	d020      	beq.n	80065cc <__multiply+0xe4>
 800658a:	f105 0e14 	add.w	lr, r5, #20
 800658e:	46b1      	mov	r9, r6
 8006590:	2200      	movs	r2, #0
 8006592:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006596:	f8d9 b000 	ldr.w	fp, [r9]
 800659a:	b2a1      	uxth	r1, r4
 800659c:	fa1f fb8b 	uxth.w	fp, fp
 80065a0:	fb0a b101 	mla	r1, sl, r1, fp
 80065a4:	4411      	add	r1, r2
 80065a6:	f8d9 2000 	ldr.w	r2, [r9]
 80065aa:	0c24      	lsrs	r4, r4, #16
 80065ac:	0c12      	lsrs	r2, r2, #16
 80065ae:	fb0a 2404 	mla	r4, sl, r4, r2
 80065b2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80065b6:	b289      	uxth	r1, r1
 80065b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80065bc:	45f4      	cmp	ip, lr
 80065be:	f849 1b04 	str.w	r1, [r9], #4
 80065c2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80065c6:	d8e4      	bhi.n	8006592 <__multiply+0xaa>
 80065c8:	9901      	ldr	r1, [sp, #4]
 80065ca:	5072      	str	r2, [r6, r1]
 80065cc:	9a03      	ldr	r2, [sp, #12]
 80065ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80065d2:	3304      	adds	r3, #4
 80065d4:	f1b9 0f00 	cmp.w	r9, #0
 80065d8:	d01f      	beq.n	800661a <__multiply+0x132>
 80065da:	6834      	ldr	r4, [r6, #0]
 80065dc:	f105 0114 	add.w	r1, r5, #20
 80065e0:	46b6      	mov	lr, r6
 80065e2:	f04f 0a00 	mov.w	sl, #0
 80065e6:	880a      	ldrh	r2, [r1, #0]
 80065e8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80065ec:	fb09 b202 	mla	r2, r9, r2, fp
 80065f0:	4492      	add	sl, r2
 80065f2:	b2a4      	uxth	r4, r4
 80065f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80065f8:	f84e 4b04 	str.w	r4, [lr], #4
 80065fc:	f851 4b04 	ldr.w	r4, [r1], #4
 8006600:	f8be 2000 	ldrh.w	r2, [lr]
 8006604:	0c24      	lsrs	r4, r4, #16
 8006606:	fb09 2404 	mla	r4, r9, r4, r2
 800660a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800660e:	458c      	cmp	ip, r1
 8006610:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006614:	d8e7      	bhi.n	80065e6 <__multiply+0xfe>
 8006616:	9a01      	ldr	r2, [sp, #4]
 8006618:	50b4      	str	r4, [r6, r2]
 800661a:	3604      	adds	r6, #4
 800661c:	e7a3      	b.n	8006566 <__multiply+0x7e>
 800661e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1a5      	bne.n	8006572 <__multiply+0x8a>
 8006626:	3f01      	subs	r7, #1
 8006628:	e7a1      	b.n	800656e <__multiply+0x86>
 800662a:	bf00      	nop
 800662c:	08007ac7 	.word	0x08007ac7
 8006630:	08007ad8 	.word	0x08007ad8

08006634 <__pow5mult>:
 8006634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006638:	4615      	mov	r5, r2
 800663a:	f012 0203 	ands.w	r2, r2, #3
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	d007      	beq.n	8006654 <__pow5mult+0x20>
 8006644:	4c25      	ldr	r4, [pc, #148]	; (80066dc <__pow5mult+0xa8>)
 8006646:	3a01      	subs	r2, #1
 8006648:	2300      	movs	r3, #0
 800664a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800664e:	f7ff fe9b 	bl	8006388 <__multadd>
 8006652:	4607      	mov	r7, r0
 8006654:	10ad      	asrs	r5, r5, #2
 8006656:	d03d      	beq.n	80066d4 <__pow5mult+0xa0>
 8006658:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800665a:	b97c      	cbnz	r4, 800667c <__pow5mult+0x48>
 800665c:	2010      	movs	r0, #16
 800665e:	f7ff fe1b 	bl	8006298 <malloc>
 8006662:	4602      	mov	r2, r0
 8006664:	6270      	str	r0, [r6, #36]	; 0x24
 8006666:	b928      	cbnz	r0, 8006674 <__pow5mult+0x40>
 8006668:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <__pow5mult+0xac>)
 800666a:	481e      	ldr	r0, [pc, #120]	; (80066e4 <__pow5mult+0xb0>)
 800666c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006670:	f000 fbcc 	bl	8006e0c <__assert_func>
 8006674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006678:	6004      	str	r4, [r0, #0]
 800667a:	60c4      	str	r4, [r0, #12]
 800667c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006684:	b94c      	cbnz	r4, 800669a <__pow5mult+0x66>
 8006686:	f240 2171 	movw	r1, #625	; 0x271
 800668a:	4630      	mov	r0, r6
 800668c:	f7ff ff16 	bl	80064bc <__i2b>
 8006690:	2300      	movs	r3, #0
 8006692:	f8c8 0008 	str.w	r0, [r8, #8]
 8006696:	4604      	mov	r4, r0
 8006698:	6003      	str	r3, [r0, #0]
 800669a:	f04f 0900 	mov.w	r9, #0
 800669e:	07eb      	lsls	r3, r5, #31
 80066a0:	d50a      	bpl.n	80066b8 <__pow5mult+0x84>
 80066a2:	4639      	mov	r1, r7
 80066a4:	4622      	mov	r2, r4
 80066a6:	4630      	mov	r0, r6
 80066a8:	f7ff ff1e 	bl	80064e8 <__multiply>
 80066ac:	4639      	mov	r1, r7
 80066ae:	4680      	mov	r8, r0
 80066b0:	4630      	mov	r0, r6
 80066b2:	f7ff fe47 	bl	8006344 <_Bfree>
 80066b6:	4647      	mov	r7, r8
 80066b8:	106d      	asrs	r5, r5, #1
 80066ba:	d00b      	beq.n	80066d4 <__pow5mult+0xa0>
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	b938      	cbnz	r0, 80066d0 <__pow5mult+0x9c>
 80066c0:	4622      	mov	r2, r4
 80066c2:	4621      	mov	r1, r4
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7ff ff0f 	bl	80064e8 <__multiply>
 80066ca:	6020      	str	r0, [r4, #0]
 80066cc:	f8c0 9000 	str.w	r9, [r0]
 80066d0:	4604      	mov	r4, r0
 80066d2:	e7e4      	b.n	800669e <__pow5mult+0x6a>
 80066d4:	4638      	mov	r0, r7
 80066d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066da:	bf00      	nop
 80066dc:	08007c28 	.word	0x08007c28
 80066e0:	08007a51 	.word	0x08007a51
 80066e4:	08007ad8 	.word	0x08007ad8

080066e8 <__lshift>:
 80066e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ec:	460c      	mov	r4, r1
 80066ee:	6849      	ldr	r1, [r1, #4]
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	4607      	mov	r7, r0
 80066fa:	4691      	mov	r9, r2
 80066fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006700:	f108 0601 	add.w	r6, r8, #1
 8006704:	42b3      	cmp	r3, r6
 8006706:	db0b      	blt.n	8006720 <__lshift+0x38>
 8006708:	4638      	mov	r0, r7
 800670a:	f7ff fddb 	bl	80062c4 <_Balloc>
 800670e:	4605      	mov	r5, r0
 8006710:	b948      	cbnz	r0, 8006726 <__lshift+0x3e>
 8006712:	4602      	mov	r2, r0
 8006714:	4b28      	ldr	r3, [pc, #160]	; (80067b8 <__lshift+0xd0>)
 8006716:	4829      	ldr	r0, [pc, #164]	; (80067bc <__lshift+0xd4>)
 8006718:	f240 11d9 	movw	r1, #473	; 0x1d9
 800671c:	f000 fb76 	bl	8006e0c <__assert_func>
 8006720:	3101      	adds	r1, #1
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	e7ee      	b.n	8006704 <__lshift+0x1c>
 8006726:	2300      	movs	r3, #0
 8006728:	f100 0114 	add.w	r1, r0, #20
 800672c:	f100 0210 	add.w	r2, r0, #16
 8006730:	4618      	mov	r0, r3
 8006732:	4553      	cmp	r3, sl
 8006734:	db33      	blt.n	800679e <__lshift+0xb6>
 8006736:	6920      	ldr	r0, [r4, #16]
 8006738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800673c:	f104 0314 	add.w	r3, r4, #20
 8006740:	f019 091f 	ands.w	r9, r9, #31
 8006744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006748:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800674c:	d02b      	beq.n	80067a6 <__lshift+0xbe>
 800674e:	f1c9 0e20 	rsb	lr, r9, #32
 8006752:	468a      	mov	sl, r1
 8006754:	2200      	movs	r2, #0
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	fa00 f009 	lsl.w	r0, r0, r9
 800675c:	4302      	orrs	r2, r0
 800675e:	f84a 2b04 	str.w	r2, [sl], #4
 8006762:	f853 2b04 	ldr.w	r2, [r3], #4
 8006766:	459c      	cmp	ip, r3
 8006768:	fa22 f20e 	lsr.w	r2, r2, lr
 800676c:	d8f3      	bhi.n	8006756 <__lshift+0x6e>
 800676e:	ebac 0304 	sub.w	r3, ip, r4
 8006772:	3b15      	subs	r3, #21
 8006774:	f023 0303 	bic.w	r3, r3, #3
 8006778:	3304      	adds	r3, #4
 800677a:	f104 0015 	add.w	r0, r4, #21
 800677e:	4584      	cmp	ip, r0
 8006780:	bf38      	it	cc
 8006782:	2304      	movcc	r3, #4
 8006784:	50ca      	str	r2, [r1, r3]
 8006786:	b10a      	cbz	r2, 800678c <__lshift+0xa4>
 8006788:	f108 0602 	add.w	r6, r8, #2
 800678c:	3e01      	subs	r6, #1
 800678e:	4638      	mov	r0, r7
 8006790:	612e      	str	r6, [r5, #16]
 8006792:	4621      	mov	r1, r4
 8006794:	f7ff fdd6 	bl	8006344 <_Bfree>
 8006798:	4628      	mov	r0, r5
 800679a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679e:	f842 0f04 	str.w	r0, [r2, #4]!
 80067a2:	3301      	adds	r3, #1
 80067a4:	e7c5      	b.n	8006732 <__lshift+0x4a>
 80067a6:	3904      	subs	r1, #4
 80067a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80067b0:	459c      	cmp	ip, r3
 80067b2:	d8f9      	bhi.n	80067a8 <__lshift+0xc0>
 80067b4:	e7ea      	b.n	800678c <__lshift+0xa4>
 80067b6:	bf00      	nop
 80067b8:	08007ac7 	.word	0x08007ac7
 80067bc:	08007ad8 	.word	0x08007ad8

080067c0 <__mcmp>:
 80067c0:	b530      	push	{r4, r5, lr}
 80067c2:	6902      	ldr	r2, [r0, #16]
 80067c4:	690c      	ldr	r4, [r1, #16]
 80067c6:	1b12      	subs	r2, r2, r4
 80067c8:	d10e      	bne.n	80067e8 <__mcmp+0x28>
 80067ca:	f100 0314 	add.w	r3, r0, #20
 80067ce:	3114      	adds	r1, #20
 80067d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80067d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80067d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80067dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80067e0:	42a5      	cmp	r5, r4
 80067e2:	d003      	beq.n	80067ec <__mcmp+0x2c>
 80067e4:	d305      	bcc.n	80067f2 <__mcmp+0x32>
 80067e6:	2201      	movs	r2, #1
 80067e8:	4610      	mov	r0, r2
 80067ea:	bd30      	pop	{r4, r5, pc}
 80067ec:	4283      	cmp	r3, r0
 80067ee:	d3f3      	bcc.n	80067d8 <__mcmp+0x18>
 80067f0:	e7fa      	b.n	80067e8 <__mcmp+0x28>
 80067f2:	f04f 32ff 	mov.w	r2, #4294967295
 80067f6:	e7f7      	b.n	80067e8 <__mcmp+0x28>

080067f8 <__mdiff>:
 80067f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	460c      	mov	r4, r1
 80067fe:	4606      	mov	r6, r0
 8006800:	4611      	mov	r1, r2
 8006802:	4620      	mov	r0, r4
 8006804:	4617      	mov	r7, r2
 8006806:	f7ff ffdb 	bl	80067c0 <__mcmp>
 800680a:	1e05      	subs	r5, r0, #0
 800680c:	d110      	bne.n	8006830 <__mdiff+0x38>
 800680e:	4629      	mov	r1, r5
 8006810:	4630      	mov	r0, r6
 8006812:	f7ff fd57 	bl	80062c4 <_Balloc>
 8006816:	b930      	cbnz	r0, 8006826 <__mdiff+0x2e>
 8006818:	4b39      	ldr	r3, [pc, #228]	; (8006900 <__mdiff+0x108>)
 800681a:	4602      	mov	r2, r0
 800681c:	f240 2132 	movw	r1, #562	; 0x232
 8006820:	4838      	ldr	r0, [pc, #224]	; (8006904 <__mdiff+0x10c>)
 8006822:	f000 faf3 	bl	8006e0c <__assert_func>
 8006826:	2301      	movs	r3, #1
 8006828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800682c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006830:	bfa4      	itt	ge
 8006832:	463b      	movge	r3, r7
 8006834:	4627      	movge	r7, r4
 8006836:	4630      	mov	r0, r6
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	bfa6      	itte	ge
 800683c:	461c      	movge	r4, r3
 800683e:	2500      	movge	r5, #0
 8006840:	2501      	movlt	r5, #1
 8006842:	f7ff fd3f 	bl	80062c4 <_Balloc>
 8006846:	b920      	cbnz	r0, 8006852 <__mdiff+0x5a>
 8006848:	4b2d      	ldr	r3, [pc, #180]	; (8006900 <__mdiff+0x108>)
 800684a:	4602      	mov	r2, r0
 800684c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006850:	e7e6      	b.n	8006820 <__mdiff+0x28>
 8006852:	693e      	ldr	r6, [r7, #16]
 8006854:	60c5      	str	r5, [r0, #12]
 8006856:	6925      	ldr	r5, [r4, #16]
 8006858:	f107 0114 	add.w	r1, r7, #20
 800685c:	f104 0914 	add.w	r9, r4, #20
 8006860:	f100 0e14 	add.w	lr, r0, #20
 8006864:	f107 0210 	add.w	r2, r7, #16
 8006868:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800686c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006870:	46f2      	mov	sl, lr
 8006872:	2700      	movs	r7, #0
 8006874:	f859 3b04 	ldr.w	r3, [r9], #4
 8006878:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800687c:	fa1f f883 	uxth.w	r8, r3
 8006880:	fa17 f78b 	uxtah	r7, r7, fp
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	eba7 0808 	sub.w	r8, r7, r8
 800688a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800688e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006892:	fa1f f888 	uxth.w	r8, r8
 8006896:	141f      	asrs	r7, r3, #16
 8006898:	454d      	cmp	r5, r9
 800689a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800689e:	f84a 3b04 	str.w	r3, [sl], #4
 80068a2:	d8e7      	bhi.n	8006874 <__mdiff+0x7c>
 80068a4:	1b2b      	subs	r3, r5, r4
 80068a6:	3b15      	subs	r3, #21
 80068a8:	f023 0303 	bic.w	r3, r3, #3
 80068ac:	3304      	adds	r3, #4
 80068ae:	3415      	adds	r4, #21
 80068b0:	42a5      	cmp	r5, r4
 80068b2:	bf38      	it	cc
 80068b4:	2304      	movcc	r3, #4
 80068b6:	4419      	add	r1, r3
 80068b8:	4473      	add	r3, lr
 80068ba:	469e      	mov	lr, r3
 80068bc:	460d      	mov	r5, r1
 80068be:	4565      	cmp	r5, ip
 80068c0:	d30e      	bcc.n	80068e0 <__mdiff+0xe8>
 80068c2:	f10c 0203 	add.w	r2, ip, #3
 80068c6:	1a52      	subs	r2, r2, r1
 80068c8:	f022 0203 	bic.w	r2, r2, #3
 80068cc:	3903      	subs	r1, #3
 80068ce:	458c      	cmp	ip, r1
 80068d0:	bf38      	it	cc
 80068d2:	2200      	movcc	r2, #0
 80068d4:	441a      	add	r2, r3
 80068d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80068da:	b17b      	cbz	r3, 80068fc <__mdiff+0x104>
 80068dc:	6106      	str	r6, [r0, #16]
 80068de:	e7a5      	b.n	800682c <__mdiff+0x34>
 80068e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80068e4:	fa17 f488 	uxtah	r4, r7, r8
 80068e8:	1422      	asrs	r2, r4, #16
 80068ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80068ee:	b2a4      	uxth	r4, r4
 80068f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80068f4:	f84e 4b04 	str.w	r4, [lr], #4
 80068f8:	1417      	asrs	r7, r2, #16
 80068fa:	e7e0      	b.n	80068be <__mdiff+0xc6>
 80068fc:	3e01      	subs	r6, #1
 80068fe:	e7ea      	b.n	80068d6 <__mdiff+0xde>
 8006900:	08007ac7 	.word	0x08007ac7
 8006904:	08007ad8 	.word	0x08007ad8

08006908 <__d2b>:
 8006908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800690c:	4689      	mov	r9, r1
 800690e:	2101      	movs	r1, #1
 8006910:	ec57 6b10 	vmov	r6, r7, d0
 8006914:	4690      	mov	r8, r2
 8006916:	f7ff fcd5 	bl	80062c4 <_Balloc>
 800691a:	4604      	mov	r4, r0
 800691c:	b930      	cbnz	r0, 800692c <__d2b+0x24>
 800691e:	4602      	mov	r2, r0
 8006920:	4b25      	ldr	r3, [pc, #148]	; (80069b8 <__d2b+0xb0>)
 8006922:	4826      	ldr	r0, [pc, #152]	; (80069bc <__d2b+0xb4>)
 8006924:	f240 310a 	movw	r1, #778	; 0x30a
 8006928:	f000 fa70 	bl	8006e0c <__assert_func>
 800692c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006934:	bb35      	cbnz	r5, 8006984 <__d2b+0x7c>
 8006936:	2e00      	cmp	r6, #0
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	d028      	beq.n	800698e <__d2b+0x86>
 800693c:	4668      	mov	r0, sp
 800693e:	9600      	str	r6, [sp, #0]
 8006940:	f7ff fd8c 	bl	800645c <__lo0bits>
 8006944:	9900      	ldr	r1, [sp, #0]
 8006946:	b300      	cbz	r0, 800698a <__d2b+0x82>
 8006948:	9a01      	ldr	r2, [sp, #4]
 800694a:	f1c0 0320 	rsb	r3, r0, #32
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	430b      	orrs	r3, r1
 8006954:	40c2      	lsrs	r2, r0
 8006956:	6163      	str	r3, [r4, #20]
 8006958:	9201      	str	r2, [sp, #4]
 800695a:	9b01      	ldr	r3, [sp, #4]
 800695c:	61a3      	str	r3, [r4, #24]
 800695e:	2b00      	cmp	r3, #0
 8006960:	bf14      	ite	ne
 8006962:	2202      	movne	r2, #2
 8006964:	2201      	moveq	r2, #1
 8006966:	6122      	str	r2, [r4, #16]
 8006968:	b1d5      	cbz	r5, 80069a0 <__d2b+0x98>
 800696a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800696e:	4405      	add	r5, r0
 8006970:	f8c9 5000 	str.w	r5, [r9]
 8006974:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006978:	f8c8 0000 	str.w	r0, [r8]
 800697c:	4620      	mov	r0, r4
 800697e:	b003      	add	sp, #12
 8006980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006988:	e7d5      	b.n	8006936 <__d2b+0x2e>
 800698a:	6161      	str	r1, [r4, #20]
 800698c:	e7e5      	b.n	800695a <__d2b+0x52>
 800698e:	a801      	add	r0, sp, #4
 8006990:	f7ff fd64 	bl	800645c <__lo0bits>
 8006994:	9b01      	ldr	r3, [sp, #4]
 8006996:	6163      	str	r3, [r4, #20]
 8006998:	2201      	movs	r2, #1
 800699a:	6122      	str	r2, [r4, #16]
 800699c:	3020      	adds	r0, #32
 800699e:	e7e3      	b.n	8006968 <__d2b+0x60>
 80069a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069a8:	f8c9 0000 	str.w	r0, [r9]
 80069ac:	6918      	ldr	r0, [r3, #16]
 80069ae:	f7ff fd35 	bl	800641c <__hi0bits>
 80069b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069b6:	e7df      	b.n	8006978 <__d2b+0x70>
 80069b8:	08007ac7 	.word	0x08007ac7
 80069bc:	08007ad8 	.word	0x08007ad8

080069c0 <_calloc_r>:
 80069c0:	b513      	push	{r0, r1, r4, lr}
 80069c2:	434a      	muls	r2, r1
 80069c4:	4611      	mov	r1, r2
 80069c6:	9201      	str	r2, [sp, #4]
 80069c8:	f000 f85a 	bl	8006a80 <_malloc_r>
 80069cc:	4604      	mov	r4, r0
 80069ce:	b118      	cbz	r0, 80069d8 <_calloc_r+0x18>
 80069d0:	9a01      	ldr	r2, [sp, #4]
 80069d2:	2100      	movs	r1, #0
 80069d4:	f7fe f940 	bl	8004c58 <memset>
 80069d8:	4620      	mov	r0, r4
 80069da:	b002      	add	sp, #8
 80069dc:	bd10      	pop	{r4, pc}
	...

080069e0 <_free_r>:
 80069e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069e2:	2900      	cmp	r1, #0
 80069e4:	d048      	beq.n	8006a78 <_free_r+0x98>
 80069e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ea:	9001      	str	r0, [sp, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f1a1 0404 	sub.w	r4, r1, #4
 80069f2:	bfb8      	it	lt
 80069f4:	18e4      	addlt	r4, r4, r3
 80069f6:	f000 fa65 	bl	8006ec4 <__malloc_lock>
 80069fa:	4a20      	ldr	r2, [pc, #128]	; (8006a7c <_free_r+0x9c>)
 80069fc:	9801      	ldr	r0, [sp, #4]
 80069fe:	6813      	ldr	r3, [r2, #0]
 8006a00:	4615      	mov	r5, r2
 8006a02:	b933      	cbnz	r3, 8006a12 <_free_r+0x32>
 8006a04:	6063      	str	r3, [r4, #4]
 8006a06:	6014      	str	r4, [r2, #0]
 8006a08:	b003      	add	sp, #12
 8006a0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a0e:	f000 ba5f 	b.w	8006ed0 <__malloc_unlock>
 8006a12:	42a3      	cmp	r3, r4
 8006a14:	d90b      	bls.n	8006a2e <_free_r+0x4e>
 8006a16:	6821      	ldr	r1, [r4, #0]
 8006a18:	1862      	adds	r2, r4, r1
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	bf04      	itt	eq
 8006a1e:	681a      	ldreq	r2, [r3, #0]
 8006a20:	685b      	ldreq	r3, [r3, #4]
 8006a22:	6063      	str	r3, [r4, #4]
 8006a24:	bf04      	itt	eq
 8006a26:	1852      	addeq	r2, r2, r1
 8006a28:	6022      	streq	r2, [r4, #0]
 8006a2a:	602c      	str	r4, [r5, #0]
 8006a2c:	e7ec      	b.n	8006a08 <_free_r+0x28>
 8006a2e:	461a      	mov	r2, r3
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	b10b      	cbz	r3, 8006a38 <_free_r+0x58>
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	d9fa      	bls.n	8006a2e <_free_r+0x4e>
 8006a38:	6811      	ldr	r1, [r2, #0]
 8006a3a:	1855      	adds	r5, r2, r1
 8006a3c:	42a5      	cmp	r5, r4
 8006a3e:	d10b      	bne.n	8006a58 <_free_r+0x78>
 8006a40:	6824      	ldr	r4, [r4, #0]
 8006a42:	4421      	add	r1, r4
 8006a44:	1854      	adds	r4, r2, r1
 8006a46:	42a3      	cmp	r3, r4
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	d1dd      	bne.n	8006a08 <_free_r+0x28>
 8006a4c:	681c      	ldr	r4, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	6053      	str	r3, [r2, #4]
 8006a52:	4421      	add	r1, r4
 8006a54:	6011      	str	r1, [r2, #0]
 8006a56:	e7d7      	b.n	8006a08 <_free_r+0x28>
 8006a58:	d902      	bls.n	8006a60 <_free_r+0x80>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	6003      	str	r3, [r0, #0]
 8006a5e:	e7d3      	b.n	8006a08 <_free_r+0x28>
 8006a60:	6825      	ldr	r5, [r4, #0]
 8006a62:	1961      	adds	r1, r4, r5
 8006a64:	428b      	cmp	r3, r1
 8006a66:	bf04      	itt	eq
 8006a68:	6819      	ldreq	r1, [r3, #0]
 8006a6a:	685b      	ldreq	r3, [r3, #4]
 8006a6c:	6063      	str	r3, [r4, #4]
 8006a6e:	bf04      	itt	eq
 8006a70:	1949      	addeq	r1, r1, r5
 8006a72:	6021      	streq	r1, [r4, #0]
 8006a74:	6054      	str	r4, [r2, #4]
 8006a76:	e7c7      	b.n	8006a08 <_free_r+0x28>
 8006a78:	b003      	add	sp, #12
 8006a7a:	bd30      	pop	{r4, r5, pc}
 8006a7c:	20000200 	.word	0x20000200

08006a80 <_malloc_r>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	1ccd      	adds	r5, r1, #3
 8006a84:	f025 0503 	bic.w	r5, r5, #3
 8006a88:	3508      	adds	r5, #8
 8006a8a:	2d0c      	cmp	r5, #12
 8006a8c:	bf38      	it	cc
 8006a8e:	250c      	movcc	r5, #12
 8006a90:	2d00      	cmp	r5, #0
 8006a92:	4606      	mov	r6, r0
 8006a94:	db01      	blt.n	8006a9a <_malloc_r+0x1a>
 8006a96:	42a9      	cmp	r1, r5
 8006a98:	d903      	bls.n	8006aa2 <_malloc_r+0x22>
 8006a9a:	230c      	movs	r3, #12
 8006a9c:	6033      	str	r3, [r6, #0]
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa2:	f000 fa0f 	bl	8006ec4 <__malloc_lock>
 8006aa6:	4921      	ldr	r1, [pc, #132]	; (8006b2c <_malloc_r+0xac>)
 8006aa8:	680a      	ldr	r2, [r1, #0]
 8006aaa:	4614      	mov	r4, r2
 8006aac:	b99c      	cbnz	r4, 8006ad6 <_malloc_r+0x56>
 8006aae:	4f20      	ldr	r7, [pc, #128]	; (8006b30 <_malloc_r+0xb0>)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	b923      	cbnz	r3, 8006abe <_malloc_r+0x3e>
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f000 f998 	bl	8006dec <_sbrk_r>
 8006abc:	6038      	str	r0, [r7, #0]
 8006abe:	4629      	mov	r1, r5
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f000 f993 	bl	8006dec <_sbrk_r>
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	d123      	bne.n	8006b12 <_malloc_r+0x92>
 8006aca:	230c      	movs	r3, #12
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f000 f9fe 	bl	8006ed0 <__malloc_unlock>
 8006ad4:	e7e3      	b.n	8006a9e <_malloc_r+0x1e>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	1b5b      	subs	r3, r3, r5
 8006ada:	d417      	bmi.n	8006b0c <_malloc_r+0x8c>
 8006adc:	2b0b      	cmp	r3, #11
 8006ade:	d903      	bls.n	8006ae8 <_malloc_r+0x68>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	441c      	add	r4, r3
 8006ae4:	6025      	str	r5, [r4, #0]
 8006ae6:	e004      	b.n	8006af2 <_malloc_r+0x72>
 8006ae8:	6863      	ldr	r3, [r4, #4]
 8006aea:	42a2      	cmp	r2, r4
 8006aec:	bf0c      	ite	eq
 8006aee:	600b      	streq	r3, [r1, #0]
 8006af0:	6053      	strne	r3, [r2, #4]
 8006af2:	4630      	mov	r0, r6
 8006af4:	f000 f9ec 	bl	8006ed0 <__malloc_unlock>
 8006af8:	f104 000b 	add.w	r0, r4, #11
 8006afc:	1d23      	adds	r3, r4, #4
 8006afe:	f020 0007 	bic.w	r0, r0, #7
 8006b02:	1ac2      	subs	r2, r0, r3
 8006b04:	d0cc      	beq.n	8006aa0 <_malloc_r+0x20>
 8006b06:	1a1b      	subs	r3, r3, r0
 8006b08:	50a3      	str	r3, [r4, r2]
 8006b0a:	e7c9      	b.n	8006aa0 <_malloc_r+0x20>
 8006b0c:	4622      	mov	r2, r4
 8006b0e:	6864      	ldr	r4, [r4, #4]
 8006b10:	e7cc      	b.n	8006aac <_malloc_r+0x2c>
 8006b12:	1cc4      	adds	r4, r0, #3
 8006b14:	f024 0403 	bic.w	r4, r4, #3
 8006b18:	42a0      	cmp	r0, r4
 8006b1a:	d0e3      	beq.n	8006ae4 <_malloc_r+0x64>
 8006b1c:	1a21      	subs	r1, r4, r0
 8006b1e:	4630      	mov	r0, r6
 8006b20:	f000 f964 	bl	8006dec <_sbrk_r>
 8006b24:	3001      	adds	r0, #1
 8006b26:	d1dd      	bne.n	8006ae4 <_malloc_r+0x64>
 8006b28:	e7cf      	b.n	8006aca <_malloc_r+0x4a>
 8006b2a:	bf00      	nop
 8006b2c:	20000200 	.word	0x20000200
 8006b30:	20000204 	.word	0x20000204

08006b34 <__ssputs_r>:
 8006b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	688e      	ldr	r6, [r1, #8]
 8006b3a:	429e      	cmp	r6, r3
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	4690      	mov	r8, r2
 8006b42:	461f      	mov	r7, r3
 8006b44:	d838      	bhi.n	8006bb8 <__ssputs_r+0x84>
 8006b46:	898a      	ldrh	r2, [r1, #12]
 8006b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b4c:	d032      	beq.n	8006bb4 <__ssputs_r+0x80>
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	6909      	ldr	r1, [r1, #16]
 8006b52:	eba5 0901 	sub.w	r9, r5, r1
 8006b56:	6965      	ldr	r5, [r4, #20]
 8006b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b60:	3301      	adds	r3, #1
 8006b62:	444b      	add	r3, r9
 8006b64:	106d      	asrs	r5, r5, #1
 8006b66:	429d      	cmp	r5, r3
 8006b68:	bf38      	it	cc
 8006b6a:	461d      	movcc	r5, r3
 8006b6c:	0553      	lsls	r3, r2, #21
 8006b6e:	d531      	bpl.n	8006bd4 <__ssputs_r+0xa0>
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7ff ff85 	bl	8006a80 <_malloc_r>
 8006b76:	4606      	mov	r6, r0
 8006b78:	b950      	cbnz	r0, 8006b90 <__ssputs_r+0x5c>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	f8ca 3000 	str.w	r3, [sl]
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b90:	6921      	ldr	r1, [r4, #16]
 8006b92:	464a      	mov	r2, r9
 8006b94:	f7ff fb88 	bl	80062a8 <memcpy>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	6126      	str	r6, [r4, #16]
 8006ba6:	6165      	str	r5, [r4, #20]
 8006ba8:	444e      	add	r6, r9
 8006baa:	eba5 0509 	sub.w	r5, r5, r9
 8006bae:	6026      	str	r6, [r4, #0]
 8006bb0:	60a5      	str	r5, [r4, #8]
 8006bb2:	463e      	mov	r6, r7
 8006bb4:	42be      	cmp	r6, r7
 8006bb6:	d900      	bls.n	8006bba <__ssputs_r+0x86>
 8006bb8:	463e      	mov	r6, r7
 8006bba:	4632      	mov	r2, r6
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	f000 f966 	bl	8006e90 <memmove>
 8006bc4:	68a3      	ldr	r3, [r4, #8]
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	1b9b      	subs	r3, r3, r6
 8006bca:	4432      	add	r2, r6
 8006bcc:	60a3      	str	r3, [r4, #8]
 8006bce:	6022      	str	r2, [r4, #0]
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	e7db      	b.n	8006b8c <__ssputs_r+0x58>
 8006bd4:	462a      	mov	r2, r5
 8006bd6:	f000 f981 	bl	8006edc <_realloc_r>
 8006bda:	4606      	mov	r6, r0
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d1e1      	bne.n	8006ba4 <__ssputs_r+0x70>
 8006be0:	6921      	ldr	r1, [r4, #16]
 8006be2:	4650      	mov	r0, sl
 8006be4:	f7ff fefc 	bl	80069e0 <_free_r>
 8006be8:	e7c7      	b.n	8006b7a <__ssputs_r+0x46>
	...

08006bec <_svfiprintf_r>:
 8006bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf0:	4698      	mov	r8, r3
 8006bf2:	898b      	ldrh	r3, [r1, #12]
 8006bf4:	061b      	lsls	r3, r3, #24
 8006bf6:	b09d      	sub	sp, #116	; 0x74
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	d50e      	bpl.n	8006c1e <_svfiprintf_r+0x32>
 8006c00:	690b      	ldr	r3, [r1, #16]
 8006c02:	b963      	cbnz	r3, 8006c1e <_svfiprintf_r+0x32>
 8006c04:	2140      	movs	r1, #64	; 0x40
 8006c06:	f7ff ff3b 	bl	8006a80 <_malloc_r>
 8006c0a:	6028      	str	r0, [r5, #0]
 8006c0c:	6128      	str	r0, [r5, #16]
 8006c0e:	b920      	cbnz	r0, 8006c1a <_svfiprintf_r+0x2e>
 8006c10:	230c      	movs	r3, #12
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295
 8006c18:	e0d1      	b.n	8006dbe <_svfiprintf_r+0x1d2>
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	616b      	str	r3, [r5, #20]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	9309      	str	r3, [sp, #36]	; 0x24
 8006c22:	2320      	movs	r3, #32
 8006c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c2c:	2330      	movs	r3, #48	; 0x30
 8006c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006dd8 <_svfiprintf_r+0x1ec>
 8006c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c36:	f04f 0901 	mov.w	r9, #1
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	469a      	mov	sl, r3
 8006c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c42:	b10a      	cbz	r2, 8006c48 <_svfiprintf_r+0x5c>
 8006c44:	2a25      	cmp	r2, #37	; 0x25
 8006c46:	d1f9      	bne.n	8006c3c <_svfiprintf_r+0x50>
 8006c48:	ebba 0b04 	subs.w	fp, sl, r4
 8006c4c:	d00b      	beq.n	8006c66 <_svfiprintf_r+0x7a>
 8006c4e:	465b      	mov	r3, fp
 8006c50:	4622      	mov	r2, r4
 8006c52:	4629      	mov	r1, r5
 8006c54:	4638      	mov	r0, r7
 8006c56:	f7ff ff6d 	bl	8006b34 <__ssputs_r>
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	f000 80aa 	beq.w	8006db4 <_svfiprintf_r+0x1c8>
 8006c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c62:	445a      	add	r2, fp
 8006c64:	9209      	str	r2, [sp, #36]	; 0x24
 8006c66:	f89a 3000 	ldrb.w	r3, [sl]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 80a2 	beq.w	8006db4 <_svfiprintf_r+0x1c8>
 8006c70:	2300      	movs	r3, #0
 8006c72:	f04f 32ff 	mov.w	r2, #4294967295
 8006c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c7a:	f10a 0a01 	add.w	sl, sl, #1
 8006c7e:	9304      	str	r3, [sp, #16]
 8006c80:	9307      	str	r3, [sp, #28]
 8006c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c86:	931a      	str	r3, [sp, #104]	; 0x68
 8006c88:	4654      	mov	r4, sl
 8006c8a:	2205      	movs	r2, #5
 8006c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c90:	4851      	ldr	r0, [pc, #324]	; (8006dd8 <_svfiprintf_r+0x1ec>)
 8006c92:	f7f9 fab5 	bl	8000200 <memchr>
 8006c96:	9a04      	ldr	r2, [sp, #16]
 8006c98:	b9d8      	cbnz	r0, 8006cd2 <_svfiprintf_r+0xe6>
 8006c9a:	06d0      	lsls	r0, r2, #27
 8006c9c:	bf44      	itt	mi
 8006c9e:	2320      	movmi	r3, #32
 8006ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca4:	0711      	lsls	r1, r2, #28
 8006ca6:	bf44      	itt	mi
 8006ca8:	232b      	movmi	r3, #43	; 0x2b
 8006caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cae:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb4:	d015      	beq.n	8006ce2 <_svfiprintf_r+0xf6>
 8006cb6:	9a07      	ldr	r2, [sp, #28]
 8006cb8:	4654      	mov	r4, sl
 8006cba:	2000      	movs	r0, #0
 8006cbc:	f04f 0c0a 	mov.w	ip, #10
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc6:	3b30      	subs	r3, #48	; 0x30
 8006cc8:	2b09      	cmp	r3, #9
 8006cca:	d94e      	bls.n	8006d6a <_svfiprintf_r+0x17e>
 8006ccc:	b1b0      	cbz	r0, 8006cfc <_svfiprintf_r+0x110>
 8006cce:	9207      	str	r2, [sp, #28]
 8006cd0:	e014      	b.n	8006cfc <_svfiprintf_r+0x110>
 8006cd2:	eba0 0308 	sub.w	r3, r0, r8
 8006cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	9304      	str	r3, [sp, #16]
 8006cde:	46a2      	mov	sl, r4
 8006ce0:	e7d2      	b.n	8006c88 <_svfiprintf_r+0x9c>
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	1d19      	adds	r1, r3, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	9103      	str	r1, [sp, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bfbb      	ittet	lt
 8006cee:	425b      	neglt	r3, r3
 8006cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8006cf4:	9307      	strge	r3, [sp, #28]
 8006cf6:	9307      	strlt	r3, [sp, #28]
 8006cf8:	bfb8      	it	lt
 8006cfa:	9204      	strlt	r2, [sp, #16]
 8006cfc:	7823      	ldrb	r3, [r4, #0]
 8006cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8006d00:	d10c      	bne.n	8006d1c <_svfiprintf_r+0x130>
 8006d02:	7863      	ldrb	r3, [r4, #1]
 8006d04:	2b2a      	cmp	r3, #42	; 0x2a
 8006d06:	d135      	bne.n	8006d74 <_svfiprintf_r+0x188>
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	9203      	str	r2, [sp, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bfb8      	it	lt
 8006d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d18:	3402      	adds	r4, #2
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006de8 <_svfiprintf_r+0x1fc>
 8006d20:	7821      	ldrb	r1, [r4, #0]
 8006d22:	2203      	movs	r2, #3
 8006d24:	4650      	mov	r0, sl
 8006d26:	f7f9 fa6b 	bl	8000200 <memchr>
 8006d2a:	b140      	cbz	r0, 8006d3e <_svfiprintf_r+0x152>
 8006d2c:	2340      	movs	r3, #64	; 0x40
 8006d2e:	eba0 000a 	sub.w	r0, r0, sl
 8006d32:	fa03 f000 	lsl.w	r0, r3, r0
 8006d36:	9b04      	ldr	r3, [sp, #16]
 8006d38:	4303      	orrs	r3, r0
 8006d3a:	3401      	adds	r4, #1
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d42:	4826      	ldr	r0, [pc, #152]	; (8006ddc <_svfiprintf_r+0x1f0>)
 8006d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d48:	2206      	movs	r2, #6
 8006d4a:	f7f9 fa59 	bl	8000200 <memchr>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d038      	beq.n	8006dc4 <_svfiprintf_r+0x1d8>
 8006d52:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <_svfiprintf_r+0x1f4>)
 8006d54:	bb1b      	cbnz	r3, 8006d9e <_svfiprintf_r+0x1b2>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	3307      	adds	r3, #7
 8006d5a:	f023 0307 	bic.w	r3, r3, #7
 8006d5e:	3308      	adds	r3, #8
 8006d60:	9303      	str	r3, [sp, #12]
 8006d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d64:	4433      	add	r3, r6
 8006d66:	9309      	str	r3, [sp, #36]	; 0x24
 8006d68:	e767      	b.n	8006c3a <_svfiprintf_r+0x4e>
 8006d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d6e:	460c      	mov	r4, r1
 8006d70:	2001      	movs	r0, #1
 8006d72:	e7a5      	b.n	8006cc0 <_svfiprintf_r+0xd4>
 8006d74:	2300      	movs	r3, #0
 8006d76:	3401      	adds	r4, #1
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f04f 0c0a 	mov.w	ip, #10
 8006d80:	4620      	mov	r0, r4
 8006d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d86:	3a30      	subs	r2, #48	; 0x30
 8006d88:	2a09      	cmp	r2, #9
 8006d8a:	d903      	bls.n	8006d94 <_svfiprintf_r+0x1a8>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0c5      	beq.n	8006d1c <_svfiprintf_r+0x130>
 8006d90:	9105      	str	r1, [sp, #20]
 8006d92:	e7c3      	b.n	8006d1c <_svfiprintf_r+0x130>
 8006d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d98:	4604      	mov	r4, r0
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e7f0      	b.n	8006d80 <_svfiprintf_r+0x194>
 8006d9e:	ab03      	add	r3, sp, #12
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	462a      	mov	r2, r5
 8006da4:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <_svfiprintf_r+0x1f8>)
 8006da6:	a904      	add	r1, sp, #16
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7fd fffd 	bl	8004da8 <_printf_float>
 8006dae:	1c42      	adds	r2, r0, #1
 8006db0:	4606      	mov	r6, r0
 8006db2:	d1d6      	bne.n	8006d62 <_svfiprintf_r+0x176>
 8006db4:	89ab      	ldrh	r3, [r5, #12]
 8006db6:	065b      	lsls	r3, r3, #25
 8006db8:	f53f af2c 	bmi.w	8006c14 <_svfiprintf_r+0x28>
 8006dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dbe:	b01d      	add	sp, #116	; 0x74
 8006dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc4:	ab03      	add	r3, sp, #12
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <_svfiprintf_r+0x1f8>)
 8006dcc:	a904      	add	r1, sp, #16
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f7fe fa8e 	bl	80052f0 <_printf_i>
 8006dd4:	e7eb      	b.n	8006dae <_svfiprintf_r+0x1c2>
 8006dd6:	bf00      	nop
 8006dd8:	08007c34 	.word	0x08007c34
 8006ddc:	08007c3e 	.word	0x08007c3e
 8006de0:	08004da9 	.word	0x08004da9
 8006de4:	08006b35 	.word	0x08006b35
 8006de8:	08007c3a 	.word	0x08007c3a

08006dec <_sbrk_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d06      	ldr	r5, [pc, #24]	; (8006e08 <_sbrk_r+0x1c>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	602b      	str	r3, [r5, #0]
 8006df8:	f7fa fefc 	bl	8001bf4 <_sbrk>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_sbrk_r+0x1a>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_sbrk_r+0x1a>
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	200003c4 	.word	0x200003c4

08006e0c <__assert_func>:
 8006e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e0e:	4614      	mov	r4, r2
 8006e10:	461a      	mov	r2, r3
 8006e12:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <__assert_func+0x2c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4605      	mov	r5, r0
 8006e18:	68d8      	ldr	r0, [r3, #12]
 8006e1a:	b14c      	cbz	r4, 8006e30 <__assert_func+0x24>
 8006e1c:	4b07      	ldr	r3, [pc, #28]	; (8006e3c <__assert_func+0x30>)
 8006e1e:	9100      	str	r1, [sp, #0]
 8006e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e24:	4906      	ldr	r1, [pc, #24]	; (8006e40 <__assert_func+0x34>)
 8006e26:	462b      	mov	r3, r5
 8006e28:	f000 f80e 	bl	8006e48 <fiprintf>
 8006e2c:	f000 faa4 	bl	8007378 <abort>
 8006e30:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <__assert_func+0x38>)
 8006e32:	461c      	mov	r4, r3
 8006e34:	e7f3      	b.n	8006e1e <__assert_func+0x12>
 8006e36:	bf00      	nop
 8006e38:	2000000c 	.word	0x2000000c
 8006e3c:	08007c45 	.word	0x08007c45
 8006e40:	08007c52 	.word	0x08007c52
 8006e44:	08007c80 	.word	0x08007c80

08006e48 <fiprintf>:
 8006e48:	b40e      	push	{r1, r2, r3}
 8006e4a:	b503      	push	{r0, r1, lr}
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	ab03      	add	r3, sp, #12
 8006e50:	4805      	ldr	r0, [pc, #20]	; (8006e68 <fiprintf+0x20>)
 8006e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e56:	6800      	ldr	r0, [r0, #0]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	f000 f88f 	bl	8006f7c <_vfiprintf_r>
 8006e5e:	b002      	add	sp, #8
 8006e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e64:	b003      	add	sp, #12
 8006e66:	4770      	bx	lr
 8006e68:	2000000c 	.word	0x2000000c

08006e6c <__ascii_mbtowc>:
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	b901      	cbnz	r1, 8006e72 <__ascii_mbtowc+0x6>
 8006e70:	a901      	add	r1, sp, #4
 8006e72:	b142      	cbz	r2, 8006e86 <__ascii_mbtowc+0x1a>
 8006e74:	b14b      	cbz	r3, 8006e8a <__ascii_mbtowc+0x1e>
 8006e76:	7813      	ldrb	r3, [r2, #0]
 8006e78:	600b      	str	r3, [r1, #0]
 8006e7a:	7812      	ldrb	r2, [r2, #0]
 8006e7c:	1e10      	subs	r0, r2, #0
 8006e7e:	bf18      	it	ne
 8006e80:	2001      	movne	r0, #1
 8006e82:	b002      	add	sp, #8
 8006e84:	4770      	bx	lr
 8006e86:	4610      	mov	r0, r2
 8006e88:	e7fb      	b.n	8006e82 <__ascii_mbtowc+0x16>
 8006e8a:	f06f 0001 	mvn.w	r0, #1
 8006e8e:	e7f8      	b.n	8006e82 <__ascii_mbtowc+0x16>

08006e90 <memmove>:
 8006e90:	4288      	cmp	r0, r1
 8006e92:	b510      	push	{r4, lr}
 8006e94:	eb01 0402 	add.w	r4, r1, r2
 8006e98:	d902      	bls.n	8006ea0 <memmove+0x10>
 8006e9a:	4284      	cmp	r4, r0
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	d807      	bhi.n	8006eb0 <memmove+0x20>
 8006ea0:	1e43      	subs	r3, r0, #1
 8006ea2:	42a1      	cmp	r1, r4
 8006ea4:	d008      	beq.n	8006eb8 <memmove+0x28>
 8006ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006eae:	e7f8      	b.n	8006ea2 <memmove+0x12>
 8006eb0:	4402      	add	r2, r0
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	428a      	cmp	r2, r1
 8006eb6:	d100      	bne.n	8006eba <memmove+0x2a>
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ec2:	e7f7      	b.n	8006eb4 <memmove+0x24>

08006ec4 <__malloc_lock>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	; (8006ecc <__malloc_lock+0x8>)
 8006ec6:	f000 bc17 	b.w	80076f8 <__retarget_lock_acquire_recursive>
 8006eca:	bf00      	nop
 8006ecc:	200003cc 	.word	0x200003cc

08006ed0 <__malloc_unlock>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__malloc_unlock+0x8>)
 8006ed2:	f000 bc12 	b.w	80076fa <__retarget_lock_release_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	200003cc 	.word	0x200003cc

08006edc <_realloc_r>:
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ede:	4607      	mov	r7, r0
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	460e      	mov	r6, r1
 8006ee4:	b921      	cbnz	r1, 8006ef0 <_realloc_r+0x14>
 8006ee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006eea:	4611      	mov	r1, r2
 8006eec:	f7ff bdc8 	b.w	8006a80 <_malloc_r>
 8006ef0:	b922      	cbnz	r2, 8006efc <_realloc_r+0x20>
 8006ef2:	f7ff fd75 	bl	80069e0 <_free_r>
 8006ef6:	4625      	mov	r5, r4
 8006ef8:	4628      	mov	r0, r5
 8006efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006efc:	f000 fc62 	bl	80077c4 <_malloc_usable_size_r>
 8006f00:	42a0      	cmp	r0, r4
 8006f02:	d20f      	bcs.n	8006f24 <_realloc_r+0x48>
 8006f04:	4621      	mov	r1, r4
 8006f06:	4638      	mov	r0, r7
 8006f08:	f7ff fdba 	bl	8006a80 <_malloc_r>
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d0f2      	beq.n	8006ef8 <_realloc_r+0x1c>
 8006f12:	4631      	mov	r1, r6
 8006f14:	4622      	mov	r2, r4
 8006f16:	f7ff f9c7 	bl	80062a8 <memcpy>
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f7ff fd5f 	bl	80069e0 <_free_r>
 8006f22:	e7e9      	b.n	8006ef8 <_realloc_r+0x1c>
 8006f24:	4635      	mov	r5, r6
 8006f26:	e7e7      	b.n	8006ef8 <_realloc_r+0x1c>

08006f28 <__sfputc_r>:
 8006f28:	6893      	ldr	r3, [r2, #8]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	b410      	push	{r4}
 8006f30:	6093      	str	r3, [r2, #8]
 8006f32:	da08      	bge.n	8006f46 <__sfputc_r+0x1e>
 8006f34:	6994      	ldr	r4, [r2, #24]
 8006f36:	42a3      	cmp	r3, r4
 8006f38:	db01      	blt.n	8006f3e <__sfputc_r+0x16>
 8006f3a:	290a      	cmp	r1, #10
 8006f3c:	d103      	bne.n	8006f46 <__sfputc_r+0x1e>
 8006f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f42:	f000 b94b 	b.w	80071dc <__swbuf_r>
 8006f46:	6813      	ldr	r3, [r2, #0]
 8006f48:	1c58      	adds	r0, r3, #1
 8006f4a:	6010      	str	r0, [r2, #0]
 8006f4c:	7019      	strb	r1, [r3, #0]
 8006f4e:	4608      	mov	r0, r1
 8006f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <__sfputs_r>:
 8006f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f58:	4606      	mov	r6, r0
 8006f5a:	460f      	mov	r7, r1
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	18d5      	adds	r5, r2, r3
 8006f60:	42ac      	cmp	r4, r5
 8006f62:	d101      	bne.n	8006f68 <__sfputs_r+0x12>
 8006f64:	2000      	movs	r0, #0
 8006f66:	e007      	b.n	8006f78 <__sfputs_r+0x22>
 8006f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6c:	463a      	mov	r2, r7
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f7ff ffda 	bl	8006f28 <__sfputc_r>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d1f3      	bne.n	8006f60 <__sfputs_r+0xa>
 8006f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f7c <_vfiprintf_r>:
 8006f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f80:	460d      	mov	r5, r1
 8006f82:	b09d      	sub	sp, #116	; 0x74
 8006f84:	4614      	mov	r4, r2
 8006f86:	4698      	mov	r8, r3
 8006f88:	4606      	mov	r6, r0
 8006f8a:	b118      	cbz	r0, 8006f94 <_vfiprintf_r+0x18>
 8006f8c:	6983      	ldr	r3, [r0, #24]
 8006f8e:	b90b      	cbnz	r3, 8006f94 <_vfiprintf_r+0x18>
 8006f90:	f000 fb14 	bl	80075bc <__sinit>
 8006f94:	4b89      	ldr	r3, [pc, #548]	; (80071bc <_vfiprintf_r+0x240>)
 8006f96:	429d      	cmp	r5, r3
 8006f98:	d11b      	bne.n	8006fd2 <_vfiprintf_r+0x56>
 8006f9a:	6875      	ldr	r5, [r6, #4]
 8006f9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f9e:	07d9      	lsls	r1, r3, #31
 8006fa0:	d405      	bmi.n	8006fae <_vfiprintf_r+0x32>
 8006fa2:	89ab      	ldrh	r3, [r5, #12]
 8006fa4:	059a      	lsls	r2, r3, #22
 8006fa6:	d402      	bmi.n	8006fae <_vfiprintf_r+0x32>
 8006fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006faa:	f000 fba5 	bl	80076f8 <__retarget_lock_acquire_recursive>
 8006fae:	89ab      	ldrh	r3, [r5, #12]
 8006fb0:	071b      	lsls	r3, r3, #28
 8006fb2:	d501      	bpl.n	8006fb8 <_vfiprintf_r+0x3c>
 8006fb4:	692b      	ldr	r3, [r5, #16]
 8006fb6:	b9eb      	cbnz	r3, 8006ff4 <_vfiprintf_r+0x78>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f000 f96e 	bl	800729c <__swsetup_r>
 8006fc0:	b1c0      	cbz	r0, 8006ff4 <_vfiprintf_r+0x78>
 8006fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fc4:	07dc      	lsls	r4, r3, #31
 8006fc6:	d50e      	bpl.n	8006fe6 <_vfiprintf_r+0x6a>
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	b01d      	add	sp, #116	; 0x74
 8006fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd2:	4b7b      	ldr	r3, [pc, #492]	; (80071c0 <_vfiprintf_r+0x244>)
 8006fd4:	429d      	cmp	r5, r3
 8006fd6:	d101      	bne.n	8006fdc <_vfiprintf_r+0x60>
 8006fd8:	68b5      	ldr	r5, [r6, #8]
 8006fda:	e7df      	b.n	8006f9c <_vfiprintf_r+0x20>
 8006fdc:	4b79      	ldr	r3, [pc, #484]	; (80071c4 <_vfiprintf_r+0x248>)
 8006fde:	429d      	cmp	r5, r3
 8006fe0:	bf08      	it	eq
 8006fe2:	68f5      	ldreq	r5, [r6, #12]
 8006fe4:	e7da      	b.n	8006f9c <_vfiprintf_r+0x20>
 8006fe6:	89ab      	ldrh	r3, [r5, #12]
 8006fe8:	0598      	lsls	r0, r3, #22
 8006fea:	d4ed      	bmi.n	8006fc8 <_vfiprintf_r+0x4c>
 8006fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fee:	f000 fb84 	bl	80076fa <__retarget_lock_release_recursive>
 8006ff2:	e7e9      	b.n	8006fc8 <_vfiprintf_r+0x4c>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff8:	2320      	movs	r3, #32
 8006ffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007002:	2330      	movs	r3, #48	; 0x30
 8007004:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071c8 <_vfiprintf_r+0x24c>
 8007008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800700c:	f04f 0901 	mov.w	r9, #1
 8007010:	4623      	mov	r3, r4
 8007012:	469a      	mov	sl, r3
 8007014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007018:	b10a      	cbz	r2, 800701e <_vfiprintf_r+0xa2>
 800701a:	2a25      	cmp	r2, #37	; 0x25
 800701c:	d1f9      	bne.n	8007012 <_vfiprintf_r+0x96>
 800701e:	ebba 0b04 	subs.w	fp, sl, r4
 8007022:	d00b      	beq.n	800703c <_vfiprintf_r+0xc0>
 8007024:	465b      	mov	r3, fp
 8007026:	4622      	mov	r2, r4
 8007028:	4629      	mov	r1, r5
 800702a:	4630      	mov	r0, r6
 800702c:	f7ff ff93 	bl	8006f56 <__sfputs_r>
 8007030:	3001      	adds	r0, #1
 8007032:	f000 80aa 	beq.w	800718a <_vfiprintf_r+0x20e>
 8007036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007038:	445a      	add	r2, fp
 800703a:	9209      	str	r2, [sp, #36]	; 0x24
 800703c:	f89a 3000 	ldrb.w	r3, [sl]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80a2 	beq.w	800718a <_vfiprintf_r+0x20e>
 8007046:	2300      	movs	r3, #0
 8007048:	f04f 32ff 	mov.w	r2, #4294967295
 800704c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007050:	f10a 0a01 	add.w	sl, sl, #1
 8007054:	9304      	str	r3, [sp, #16]
 8007056:	9307      	str	r3, [sp, #28]
 8007058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800705c:	931a      	str	r3, [sp, #104]	; 0x68
 800705e:	4654      	mov	r4, sl
 8007060:	2205      	movs	r2, #5
 8007062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007066:	4858      	ldr	r0, [pc, #352]	; (80071c8 <_vfiprintf_r+0x24c>)
 8007068:	f7f9 f8ca 	bl	8000200 <memchr>
 800706c:	9a04      	ldr	r2, [sp, #16]
 800706e:	b9d8      	cbnz	r0, 80070a8 <_vfiprintf_r+0x12c>
 8007070:	06d1      	lsls	r1, r2, #27
 8007072:	bf44      	itt	mi
 8007074:	2320      	movmi	r3, #32
 8007076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800707a:	0713      	lsls	r3, r2, #28
 800707c:	bf44      	itt	mi
 800707e:	232b      	movmi	r3, #43	; 0x2b
 8007080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007084:	f89a 3000 	ldrb.w	r3, [sl]
 8007088:	2b2a      	cmp	r3, #42	; 0x2a
 800708a:	d015      	beq.n	80070b8 <_vfiprintf_r+0x13c>
 800708c:	9a07      	ldr	r2, [sp, #28]
 800708e:	4654      	mov	r4, sl
 8007090:	2000      	movs	r0, #0
 8007092:	f04f 0c0a 	mov.w	ip, #10
 8007096:	4621      	mov	r1, r4
 8007098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800709c:	3b30      	subs	r3, #48	; 0x30
 800709e:	2b09      	cmp	r3, #9
 80070a0:	d94e      	bls.n	8007140 <_vfiprintf_r+0x1c4>
 80070a2:	b1b0      	cbz	r0, 80070d2 <_vfiprintf_r+0x156>
 80070a4:	9207      	str	r2, [sp, #28]
 80070a6:	e014      	b.n	80070d2 <_vfiprintf_r+0x156>
 80070a8:	eba0 0308 	sub.w	r3, r0, r8
 80070ac:	fa09 f303 	lsl.w	r3, r9, r3
 80070b0:	4313      	orrs	r3, r2
 80070b2:	9304      	str	r3, [sp, #16]
 80070b4:	46a2      	mov	sl, r4
 80070b6:	e7d2      	b.n	800705e <_vfiprintf_r+0xe2>
 80070b8:	9b03      	ldr	r3, [sp, #12]
 80070ba:	1d19      	adds	r1, r3, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	9103      	str	r1, [sp, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	bfbb      	ittet	lt
 80070c4:	425b      	neglt	r3, r3
 80070c6:	f042 0202 	orrlt.w	r2, r2, #2
 80070ca:	9307      	strge	r3, [sp, #28]
 80070cc:	9307      	strlt	r3, [sp, #28]
 80070ce:	bfb8      	it	lt
 80070d0:	9204      	strlt	r2, [sp, #16]
 80070d2:	7823      	ldrb	r3, [r4, #0]
 80070d4:	2b2e      	cmp	r3, #46	; 0x2e
 80070d6:	d10c      	bne.n	80070f2 <_vfiprintf_r+0x176>
 80070d8:	7863      	ldrb	r3, [r4, #1]
 80070da:	2b2a      	cmp	r3, #42	; 0x2a
 80070dc:	d135      	bne.n	800714a <_vfiprintf_r+0x1ce>
 80070de:	9b03      	ldr	r3, [sp, #12]
 80070e0:	1d1a      	adds	r2, r3, #4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	9203      	str	r2, [sp, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bfb8      	it	lt
 80070ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80070ee:	3402      	adds	r4, #2
 80070f0:	9305      	str	r3, [sp, #20]
 80070f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071d8 <_vfiprintf_r+0x25c>
 80070f6:	7821      	ldrb	r1, [r4, #0]
 80070f8:	2203      	movs	r2, #3
 80070fa:	4650      	mov	r0, sl
 80070fc:	f7f9 f880 	bl	8000200 <memchr>
 8007100:	b140      	cbz	r0, 8007114 <_vfiprintf_r+0x198>
 8007102:	2340      	movs	r3, #64	; 0x40
 8007104:	eba0 000a 	sub.w	r0, r0, sl
 8007108:	fa03 f000 	lsl.w	r0, r3, r0
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	4303      	orrs	r3, r0
 8007110:	3401      	adds	r4, #1
 8007112:	9304      	str	r3, [sp, #16]
 8007114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007118:	482c      	ldr	r0, [pc, #176]	; (80071cc <_vfiprintf_r+0x250>)
 800711a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800711e:	2206      	movs	r2, #6
 8007120:	f7f9 f86e 	bl	8000200 <memchr>
 8007124:	2800      	cmp	r0, #0
 8007126:	d03f      	beq.n	80071a8 <_vfiprintf_r+0x22c>
 8007128:	4b29      	ldr	r3, [pc, #164]	; (80071d0 <_vfiprintf_r+0x254>)
 800712a:	bb1b      	cbnz	r3, 8007174 <_vfiprintf_r+0x1f8>
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	3307      	adds	r3, #7
 8007130:	f023 0307 	bic.w	r3, r3, #7
 8007134:	3308      	adds	r3, #8
 8007136:	9303      	str	r3, [sp, #12]
 8007138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713a:	443b      	add	r3, r7
 800713c:	9309      	str	r3, [sp, #36]	; 0x24
 800713e:	e767      	b.n	8007010 <_vfiprintf_r+0x94>
 8007140:	fb0c 3202 	mla	r2, ip, r2, r3
 8007144:	460c      	mov	r4, r1
 8007146:	2001      	movs	r0, #1
 8007148:	e7a5      	b.n	8007096 <_vfiprintf_r+0x11a>
 800714a:	2300      	movs	r3, #0
 800714c:	3401      	adds	r4, #1
 800714e:	9305      	str	r3, [sp, #20]
 8007150:	4619      	mov	r1, r3
 8007152:	f04f 0c0a 	mov.w	ip, #10
 8007156:	4620      	mov	r0, r4
 8007158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800715c:	3a30      	subs	r2, #48	; 0x30
 800715e:	2a09      	cmp	r2, #9
 8007160:	d903      	bls.n	800716a <_vfiprintf_r+0x1ee>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0c5      	beq.n	80070f2 <_vfiprintf_r+0x176>
 8007166:	9105      	str	r1, [sp, #20]
 8007168:	e7c3      	b.n	80070f2 <_vfiprintf_r+0x176>
 800716a:	fb0c 2101 	mla	r1, ip, r1, r2
 800716e:	4604      	mov	r4, r0
 8007170:	2301      	movs	r3, #1
 8007172:	e7f0      	b.n	8007156 <_vfiprintf_r+0x1da>
 8007174:	ab03      	add	r3, sp, #12
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	462a      	mov	r2, r5
 800717a:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <_vfiprintf_r+0x258>)
 800717c:	a904      	add	r1, sp, #16
 800717e:	4630      	mov	r0, r6
 8007180:	f7fd fe12 	bl	8004da8 <_printf_float>
 8007184:	4607      	mov	r7, r0
 8007186:	1c78      	adds	r0, r7, #1
 8007188:	d1d6      	bne.n	8007138 <_vfiprintf_r+0x1bc>
 800718a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800718c:	07d9      	lsls	r1, r3, #31
 800718e:	d405      	bmi.n	800719c <_vfiprintf_r+0x220>
 8007190:	89ab      	ldrh	r3, [r5, #12]
 8007192:	059a      	lsls	r2, r3, #22
 8007194:	d402      	bmi.n	800719c <_vfiprintf_r+0x220>
 8007196:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007198:	f000 faaf 	bl	80076fa <__retarget_lock_release_recursive>
 800719c:	89ab      	ldrh	r3, [r5, #12]
 800719e:	065b      	lsls	r3, r3, #25
 80071a0:	f53f af12 	bmi.w	8006fc8 <_vfiprintf_r+0x4c>
 80071a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071a6:	e711      	b.n	8006fcc <_vfiprintf_r+0x50>
 80071a8:	ab03      	add	r3, sp, #12
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	462a      	mov	r2, r5
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <_vfiprintf_r+0x258>)
 80071b0:	a904      	add	r1, sp, #16
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7fe f89c 	bl	80052f0 <_printf_i>
 80071b8:	e7e4      	b.n	8007184 <_vfiprintf_r+0x208>
 80071ba:	bf00      	nop
 80071bc:	08007dac 	.word	0x08007dac
 80071c0:	08007dcc 	.word	0x08007dcc
 80071c4:	08007d8c 	.word	0x08007d8c
 80071c8:	08007c34 	.word	0x08007c34
 80071cc:	08007c3e 	.word	0x08007c3e
 80071d0:	08004da9 	.word	0x08004da9
 80071d4:	08006f57 	.word	0x08006f57
 80071d8:	08007c3a 	.word	0x08007c3a

080071dc <__swbuf_r>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	460e      	mov	r6, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	4605      	mov	r5, r0
 80071e4:	b118      	cbz	r0, 80071ee <__swbuf_r+0x12>
 80071e6:	6983      	ldr	r3, [r0, #24]
 80071e8:	b90b      	cbnz	r3, 80071ee <__swbuf_r+0x12>
 80071ea:	f000 f9e7 	bl	80075bc <__sinit>
 80071ee:	4b21      	ldr	r3, [pc, #132]	; (8007274 <__swbuf_r+0x98>)
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d12b      	bne.n	800724c <__swbuf_r+0x70>
 80071f4:	686c      	ldr	r4, [r5, #4]
 80071f6:	69a3      	ldr	r3, [r4, #24]
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	071a      	lsls	r2, r3, #28
 80071fe:	d52f      	bpl.n	8007260 <__swbuf_r+0x84>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	b36b      	cbz	r3, 8007260 <__swbuf_r+0x84>
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	6820      	ldr	r0, [r4, #0]
 8007208:	1ac0      	subs	r0, r0, r3
 800720a:	6963      	ldr	r3, [r4, #20]
 800720c:	b2f6      	uxtb	r6, r6
 800720e:	4283      	cmp	r3, r0
 8007210:	4637      	mov	r7, r6
 8007212:	dc04      	bgt.n	800721e <__swbuf_r+0x42>
 8007214:	4621      	mov	r1, r4
 8007216:	4628      	mov	r0, r5
 8007218:	f000 f93c 	bl	8007494 <_fflush_r>
 800721c:	bb30      	cbnz	r0, 800726c <__swbuf_r+0x90>
 800721e:	68a3      	ldr	r3, [r4, #8]
 8007220:	3b01      	subs	r3, #1
 8007222:	60a3      	str	r3, [r4, #8]
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	6022      	str	r2, [r4, #0]
 800722a:	701e      	strb	r6, [r3, #0]
 800722c:	6963      	ldr	r3, [r4, #20]
 800722e:	3001      	adds	r0, #1
 8007230:	4283      	cmp	r3, r0
 8007232:	d004      	beq.n	800723e <__swbuf_r+0x62>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	07db      	lsls	r3, r3, #31
 8007238:	d506      	bpl.n	8007248 <__swbuf_r+0x6c>
 800723a:	2e0a      	cmp	r6, #10
 800723c:	d104      	bne.n	8007248 <__swbuf_r+0x6c>
 800723e:	4621      	mov	r1, r4
 8007240:	4628      	mov	r0, r5
 8007242:	f000 f927 	bl	8007494 <_fflush_r>
 8007246:	b988      	cbnz	r0, 800726c <__swbuf_r+0x90>
 8007248:	4638      	mov	r0, r7
 800724a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800724c:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <__swbuf_r+0x9c>)
 800724e:	429c      	cmp	r4, r3
 8007250:	d101      	bne.n	8007256 <__swbuf_r+0x7a>
 8007252:	68ac      	ldr	r4, [r5, #8]
 8007254:	e7cf      	b.n	80071f6 <__swbuf_r+0x1a>
 8007256:	4b09      	ldr	r3, [pc, #36]	; (800727c <__swbuf_r+0xa0>)
 8007258:	429c      	cmp	r4, r3
 800725a:	bf08      	it	eq
 800725c:	68ec      	ldreq	r4, [r5, #12]
 800725e:	e7ca      	b.n	80071f6 <__swbuf_r+0x1a>
 8007260:	4621      	mov	r1, r4
 8007262:	4628      	mov	r0, r5
 8007264:	f000 f81a 	bl	800729c <__swsetup_r>
 8007268:	2800      	cmp	r0, #0
 800726a:	d0cb      	beq.n	8007204 <__swbuf_r+0x28>
 800726c:	f04f 37ff 	mov.w	r7, #4294967295
 8007270:	e7ea      	b.n	8007248 <__swbuf_r+0x6c>
 8007272:	bf00      	nop
 8007274:	08007dac 	.word	0x08007dac
 8007278:	08007dcc 	.word	0x08007dcc
 800727c:	08007d8c 	.word	0x08007d8c

08007280 <__ascii_wctomb>:
 8007280:	b149      	cbz	r1, 8007296 <__ascii_wctomb+0x16>
 8007282:	2aff      	cmp	r2, #255	; 0xff
 8007284:	bf85      	ittet	hi
 8007286:	238a      	movhi	r3, #138	; 0x8a
 8007288:	6003      	strhi	r3, [r0, #0]
 800728a:	700a      	strbls	r2, [r1, #0]
 800728c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007290:	bf98      	it	ls
 8007292:	2001      	movls	r0, #1
 8007294:	4770      	bx	lr
 8007296:	4608      	mov	r0, r1
 8007298:	4770      	bx	lr
	...

0800729c <__swsetup_r>:
 800729c:	4b32      	ldr	r3, [pc, #200]	; (8007368 <__swsetup_r+0xcc>)
 800729e:	b570      	push	{r4, r5, r6, lr}
 80072a0:	681d      	ldr	r5, [r3, #0]
 80072a2:	4606      	mov	r6, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	b125      	cbz	r5, 80072b2 <__swsetup_r+0x16>
 80072a8:	69ab      	ldr	r3, [r5, #24]
 80072aa:	b913      	cbnz	r3, 80072b2 <__swsetup_r+0x16>
 80072ac:	4628      	mov	r0, r5
 80072ae:	f000 f985 	bl	80075bc <__sinit>
 80072b2:	4b2e      	ldr	r3, [pc, #184]	; (800736c <__swsetup_r+0xd0>)
 80072b4:	429c      	cmp	r4, r3
 80072b6:	d10f      	bne.n	80072d8 <__swsetup_r+0x3c>
 80072b8:	686c      	ldr	r4, [r5, #4]
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072c0:	0719      	lsls	r1, r3, #28
 80072c2:	d42c      	bmi.n	800731e <__swsetup_r+0x82>
 80072c4:	06dd      	lsls	r5, r3, #27
 80072c6:	d411      	bmi.n	80072ec <__swsetup_r+0x50>
 80072c8:	2309      	movs	r3, #9
 80072ca:	6033      	str	r3, [r6, #0]
 80072cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072d0:	81a3      	strh	r3, [r4, #12]
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295
 80072d6:	e03e      	b.n	8007356 <__swsetup_r+0xba>
 80072d8:	4b25      	ldr	r3, [pc, #148]	; (8007370 <__swsetup_r+0xd4>)
 80072da:	429c      	cmp	r4, r3
 80072dc:	d101      	bne.n	80072e2 <__swsetup_r+0x46>
 80072de:	68ac      	ldr	r4, [r5, #8]
 80072e0:	e7eb      	b.n	80072ba <__swsetup_r+0x1e>
 80072e2:	4b24      	ldr	r3, [pc, #144]	; (8007374 <__swsetup_r+0xd8>)
 80072e4:	429c      	cmp	r4, r3
 80072e6:	bf08      	it	eq
 80072e8:	68ec      	ldreq	r4, [r5, #12]
 80072ea:	e7e6      	b.n	80072ba <__swsetup_r+0x1e>
 80072ec:	0758      	lsls	r0, r3, #29
 80072ee:	d512      	bpl.n	8007316 <__swsetup_r+0x7a>
 80072f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072f2:	b141      	cbz	r1, 8007306 <__swsetup_r+0x6a>
 80072f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072f8:	4299      	cmp	r1, r3
 80072fa:	d002      	beq.n	8007302 <__swsetup_r+0x66>
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff fb6f 	bl	80069e0 <_free_r>
 8007302:	2300      	movs	r3, #0
 8007304:	6363      	str	r3, [r4, #52]	; 0x34
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	2300      	movs	r3, #0
 8007310:	6063      	str	r3, [r4, #4]
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	89a3      	ldrh	r3, [r4, #12]
 8007318:	f043 0308 	orr.w	r3, r3, #8
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	b94b      	cbnz	r3, 8007336 <__swsetup_r+0x9a>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800732c:	d003      	beq.n	8007336 <__swsetup_r+0x9a>
 800732e:	4621      	mov	r1, r4
 8007330:	4630      	mov	r0, r6
 8007332:	f000 fa07 	bl	8007744 <__smakebuf_r>
 8007336:	89a0      	ldrh	r0, [r4, #12]
 8007338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800733c:	f010 0301 	ands.w	r3, r0, #1
 8007340:	d00a      	beq.n	8007358 <__swsetup_r+0xbc>
 8007342:	2300      	movs	r3, #0
 8007344:	60a3      	str	r3, [r4, #8]
 8007346:	6963      	ldr	r3, [r4, #20]
 8007348:	425b      	negs	r3, r3
 800734a:	61a3      	str	r3, [r4, #24]
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	b943      	cbnz	r3, 8007362 <__swsetup_r+0xc6>
 8007350:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007354:	d1ba      	bne.n	80072cc <__swsetup_r+0x30>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	0781      	lsls	r1, r0, #30
 800735a:	bf58      	it	pl
 800735c:	6963      	ldrpl	r3, [r4, #20]
 800735e:	60a3      	str	r3, [r4, #8]
 8007360:	e7f4      	b.n	800734c <__swsetup_r+0xb0>
 8007362:	2000      	movs	r0, #0
 8007364:	e7f7      	b.n	8007356 <__swsetup_r+0xba>
 8007366:	bf00      	nop
 8007368:	2000000c 	.word	0x2000000c
 800736c:	08007dac 	.word	0x08007dac
 8007370:	08007dcc 	.word	0x08007dcc
 8007374:	08007d8c 	.word	0x08007d8c

08007378 <abort>:
 8007378:	b508      	push	{r3, lr}
 800737a:	2006      	movs	r0, #6
 800737c:	f000 fa52 	bl	8007824 <raise>
 8007380:	2001      	movs	r0, #1
 8007382:	f7fa fbbf 	bl	8001b04 <_exit>
	...

08007388 <__sflush_r>:
 8007388:	898a      	ldrh	r2, [r1, #12]
 800738a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800738e:	4605      	mov	r5, r0
 8007390:	0710      	lsls	r0, r2, #28
 8007392:	460c      	mov	r4, r1
 8007394:	d458      	bmi.n	8007448 <__sflush_r+0xc0>
 8007396:	684b      	ldr	r3, [r1, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	dc05      	bgt.n	80073a8 <__sflush_r+0x20>
 800739c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dc02      	bgt.n	80073a8 <__sflush_r+0x20>
 80073a2:	2000      	movs	r0, #0
 80073a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073aa:	2e00      	cmp	r6, #0
 80073ac:	d0f9      	beq.n	80073a2 <__sflush_r+0x1a>
 80073ae:	2300      	movs	r3, #0
 80073b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073b4:	682f      	ldr	r7, [r5, #0]
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	d032      	beq.n	8007420 <__sflush_r+0x98>
 80073ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	075a      	lsls	r2, r3, #29
 80073c0:	d505      	bpl.n	80073ce <__sflush_r+0x46>
 80073c2:	6863      	ldr	r3, [r4, #4]
 80073c4:	1ac0      	subs	r0, r0, r3
 80073c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073c8:	b10b      	cbz	r3, 80073ce <__sflush_r+0x46>
 80073ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073cc:	1ac0      	subs	r0, r0, r3
 80073ce:	2300      	movs	r3, #0
 80073d0:	4602      	mov	r2, r0
 80073d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073d4:	6a21      	ldr	r1, [r4, #32]
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b0      	blx	r6
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	d106      	bne.n	80073ee <__sflush_r+0x66>
 80073e0:	6829      	ldr	r1, [r5, #0]
 80073e2:	291d      	cmp	r1, #29
 80073e4:	d82c      	bhi.n	8007440 <__sflush_r+0xb8>
 80073e6:	4a2a      	ldr	r2, [pc, #168]	; (8007490 <__sflush_r+0x108>)
 80073e8:	40ca      	lsrs	r2, r1
 80073ea:	07d6      	lsls	r6, r2, #31
 80073ec:	d528      	bpl.n	8007440 <__sflush_r+0xb8>
 80073ee:	2200      	movs	r2, #0
 80073f0:	6062      	str	r2, [r4, #4]
 80073f2:	04d9      	lsls	r1, r3, #19
 80073f4:	6922      	ldr	r2, [r4, #16]
 80073f6:	6022      	str	r2, [r4, #0]
 80073f8:	d504      	bpl.n	8007404 <__sflush_r+0x7c>
 80073fa:	1c42      	adds	r2, r0, #1
 80073fc:	d101      	bne.n	8007402 <__sflush_r+0x7a>
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	b903      	cbnz	r3, 8007404 <__sflush_r+0x7c>
 8007402:	6560      	str	r0, [r4, #84]	; 0x54
 8007404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007406:	602f      	str	r7, [r5, #0]
 8007408:	2900      	cmp	r1, #0
 800740a:	d0ca      	beq.n	80073a2 <__sflush_r+0x1a>
 800740c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007410:	4299      	cmp	r1, r3
 8007412:	d002      	beq.n	800741a <__sflush_r+0x92>
 8007414:	4628      	mov	r0, r5
 8007416:	f7ff fae3 	bl	80069e0 <_free_r>
 800741a:	2000      	movs	r0, #0
 800741c:	6360      	str	r0, [r4, #52]	; 0x34
 800741e:	e7c1      	b.n	80073a4 <__sflush_r+0x1c>
 8007420:	6a21      	ldr	r1, [r4, #32]
 8007422:	2301      	movs	r3, #1
 8007424:	4628      	mov	r0, r5
 8007426:	47b0      	blx	r6
 8007428:	1c41      	adds	r1, r0, #1
 800742a:	d1c7      	bne.n	80073bc <__sflush_r+0x34>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0c4      	beq.n	80073bc <__sflush_r+0x34>
 8007432:	2b1d      	cmp	r3, #29
 8007434:	d001      	beq.n	800743a <__sflush_r+0xb2>
 8007436:	2b16      	cmp	r3, #22
 8007438:	d101      	bne.n	800743e <__sflush_r+0xb6>
 800743a:	602f      	str	r7, [r5, #0]
 800743c:	e7b1      	b.n	80073a2 <__sflush_r+0x1a>
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007444:	81a3      	strh	r3, [r4, #12]
 8007446:	e7ad      	b.n	80073a4 <__sflush_r+0x1c>
 8007448:	690f      	ldr	r7, [r1, #16]
 800744a:	2f00      	cmp	r7, #0
 800744c:	d0a9      	beq.n	80073a2 <__sflush_r+0x1a>
 800744e:	0793      	lsls	r3, r2, #30
 8007450:	680e      	ldr	r6, [r1, #0]
 8007452:	bf08      	it	eq
 8007454:	694b      	ldreq	r3, [r1, #20]
 8007456:	600f      	str	r7, [r1, #0]
 8007458:	bf18      	it	ne
 800745a:	2300      	movne	r3, #0
 800745c:	eba6 0807 	sub.w	r8, r6, r7
 8007460:	608b      	str	r3, [r1, #8]
 8007462:	f1b8 0f00 	cmp.w	r8, #0
 8007466:	dd9c      	ble.n	80073a2 <__sflush_r+0x1a>
 8007468:	6a21      	ldr	r1, [r4, #32]
 800746a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800746c:	4643      	mov	r3, r8
 800746e:	463a      	mov	r2, r7
 8007470:	4628      	mov	r0, r5
 8007472:	47b0      	blx	r6
 8007474:	2800      	cmp	r0, #0
 8007476:	dc06      	bgt.n	8007486 <__sflush_r+0xfe>
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	f04f 30ff 	mov.w	r0, #4294967295
 8007484:	e78e      	b.n	80073a4 <__sflush_r+0x1c>
 8007486:	4407      	add	r7, r0
 8007488:	eba8 0800 	sub.w	r8, r8, r0
 800748c:	e7e9      	b.n	8007462 <__sflush_r+0xda>
 800748e:	bf00      	nop
 8007490:	20400001 	.word	0x20400001

08007494 <_fflush_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	690b      	ldr	r3, [r1, #16]
 8007498:	4605      	mov	r5, r0
 800749a:	460c      	mov	r4, r1
 800749c:	b913      	cbnz	r3, 80074a4 <_fflush_r+0x10>
 800749e:	2500      	movs	r5, #0
 80074a0:	4628      	mov	r0, r5
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	b118      	cbz	r0, 80074ae <_fflush_r+0x1a>
 80074a6:	6983      	ldr	r3, [r0, #24]
 80074a8:	b90b      	cbnz	r3, 80074ae <_fflush_r+0x1a>
 80074aa:	f000 f887 	bl	80075bc <__sinit>
 80074ae:	4b14      	ldr	r3, [pc, #80]	; (8007500 <_fflush_r+0x6c>)
 80074b0:	429c      	cmp	r4, r3
 80074b2:	d11b      	bne.n	80074ec <_fflush_r+0x58>
 80074b4:	686c      	ldr	r4, [r5, #4]
 80074b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0ef      	beq.n	800749e <_fflush_r+0xa>
 80074be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074c0:	07d0      	lsls	r0, r2, #31
 80074c2:	d404      	bmi.n	80074ce <_fflush_r+0x3a>
 80074c4:	0599      	lsls	r1, r3, #22
 80074c6:	d402      	bmi.n	80074ce <_fflush_r+0x3a>
 80074c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ca:	f000 f915 	bl	80076f8 <__retarget_lock_acquire_recursive>
 80074ce:	4628      	mov	r0, r5
 80074d0:	4621      	mov	r1, r4
 80074d2:	f7ff ff59 	bl	8007388 <__sflush_r>
 80074d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074d8:	07da      	lsls	r2, r3, #31
 80074da:	4605      	mov	r5, r0
 80074dc:	d4e0      	bmi.n	80074a0 <_fflush_r+0xc>
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	059b      	lsls	r3, r3, #22
 80074e2:	d4dd      	bmi.n	80074a0 <_fflush_r+0xc>
 80074e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e6:	f000 f908 	bl	80076fa <__retarget_lock_release_recursive>
 80074ea:	e7d9      	b.n	80074a0 <_fflush_r+0xc>
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <_fflush_r+0x70>)
 80074ee:	429c      	cmp	r4, r3
 80074f0:	d101      	bne.n	80074f6 <_fflush_r+0x62>
 80074f2:	68ac      	ldr	r4, [r5, #8]
 80074f4:	e7df      	b.n	80074b6 <_fflush_r+0x22>
 80074f6:	4b04      	ldr	r3, [pc, #16]	; (8007508 <_fflush_r+0x74>)
 80074f8:	429c      	cmp	r4, r3
 80074fa:	bf08      	it	eq
 80074fc:	68ec      	ldreq	r4, [r5, #12]
 80074fe:	e7da      	b.n	80074b6 <_fflush_r+0x22>
 8007500:	08007dac 	.word	0x08007dac
 8007504:	08007dcc 	.word	0x08007dcc
 8007508:	08007d8c 	.word	0x08007d8c

0800750c <std>:
 800750c:	2300      	movs	r3, #0
 800750e:	b510      	push	{r4, lr}
 8007510:	4604      	mov	r4, r0
 8007512:	e9c0 3300 	strd	r3, r3, [r0]
 8007516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800751a:	6083      	str	r3, [r0, #8]
 800751c:	8181      	strh	r1, [r0, #12]
 800751e:	6643      	str	r3, [r0, #100]	; 0x64
 8007520:	81c2      	strh	r2, [r0, #14]
 8007522:	6183      	str	r3, [r0, #24]
 8007524:	4619      	mov	r1, r3
 8007526:	2208      	movs	r2, #8
 8007528:	305c      	adds	r0, #92	; 0x5c
 800752a:	f7fd fb95 	bl	8004c58 <memset>
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <std+0x38>)
 8007530:	6263      	str	r3, [r4, #36]	; 0x24
 8007532:	4b05      	ldr	r3, [pc, #20]	; (8007548 <std+0x3c>)
 8007534:	62a3      	str	r3, [r4, #40]	; 0x28
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <std+0x40>)
 8007538:	62e3      	str	r3, [r4, #44]	; 0x2c
 800753a:	4b05      	ldr	r3, [pc, #20]	; (8007550 <std+0x44>)
 800753c:	6224      	str	r4, [r4, #32]
 800753e:	6323      	str	r3, [r4, #48]	; 0x30
 8007540:	bd10      	pop	{r4, pc}
 8007542:	bf00      	nop
 8007544:	0800785d 	.word	0x0800785d
 8007548:	0800787f 	.word	0x0800787f
 800754c:	080078b7 	.word	0x080078b7
 8007550:	080078db 	.word	0x080078db

08007554 <_cleanup_r>:
 8007554:	4901      	ldr	r1, [pc, #4]	; (800755c <_cleanup_r+0x8>)
 8007556:	f000 b8af 	b.w	80076b8 <_fwalk_reent>
 800755a:	bf00      	nop
 800755c:	08007495 	.word	0x08007495

08007560 <__sfmoreglue>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	1e4a      	subs	r2, r1, #1
 8007564:	2568      	movs	r5, #104	; 0x68
 8007566:	4355      	muls	r5, r2
 8007568:	460e      	mov	r6, r1
 800756a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800756e:	f7ff fa87 	bl	8006a80 <_malloc_r>
 8007572:	4604      	mov	r4, r0
 8007574:	b140      	cbz	r0, 8007588 <__sfmoreglue+0x28>
 8007576:	2100      	movs	r1, #0
 8007578:	e9c0 1600 	strd	r1, r6, [r0]
 800757c:	300c      	adds	r0, #12
 800757e:	60a0      	str	r0, [r4, #8]
 8007580:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007584:	f7fd fb68 	bl	8004c58 <memset>
 8007588:	4620      	mov	r0, r4
 800758a:	bd70      	pop	{r4, r5, r6, pc}

0800758c <__sfp_lock_acquire>:
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <__sfp_lock_acquire+0x8>)
 800758e:	f000 b8b3 	b.w	80076f8 <__retarget_lock_acquire_recursive>
 8007592:	bf00      	nop
 8007594:	200003d0 	.word	0x200003d0

08007598 <__sfp_lock_release>:
 8007598:	4801      	ldr	r0, [pc, #4]	; (80075a0 <__sfp_lock_release+0x8>)
 800759a:	f000 b8ae 	b.w	80076fa <__retarget_lock_release_recursive>
 800759e:	bf00      	nop
 80075a0:	200003d0 	.word	0x200003d0

080075a4 <__sinit_lock_acquire>:
 80075a4:	4801      	ldr	r0, [pc, #4]	; (80075ac <__sinit_lock_acquire+0x8>)
 80075a6:	f000 b8a7 	b.w	80076f8 <__retarget_lock_acquire_recursive>
 80075aa:	bf00      	nop
 80075ac:	200003cb 	.word	0x200003cb

080075b0 <__sinit_lock_release>:
 80075b0:	4801      	ldr	r0, [pc, #4]	; (80075b8 <__sinit_lock_release+0x8>)
 80075b2:	f000 b8a2 	b.w	80076fa <__retarget_lock_release_recursive>
 80075b6:	bf00      	nop
 80075b8:	200003cb 	.word	0x200003cb

080075bc <__sinit>:
 80075bc:	b510      	push	{r4, lr}
 80075be:	4604      	mov	r4, r0
 80075c0:	f7ff fff0 	bl	80075a4 <__sinit_lock_acquire>
 80075c4:	69a3      	ldr	r3, [r4, #24]
 80075c6:	b11b      	cbz	r3, 80075d0 <__sinit+0x14>
 80075c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075cc:	f7ff bff0 	b.w	80075b0 <__sinit_lock_release>
 80075d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075d4:	6523      	str	r3, [r4, #80]	; 0x50
 80075d6:	4b13      	ldr	r3, [pc, #76]	; (8007624 <__sinit+0x68>)
 80075d8:	4a13      	ldr	r2, [pc, #76]	; (8007628 <__sinit+0x6c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80075de:	42a3      	cmp	r3, r4
 80075e0:	bf04      	itt	eq
 80075e2:	2301      	moveq	r3, #1
 80075e4:	61a3      	streq	r3, [r4, #24]
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 f820 	bl	800762c <__sfp>
 80075ec:	6060      	str	r0, [r4, #4]
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 f81c 	bl	800762c <__sfp>
 80075f4:	60a0      	str	r0, [r4, #8]
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 f818 	bl	800762c <__sfp>
 80075fc:	2200      	movs	r2, #0
 80075fe:	60e0      	str	r0, [r4, #12]
 8007600:	2104      	movs	r1, #4
 8007602:	6860      	ldr	r0, [r4, #4]
 8007604:	f7ff ff82 	bl	800750c <std>
 8007608:	68a0      	ldr	r0, [r4, #8]
 800760a:	2201      	movs	r2, #1
 800760c:	2109      	movs	r1, #9
 800760e:	f7ff ff7d 	bl	800750c <std>
 8007612:	68e0      	ldr	r0, [r4, #12]
 8007614:	2202      	movs	r2, #2
 8007616:	2112      	movs	r1, #18
 8007618:	f7ff ff78 	bl	800750c <std>
 800761c:	2301      	movs	r3, #1
 800761e:	61a3      	str	r3, [r4, #24]
 8007620:	e7d2      	b.n	80075c8 <__sinit+0xc>
 8007622:	bf00      	nop
 8007624:	08007a0c 	.word	0x08007a0c
 8007628:	08007555 	.word	0x08007555

0800762c <__sfp>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	4607      	mov	r7, r0
 8007630:	f7ff ffac 	bl	800758c <__sfp_lock_acquire>
 8007634:	4b1e      	ldr	r3, [pc, #120]	; (80076b0 <__sfp+0x84>)
 8007636:	681e      	ldr	r6, [r3, #0]
 8007638:	69b3      	ldr	r3, [r6, #24]
 800763a:	b913      	cbnz	r3, 8007642 <__sfp+0x16>
 800763c:	4630      	mov	r0, r6
 800763e:	f7ff ffbd 	bl	80075bc <__sinit>
 8007642:	3648      	adds	r6, #72	; 0x48
 8007644:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007648:	3b01      	subs	r3, #1
 800764a:	d503      	bpl.n	8007654 <__sfp+0x28>
 800764c:	6833      	ldr	r3, [r6, #0]
 800764e:	b30b      	cbz	r3, 8007694 <__sfp+0x68>
 8007650:	6836      	ldr	r6, [r6, #0]
 8007652:	e7f7      	b.n	8007644 <__sfp+0x18>
 8007654:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007658:	b9d5      	cbnz	r5, 8007690 <__sfp+0x64>
 800765a:	4b16      	ldr	r3, [pc, #88]	; (80076b4 <__sfp+0x88>)
 800765c:	60e3      	str	r3, [r4, #12]
 800765e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007662:	6665      	str	r5, [r4, #100]	; 0x64
 8007664:	f000 f847 	bl	80076f6 <__retarget_lock_init_recursive>
 8007668:	f7ff ff96 	bl	8007598 <__sfp_lock_release>
 800766c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007670:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007674:	6025      	str	r5, [r4, #0]
 8007676:	61a5      	str	r5, [r4, #24]
 8007678:	2208      	movs	r2, #8
 800767a:	4629      	mov	r1, r5
 800767c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007680:	f7fd faea 	bl	8004c58 <memset>
 8007684:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007688:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800768c:	4620      	mov	r0, r4
 800768e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007690:	3468      	adds	r4, #104	; 0x68
 8007692:	e7d9      	b.n	8007648 <__sfp+0x1c>
 8007694:	2104      	movs	r1, #4
 8007696:	4638      	mov	r0, r7
 8007698:	f7ff ff62 	bl	8007560 <__sfmoreglue>
 800769c:	4604      	mov	r4, r0
 800769e:	6030      	str	r0, [r6, #0]
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d1d5      	bne.n	8007650 <__sfp+0x24>
 80076a4:	f7ff ff78 	bl	8007598 <__sfp_lock_release>
 80076a8:	230c      	movs	r3, #12
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	e7ee      	b.n	800768c <__sfp+0x60>
 80076ae:	bf00      	nop
 80076b0:	08007a0c 	.word	0x08007a0c
 80076b4:	ffff0001 	.word	0xffff0001

080076b8 <_fwalk_reent>:
 80076b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076bc:	4606      	mov	r6, r0
 80076be:	4688      	mov	r8, r1
 80076c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076c4:	2700      	movs	r7, #0
 80076c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076ca:	f1b9 0901 	subs.w	r9, r9, #1
 80076ce:	d505      	bpl.n	80076dc <_fwalk_reent+0x24>
 80076d0:	6824      	ldr	r4, [r4, #0]
 80076d2:	2c00      	cmp	r4, #0
 80076d4:	d1f7      	bne.n	80076c6 <_fwalk_reent+0xe>
 80076d6:	4638      	mov	r0, r7
 80076d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076dc:	89ab      	ldrh	r3, [r5, #12]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d907      	bls.n	80076f2 <_fwalk_reent+0x3a>
 80076e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076e6:	3301      	adds	r3, #1
 80076e8:	d003      	beq.n	80076f2 <_fwalk_reent+0x3a>
 80076ea:	4629      	mov	r1, r5
 80076ec:	4630      	mov	r0, r6
 80076ee:	47c0      	blx	r8
 80076f0:	4307      	orrs	r7, r0
 80076f2:	3568      	adds	r5, #104	; 0x68
 80076f4:	e7e9      	b.n	80076ca <_fwalk_reent+0x12>

080076f6 <__retarget_lock_init_recursive>:
 80076f6:	4770      	bx	lr

080076f8 <__retarget_lock_acquire_recursive>:
 80076f8:	4770      	bx	lr

080076fa <__retarget_lock_release_recursive>:
 80076fa:	4770      	bx	lr

080076fc <__swhatbuf_r>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	460e      	mov	r6, r1
 8007700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007704:	2900      	cmp	r1, #0
 8007706:	b096      	sub	sp, #88	; 0x58
 8007708:	4614      	mov	r4, r2
 800770a:	461d      	mov	r5, r3
 800770c:	da07      	bge.n	800771e <__swhatbuf_r+0x22>
 800770e:	2300      	movs	r3, #0
 8007710:	602b      	str	r3, [r5, #0]
 8007712:	89b3      	ldrh	r3, [r6, #12]
 8007714:	061a      	lsls	r2, r3, #24
 8007716:	d410      	bmi.n	800773a <__swhatbuf_r+0x3e>
 8007718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800771c:	e00e      	b.n	800773c <__swhatbuf_r+0x40>
 800771e:	466a      	mov	r2, sp
 8007720:	f000 f902 	bl	8007928 <_fstat_r>
 8007724:	2800      	cmp	r0, #0
 8007726:	dbf2      	blt.n	800770e <__swhatbuf_r+0x12>
 8007728:	9a01      	ldr	r2, [sp, #4]
 800772a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800772e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007732:	425a      	negs	r2, r3
 8007734:	415a      	adcs	r2, r3
 8007736:	602a      	str	r2, [r5, #0]
 8007738:	e7ee      	b.n	8007718 <__swhatbuf_r+0x1c>
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	2000      	movs	r0, #0
 800773e:	6023      	str	r3, [r4, #0]
 8007740:	b016      	add	sp, #88	; 0x58
 8007742:	bd70      	pop	{r4, r5, r6, pc}

08007744 <__smakebuf_r>:
 8007744:	898b      	ldrh	r3, [r1, #12]
 8007746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007748:	079d      	lsls	r5, r3, #30
 800774a:	4606      	mov	r6, r0
 800774c:	460c      	mov	r4, r1
 800774e:	d507      	bpl.n	8007760 <__smakebuf_r+0x1c>
 8007750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	6123      	str	r3, [r4, #16]
 8007758:	2301      	movs	r3, #1
 800775a:	6163      	str	r3, [r4, #20]
 800775c:	b002      	add	sp, #8
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	ab01      	add	r3, sp, #4
 8007762:	466a      	mov	r2, sp
 8007764:	f7ff ffca 	bl	80076fc <__swhatbuf_r>
 8007768:	9900      	ldr	r1, [sp, #0]
 800776a:	4605      	mov	r5, r0
 800776c:	4630      	mov	r0, r6
 800776e:	f7ff f987 	bl	8006a80 <_malloc_r>
 8007772:	b948      	cbnz	r0, 8007788 <__smakebuf_r+0x44>
 8007774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007778:	059a      	lsls	r2, r3, #22
 800777a:	d4ef      	bmi.n	800775c <__smakebuf_r+0x18>
 800777c:	f023 0303 	bic.w	r3, r3, #3
 8007780:	f043 0302 	orr.w	r3, r3, #2
 8007784:	81a3      	strh	r3, [r4, #12]
 8007786:	e7e3      	b.n	8007750 <__smakebuf_r+0xc>
 8007788:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <__smakebuf_r+0x7c>)
 800778a:	62b3      	str	r3, [r6, #40]	; 0x28
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	6020      	str	r0, [r4, #0]
 8007790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007794:	81a3      	strh	r3, [r4, #12]
 8007796:	9b00      	ldr	r3, [sp, #0]
 8007798:	6163      	str	r3, [r4, #20]
 800779a:	9b01      	ldr	r3, [sp, #4]
 800779c:	6120      	str	r0, [r4, #16]
 800779e:	b15b      	cbz	r3, 80077b8 <__smakebuf_r+0x74>
 80077a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077a4:	4630      	mov	r0, r6
 80077a6:	f000 f8d1 	bl	800794c <_isatty_r>
 80077aa:	b128      	cbz	r0, 80077b8 <__smakebuf_r+0x74>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	f023 0303 	bic.w	r3, r3, #3
 80077b2:	f043 0301 	orr.w	r3, r3, #1
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	89a0      	ldrh	r0, [r4, #12]
 80077ba:	4305      	orrs	r5, r0
 80077bc:	81a5      	strh	r5, [r4, #12]
 80077be:	e7cd      	b.n	800775c <__smakebuf_r+0x18>
 80077c0:	08007555 	.word	0x08007555

080077c4 <_malloc_usable_size_r>:
 80077c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c8:	1f18      	subs	r0, r3, #4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	bfbc      	itt	lt
 80077ce:	580b      	ldrlt	r3, [r1, r0]
 80077d0:	18c0      	addlt	r0, r0, r3
 80077d2:	4770      	bx	lr

080077d4 <_raise_r>:
 80077d4:	291f      	cmp	r1, #31
 80077d6:	b538      	push	{r3, r4, r5, lr}
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	d904      	bls.n	80077e8 <_raise_r+0x14>
 80077de:	2316      	movs	r3, #22
 80077e0:	6003      	str	r3, [r0, #0]
 80077e2:	f04f 30ff 	mov.w	r0, #4294967295
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077ea:	b112      	cbz	r2, 80077f2 <_raise_r+0x1e>
 80077ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077f0:	b94b      	cbnz	r3, 8007806 <_raise_r+0x32>
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 f830 	bl	8007858 <_getpid_r>
 80077f8:	462a      	mov	r2, r5
 80077fa:	4601      	mov	r1, r0
 80077fc:	4620      	mov	r0, r4
 80077fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007802:	f000 b817 	b.w	8007834 <_kill_r>
 8007806:	2b01      	cmp	r3, #1
 8007808:	d00a      	beq.n	8007820 <_raise_r+0x4c>
 800780a:	1c59      	adds	r1, r3, #1
 800780c:	d103      	bne.n	8007816 <_raise_r+0x42>
 800780e:	2316      	movs	r3, #22
 8007810:	6003      	str	r3, [r0, #0]
 8007812:	2001      	movs	r0, #1
 8007814:	e7e7      	b.n	80077e6 <_raise_r+0x12>
 8007816:	2400      	movs	r4, #0
 8007818:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800781c:	4628      	mov	r0, r5
 800781e:	4798      	blx	r3
 8007820:	2000      	movs	r0, #0
 8007822:	e7e0      	b.n	80077e6 <_raise_r+0x12>

08007824 <raise>:
 8007824:	4b02      	ldr	r3, [pc, #8]	; (8007830 <raise+0xc>)
 8007826:	4601      	mov	r1, r0
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	f7ff bfd3 	b.w	80077d4 <_raise_r>
 800782e:	bf00      	nop
 8007830:	2000000c 	.word	0x2000000c

08007834 <_kill_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d07      	ldr	r5, [pc, #28]	; (8007854 <_kill_r+0x20>)
 8007838:	2300      	movs	r3, #0
 800783a:	4604      	mov	r4, r0
 800783c:	4608      	mov	r0, r1
 800783e:	4611      	mov	r1, r2
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	f7fa f94f 	bl	8001ae4 <_kill>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d102      	bne.n	8007850 <_kill_r+0x1c>
 800784a:	682b      	ldr	r3, [r5, #0]
 800784c:	b103      	cbz	r3, 8007850 <_kill_r+0x1c>
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	bd38      	pop	{r3, r4, r5, pc}
 8007852:	bf00      	nop
 8007854:	200003c4 	.word	0x200003c4

08007858 <_getpid_r>:
 8007858:	f7fa b93c 	b.w	8001ad4 <_getpid>

0800785c <__sread>:
 800785c:	b510      	push	{r4, lr}
 800785e:	460c      	mov	r4, r1
 8007860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007864:	f000 f894 	bl	8007990 <_read_r>
 8007868:	2800      	cmp	r0, #0
 800786a:	bfab      	itete	ge
 800786c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800786e:	89a3      	ldrhlt	r3, [r4, #12]
 8007870:	181b      	addge	r3, r3, r0
 8007872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007876:	bfac      	ite	ge
 8007878:	6563      	strge	r3, [r4, #84]	; 0x54
 800787a:	81a3      	strhlt	r3, [r4, #12]
 800787c:	bd10      	pop	{r4, pc}

0800787e <__swrite>:
 800787e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007882:	461f      	mov	r7, r3
 8007884:	898b      	ldrh	r3, [r1, #12]
 8007886:	05db      	lsls	r3, r3, #23
 8007888:	4605      	mov	r5, r0
 800788a:	460c      	mov	r4, r1
 800788c:	4616      	mov	r6, r2
 800788e:	d505      	bpl.n	800789c <__swrite+0x1e>
 8007890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007894:	2302      	movs	r3, #2
 8007896:	2200      	movs	r2, #0
 8007898:	f000 f868 	bl	800796c <_lseek_r>
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	4632      	mov	r2, r6
 80078aa:	463b      	mov	r3, r7
 80078ac:	4628      	mov	r0, r5
 80078ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078b2:	f000 b817 	b.w	80078e4 <_write_r>

080078b6 <__sseek>:
 80078b6:	b510      	push	{r4, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078be:	f000 f855 	bl	800796c <_lseek_r>
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	bf15      	itete	ne
 80078c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80078ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078d2:	81a3      	strheq	r3, [r4, #12]
 80078d4:	bf18      	it	ne
 80078d6:	81a3      	strhne	r3, [r4, #12]
 80078d8:	bd10      	pop	{r4, pc}

080078da <__sclose>:
 80078da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078de:	f000 b813 	b.w	8007908 <_close_r>
	...

080078e4 <_write_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d07      	ldr	r5, [pc, #28]	; (8007904 <_write_r+0x20>)
 80078e8:	4604      	mov	r4, r0
 80078ea:	4608      	mov	r0, r1
 80078ec:	4611      	mov	r1, r2
 80078ee:	2200      	movs	r2, #0
 80078f0:	602a      	str	r2, [r5, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	f7fa f92d 	bl	8001b52 <_write>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_write_r+0x1e>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_write_r+0x1e>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	200003c4 	.word	0x200003c4

08007908 <_close_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d06      	ldr	r5, [pc, #24]	; (8007924 <_close_r+0x1c>)
 800790c:	2300      	movs	r3, #0
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	f7fa f939 	bl	8001b8a <_close>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d102      	bne.n	8007922 <_close_r+0x1a>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	b103      	cbz	r3, 8007922 <_close_r+0x1a>
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	200003c4 	.word	0x200003c4

08007928 <_fstat_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d07      	ldr	r5, [pc, #28]	; (8007948 <_fstat_r+0x20>)
 800792c:	2300      	movs	r3, #0
 800792e:	4604      	mov	r4, r0
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	f7fa f934 	bl	8001ba2 <_fstat>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	d102      	bne.n	8007944 <_fstat_r+0x1c>
 800793e:	682b      	ldr	r3, [r5, #0]
 8007940:	b103      	cbz	r3, 8007944 <_fstat_r+0x1c>
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	bd38      	pop	{r3, r4, r5, pc}
 8007946:	bf00      	nop
 8007948:	200003c4 	.word	0x200003c4

0800794c <_isatty_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d06      	ldr	r5, [pc, #24]	; (8007968 <_isatty_r+0x1c>)
 8007950:	2300      	movs	r3, #0
 8007952:	4604      	mov	r4, r0
 8007954:	4608      	mov	r0, r1
 8007956:	602b      	str	r3, [r5, #0]
 8007958:	f7fa f933 	bl	8001bc2 <_isatty>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_isatty_r+0x1a>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_isatty_r+0x1a>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	200003c4 	.word	0x200003c4

0800796c <_lseek_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4d07      	ldr	r5, [pc, #28]	; (800798c <_lseek_r+0x20>)
 8007970:	4604      	mov	r4, r0
 8007972:	4608      	mov	r0, r1
 8007974:	4611      	mov	r1, r2
 8007976:	2200      	movs	r2, #0
 8007978:	602a      	str	r2, [r5, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f7fa f92c 	bl	8001bd8 <_lseek>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_lseek_r+0x1e>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_lseek_r+0x1e>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	200003c4 	.word	0x200003c4

08007990 <_read_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4d07      	ldr	r5, [pc, #28]	; (80079b0 <_read_r+0x20>)
 8007994:	4604      	mov	r4, r0
 8007996:	4608      	mov	r0, r1
 8007998:	4611      	mov	r1, r2
 800799a:	2200      	movs	r2, #0
 800799c:	602a      	str	r2, [r5, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	f7fa f8ba 	bl	8001b18 <_read>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_read_r+0x1e>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_read_r+0x1e>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	200003c4 	.word	0x200003c4

080079b4 <_init>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr

080079c0 <_fini>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr
